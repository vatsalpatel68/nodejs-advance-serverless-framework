{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "@aws-cdk/aws-lambda": "1.159.0",
    "@aws-cdk/core": "1.159.0",
    "constructs": "^3.3.69"
  },
  "dependencyClosure": {
    "@aws-cdk/assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.Assets",
          "packageId": "Amazon.CDK.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.assets"
        },
        "js": {
          "npm": "@aws-cdk/assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.assets",
          "module": "aws_cdk.assets"
        }
      }
    },
    "@aws-cdk/aws-applicationautoscaling": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ApplicationAutoScaling",
          "packageId": "Amazon.CDK.AWS.ApplicationAutoScaling"
        },
        "java": {
          "maven": {
            "artifactId": "applicationautoscaling",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.applicationautoscaling"
        },
        "js": {
          "npm": "@aws-cdk/aws-applicationautoscaling"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-applicationautoscaling",
          "module": "aws_cdk.aws_applicationautoscaling"
        }
      }
    },
    "@aws-cdk/aws-autoscaling-common": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.AutoScaling.Common",
          "packageId": "Amazon.CDK.AWS.AutoScaling.Common"
        },
        "java": {
          "maven": {
            "artifactId": "autoscaling-common",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.autoscaling.common"
        },
        "js": {
          "npm": "@aws-cdk/aws-autoscaling-common"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-autoscaling-common",
          "module": "aws_cdk.aws_autoscaling_common"
        }
      }
    },
    "@aws-cdk/aws-cloudwatch": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudWatch",
          "packageId": "Amazon.CDK.AWS.CloudWatch"
        },
        "java": {
          "maven": {
            "artifactId": "cloudwatch",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudwatch"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudwatch"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudwatch",
          "module": "aws_cdk.aws_cloudwatch"
        }
      }
    },
    "@aws-cdk/aws-codeguruprofiler": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeGuruProfiler",
          "packageId": "Amazon.CDK.AWS.CodeGuruProfiler"
        },
        "java": {
          "maven": {
            "artifactId": "codeguruprofiler",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codeguruprofiler"
        },
        "js": {
          "npm": "@aws-cdk/aws-codeguruprofiler"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codeguruprofiler",
          "module": "aws_cdk.aws_codeguruprofiler"
        }
      }
    },
    "@aws-cdk/aws-codestarnotifications": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeStarNotifications",
          "packageId": "Amazon.CDK.AWS.CodeStarNotifications"
        },
        "java": {
          "maven": {
            "artifactId": "codestarnotifications",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codestarnotifications"
        },
        "js": {
          "npm": "@aws-cdk/aws-codestarnotifications"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codestarnotifications",
          "module": "aws_cdk.aws_codestarnotifications"
        }
      }
    },
    "@aws-cdk/aws-ec2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EC2",
          "packageId": "Amazon.CDK.AWS.EC2"
        },
        "java": {
          "maven": {
            "artifactId": "ec2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ec2"
        },
        "js": {
          "npm": "@aws-cdk/aws-ec2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ec2",
          "module": "aws_cdk.aws_ec2"
        }
      }
    },
    "@aws-cdk/aws-ecr": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ECR",
          "packageId": "Amazon.CDK.AWS.ECR"
        },
        "java": {
          "maven": {
            "artifactId": "ecr",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr",
          "module": "aws_cdk.aws_ecr"
        }
      }
    },
    "@aws-cdk/aws-ecr-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Ecr.Assets",
          "packageId": "Amazon.CDK.ECR.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "ecr-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr-assets",
          "module": "aws_cdk.aws_ecr_assets"
        }
      }
    },
    "@aws-cdk/aws-efs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EFS",
          "packageId": "Amazon.CDK.AWS.EFS"
        },
        "java": {
          "maven": {
            "artifactId": "efs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.efs"
        },
        "js": {
          "npm": "@aws-cdk/aws-efs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-efs",
          "module": "aws_cdk.aws_efs"
        }
      }
    },
    "@aws-cdk/aws-events": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Events",
          "packageId": "Amazon.CDK.AWS.Events"
        },
        "java": {
          "maven": {
            "artifactId": "events",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.events"
        },
        "js": {
          "npm": "@aws-cdk/aws-events"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-events",
          "module": "aws_cdk.aws_events"
        }
      }
    },
    "@aws-cdk/aws-iam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.IAM",
          "packageId": "Amazon.CDK.AWS.IAM"
        },
        "java": {
          "maven": {
            "artifactId": "iam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.iam"
        },
        "js": {
          "npm": "@aws-cdk/aws-iam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-iam",
          "module": "aws_cdk.aws_iam"
        }
      }
    },
    "@aws-cdk/aws-kms": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.KMS",
          "packageId": "Amazon.CDK.AWS.KMS"
        },
        "java": {
          "maven": {
            "artifactId": "kms",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kms"
        },
        "js": {
          "npm": "@aws-cdk/aws-kms"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kms",
          "module": "aws_cdk.aws_kms"
        }
      }
    },
    "@aws-cdk/aws-lambda": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Lambda",
          "packageId": "Amazon.CDK.AWS.Lambda"
        },
        "java": {
          "maven": {
            "artifactId": "lambda",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.lambda"
        },
        "js": {
          "npm": "@aws-cdk/aws-lambda"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-lambda",
          "module": "aws_cdk.aws_lambda"
        }
      }
    },
    "@aws-cdk/aws-logs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Logs",
          "packageId": "Amazon.CDK.AWS.Logs"
        },
        "java": {
          "maven": {
            "artifactId": "logs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.logs"
        },
        "js": {
          "npm": "@aws-cdk/aws-logs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-logs",
          "module": "aws_cdk.aws_logs"
        }
      }
    },
    "@aws-cdk/aws-s3": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3",
          "packageId": "Amazon.CDK.AWS.S3"
        },
        "java": {
          "maven": {
            "artifactId": "s3",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3",
          "module": "aws_cdk.aws_s3"
        }
      }
    },
    "@aws-cdk/aws-s3-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3.Assets",
          "packageId": "Amazon.CDK.AWS.S3.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "s3-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3-assets",
          "module": "aws_cdk.aws_s3_assets"
        }
      }
    },
    "@aws-cdk/aws-signer": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Signer",
          "packageId": "Amazon.CDK.AWS.Signer"
        },
        "java": {
          "maven": {
            "artifactId": "signer",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.signer"
        },
        "js": {
          "npm": "@aws-cdk/aws-signer"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-signer",
          "module": "aws_cdk.aws_signer"
        }
      }
    },
    "@aws-cdk/aws-sns": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SNS",
          "packageId": "Amazon.CDK.AWS.SNS"
        },
        "java": {
          "maven": {
            "artifactId": "sns",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sns"
        },
        "js": {
          "npm": "@aws-cdk/aws-sns"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sns",
          "module": "aws_cdk.aws_sns"
        }
      }
    },
    "@aws-cdk/aws-sqs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SQS",
          "packageId": "Amazon.CDK.AWS.SQS"
        },
        "java": {
          "maven": {
            "artifactId": "sqs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sqs"
        },
        "js": {
          "npm": "@aws-cdk/aws-sqs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sqs",
          "module": "aws_cdk.aws_sqs"
        }
      }
    },
    "@aws-cdk/aws-ssm": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SSM",
          "packageId": "Amazon.CDK.AWS.SSM"
        },
        "java": {
          "maven": {
            "artifactId": "ssm",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ssm"
        },
        "js": {
          "npm": "@aws-cdk/aws-ssm"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ssm",
          "module": "aws_cdk.aws_ssm"
        }
      }
    },
    "@aws-cdk/cloud-assembly-schema": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CloudAssembly.Schema",
          "packageId": "Amazon.CDK.CloudAssembly.Schema"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cloud-assembly-schema",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cloudassembly.schema"
        },
        "js": {
          "npm": "@aws-cdk/cloud-assembly-schema"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cloud-assembly-schema",
          "module": "aws_cdk.cloud_assembly_schema"
        }
      }
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      }
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      }
    },
    "@aws-cdk/region-info": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "The CDK Construct Library for AWS Lambda in Node.js",
  "docs": {
    "stability": "stable"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "1.58.0 (build f8ba112)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "lambda"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "compiledWithDeprecationWarnings": true,
      "pacmak": {
        "hasDefaultInterfaces": true
      },
      "rosetta": {
        "strict": true
      }
    }
  },
  "name": "@aws-cdk/aws-lambda-nodejs",
  "readme": {
    "markdown": "# Amazon Lambda Node.js Library\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cdk-constructs: Stable](https://img.shields.io/badge/cdk--constructs-stable-success.svg?style=for-the-badge)\n\n---\n\n<!--END STABILITY BANNER-->\n\nThis library provides constructs for Node.js Lambda functions.\n\n## Node.js Function\n\nThe `NodejsFunction` construct creates a Lambda function with automatic transpiling and bundling\nof TypeScript or Javascript code. This results in smaller Lambda packages that contain only the\ncode and dependencies needed to run the function.\n\nIt uses [esbuild](https://esbuild.github.io/) under the hood.\n\n## Reference project architecture\n\nThe `NodejsFunction` allows you to define your CDK and runtime dependencies in a single\npackage.json and to collocate your runtime code with your infrastructure code:\n\n```plaintext\n.\n├── lib\n│   ├── my-construct.api.ts # Lambda handler for API\n│   ├── my-construct.auth.ts # Lambda handler for Auth\n│   └── my-construct.ts # CDK construct with two Lambda functions\n├── package-lock.json # single lock file\n├── package.json # CDK and runtime dependencies defined in a single package.json\n└── tsconfig.json\n```\n\nBy default, the construct will use the name of the defining file and the construct's\nid to look up the entry file. In `my-construct.ts` above we have:\n\n```ts\n// automatic entry look up\nconst apiHandler = new lambda.NodejsFunction(this, 'api');\nconst authHandler = new lambda.NodejsFunction(this, 'auth');\n```\n\nAlternatively, an entry file and handler can be specified:\n\n```ts\nnew lambda.NodejsFunction(this, 'MyFunction', {\n  entry: '/path/to/my/file.ts', // accepts .js, .jsx, .ts, .tsx and .mjs files\n  handler: 'myExportedFunc', // defaults to 'handler'\n});\n```\n\nFor monorepos, the reference architecture becomes:\n\n```plaintext\n.\n├── packages\n│   ├── cool-package\n│   │   ├── lib\n│   │   │   ├── cool-construct.api.ts\n│   │   │   ├── cool-construct.auth.ts\n│   │   │   └── cool-construct.ts\n│   │   ├── package.json # CDK and runtime dependencies for cool-package\n│   │   └── tsconfig.json\n│   └── super-package\n│       ├── lib\n│       │   ├── super-construct.handler.ts\n│       │   └── super-construct.ts\n│       ├── package.json # CDK and runtime dependencies for super-package\n│       └── tsconfig.json\n├── package-lock.json # single lock file\n├── package.json # root dependencies\n└── tsconfig.json\n```\n\n## Customizing the underlying Lambda function\n\nAll properties of `lambda.Function` can be used to customize the underlying `lambda.Function`.\n\nSee also the [AWS Lambda construct library](https://github.com/aws/aws-cdk/tree/master/packages/%40aws-cdk/aws-lambda).\n\nThe `NodejsFunction` construct automatically [reuses existing connections](https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-reusing-connections.html)\nwhen working with the AWS SDK for JavaScript. Set the `awsSdkConnectionReuse` prop to `false` to disable it.\n\n## Lock file\n\nThe `NodejsFunction` requires a dependencies lock file (`yarn.lock`, `pnpm-lock.yaml` or\n`package-lock.json`). When bundling in a Docker container, the path containing this lock file is\nused as the source (`/asset-input`) for the volume mounted in the container.\n\nBy default, the construct will try to automatically determine your project lock file.\nAlternatively, you can specify the `depsLockFilePath` prop manually. In this\ncase you need to ensure that this path includes `entry` and any module/dependencies\nused by your function. Otherwise bundling will fail.\n\n## Local bundling\n\nIf `esbuild` is available it will be used to bundle your code in your environment. Otherwise,\nbundling will happen in a [Lambda compatible Docker container](https://gallery.ecr.aws/sam/build-nodejs12.x)\nwith the Docker platform based on the target architecture of the Lambda function.\n\nFor macOS the recommended approach is to install `esbuild` as Docker volume performance is really poor.\n\n`esbuild` can be installed with:\n\n```console\n$ npm install --save-dev esbuild@0\n```\n\nOR\n\n```console\n$ yarn add --dev esbuild@0\n```\n\nIf you're using a monorepo layout, the `esbuild` dependency needs to be installed in the \"root\" `package.json` file,\nnot in the workspace. From the reference architecture described [above](#reference-project-architecture), the `esbuild`\ndev dependency needs to be in `./package.json`, not `packages/cool-package/package.json` or\n`packages/super-package/package.json`.\n\nTo force bundling in a Docker container even if `esbuild` is available in your environment,\nset `bundling.forceDockerBundling` to `true`. This is useful if your function relies on node\nmodules that should be installed (`nodeModules` prop, see [below](#install-modules)) in a Lambda\ncompatible environment. This is usually the case with modules using native dependencies.\n\n## Working with modules\n\n### Externals\n\nBy default, all node modules are bundled except for `aws-sdk`. This can be configured by specifying\n`bundling.externalModules`:\n\n```ts\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    externalModules: [\n      'aws-sdk', // Use the 'aws-sdk' available in the Lambda runtime\n      'cool-module', // 'cool-module' is already available in a Layer\n    ],\n  },\n});\n```\n\n### Install modules\n\nBy default, all node modules referenced in your Lambda code will be bundled by `esbuild`.\nUse the `nodeModules` prop under `bundling` to specify a list of modules that should not be\nbundled but instead included in the `node_modules` folder of the Lambda package. This is useful\nwhen working with native dependencies or when `esbuild` fails to bundle a module.\n\n```ts\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    nodeModules: ['native-module', 'other-module'],\n  },\n});\n```\n\nThe modules listed in `nodeModules` must be present in the `package.json`'s dependencies or\ninstalled. The same version will be used for installation. The lock file (`yarn.lock`,\n`pnpm-lock.yaml` or `package-lock.json`) will be used along with the right installer (`yarn`,\n`pnpm` or `npm`).\n\nWhen working with `nodeModules` using native dependencies, you might want to force bundling in a\nDocker container even if `esbuild` is available in your environment. This can be done by setting\n`bundling.forceDockerBundling` to `true`.\n\n## Configuring `esbuild`\n\nThe `NodejsFunction` construct exposes [esbuild options](https://esbuild.github.io/api/#build-api)\nvia properties under `bundling`:\n\n```ts\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    minify: true, // minify code, defaults to false\n    sourceMap: true, // include source map, defaults to false\n    sourceMapMode: lambda.SourceMapMode.INLINE, // defaults to SourceMapMode.DEFAULT\n    sourcesContent: false, // do not include original source into source map, defaults to true\n    target: 'es2020', // target environment for the generated JavaScript code\n    loader: { // Use the 'dataurl' loader for '.png' files\n      '.png': 'dataurl',\n    },\n    define: { // Replace strings during build time\n      'process.env.API_KEY': JSON.stringify('xxx-xxxx-xxx'),\n      'process.env.PRODUCTION': JSON.stringify(true),\n      'process.env.NUMBER': JSON.stringify(123),\n    },\n    logLevel: lambda.LogLevel.SILENT, // defaults to LogLevel.WARNING\n    keepNames: true, // defaults to false\n    tsconfig: 'custom-tsconfig.json', // use custom-tsconfig.json instead of default,\n    metafile: true, // include meta file, defaults to false\n    banner: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    footer: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    charset: lambda.Charset.UTF8, // do not escape non-ASCII characters, defaults to Charset.ASCII\n    format: lambda.OutputFormat.ESM, // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n    mainFields: ['module', 'main'], // prefer ECMAScript versions of dependencies\n    inject: ['./my-shim.js', './other-shim.js'], // allows to automatically replace a global variable with an import from another file\n    esbuildArgs: { // Pass additional arguments to esbuild\n      \"--log-limit\": \"0\",\n      \"--splitting\": true,\n    },\n  },\n});\n```\n\n## Command hooks\n\nIt is possible to run additional commands by specifying the `commandHooks` prop:\n\n```text\n// This example only available in TypeScript\n// Run additional props via `commandHooks`\nnew lambda.NodejsFunction(this, 'my-handler-with-commands', {\n  bundling: {\n    commandHooks: {\n      beforeBundling(inputDir: string, outputDir: string): string[] {\n        return [\n          `echo hello > ${inputDir}/a.txt`,\n          `cp ${inputDir}/a.txt ${outputDir}`,\n        ];\n      },\n      afterBundling(inputDir: string, outputDir: string): string[] {\n        return [`cp ${inputDir}/b.txt ${outputDir}/txt`];\n      },\n      beforeInstall() {\n        return [];\n      },\n      // ...\n    },\n    // ...\n  },\n});\n```\n\nThe following hooks are available:\n\n- `beforeBundling`: runs before all bundling commands\n- `beforeInstall`: runs before node modules installation\n- `afterBundling`: runs after all bundling commands\n\nThey all receive the directory containing the lock file (`inputDir`) and the\ndirectory where the bundled asset will be output (`outputDir`). They must return\nan array of commands to run. Commands are chained with `&&`.\n\nThe commands will run in the environment in which bundling occurs: inside the\ncontainer for Docker bundling or on the host OS for local bundling.\n\n## Pre Compilation with TSC\n\nIn some cases, `esbuild` may not yet support some newer features of the typescript language, such as,\n[`emitDecoratorMetadata`](https://www.typescriptlang.org/tsconfig#emitDecoratorMetadata).\nIn such cases, it is possible to run pre-compilation using `tsc` by setting the `preCompilation` flag.\n\n```ts\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    preCompilation: true,\n  },\n});\n```\n\nNote: A [`tsconfig.json` file](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html) is required\n\n## Customizing Docker bundling\n\nUse `bundling.environment` to define environments variables when `esbuild` runs:\n\n```ts\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    environment: {\n      NODE_ENV: 'production',\n    },\n  },\n});\n```\n\nUse `bundling.buildArgs` to pass build arguments when building the Docker bundling image:\n\n```ts\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    buildArgs: {\n      HTTPS_PROXY: 'https://127.0.0.1:3001',\n    },\n  }\n});\n```\n\nUse `bundling.dockerImage` to use a custom Docker bundling image:\n\n```ts\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    dockerImage: DockerImage.fromBuild('/path/to/Dockerfile'),\n  },\n});\n```\n\nThis image should have `esbuild` installed **globally**. If you plan to use `nodeModules` it\nshould also have `npm`, `yarn` or `pnpm` depending on the lock file you're using.\n\nUse the [default image provided by `@aws-cdk/aws-lambda-nodejs`](https://github.com/aws/aws-cdk/blob/master/packages/%40aws-cdk/aws-lambda-nodejs/lib/Dockerfile)\nas a source of inspiration.\n\n## Asset hash\n\nBy default the asset hash will be calculated based on the bundled output (`AssetHashType.OUTPUT`).\n\nUse the `assetHash` prop to pass a custom hash:\n\n```ts\nnew lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    assetHash: 'my-custom-hash',\n  },\n});\n```\n\nIf you chose to customize the hash, you will need to make sure it is updated every time the asset\nchanges, or otherwise it is possible that some deployments will not be invalidated.\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/aws-lambda-nodejs",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.AWS.Lambda.Nodejs",
      "packageId": "Amazon.CDK.AWS.Lambda.Nodejs"
    },
    "java": {
      "maven": {
        "artifactId": "lambda-nodejs",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.lambda.nodejs"
    },
    "js": {
      "npm": "@aws-cdk/aws-lambda-nodejs"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 1"
      ],
      "distName": "aws-cdk.aws-lambda-nodejs",
      "module": "aws_cdk.aws_lambda_nodejs"
    }
  },
  "types": {
    "@aws-cdk/aws-lambda-nodejs.BundlingOptions": {
      "assembly": "@aws-cdk/aws-lambda-nodejs",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "new lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    dockerImage: DockerImage.fromBuild('/path/to/Dockerfile'),\n  },\n});",
        "stability": "stable",
        "summary": "Bundling options."
      },
      "fqn": "@aws-cdk/aws-lambda-nodejs.BundlingOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/types.ts",
        "line": 6
      },
      "name": "BundlingOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- asset hash is calculated based on the bundled output",
            "remarks": "For consistency, this custom hash will\nbe SHA256 hashed and encoded as hex. The resulting hash will be the asset\nhash.\n\nNOTE: the hash is used in order to identify a specific revision of the asset, and\nused for optimizing and caching deployment activities related to this asset such as\npackaging, uploading to Amazon S3, etc. If you chose to customize the hash, you will\nneed to make sure it is updated every time the asset changes, or otherwise it is\npossible that some deployments will not be invalidated.",
            "stability": "stable",
            "summary": "Specify a custom hash for this asset."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 286
          },
          "name": "assetHash",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no comments are passed",
            "remarks": "This is similar to footer which inserts at the end instead of the beginning.\n\nThis is commonly used to insert comments:",
            "stability": "stable",
            "summary": "Use this to insert an arbitrary string at the beginning of generated JavaScript files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 138
          },
          "name": "banner",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no build arguments are passed",
            "stability": "stable",
            "summary": "Build arguments to pass when building the bundling image."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 231
          },
          "name": "buildArgs",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Charset.ASCII",
            "remarks": "By default esbuild's output is ASCII-only. Any non-ASCII characters are escaped\nusing backslash escape sequences. Using escape sequences makes the generated output\nslightly bigger, and also makes it harder to read. If you would like for esbuild to print\nthe original characters without using escape sequences, use `Charset.UTF8`.",
            "see": "https://esbuild.github.io/api/#charset",
            "stability": "stable",
            "summary": "The charset to use for esbuild's output."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 162
          },
          "name": "charset",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-lambda-nodejs.Charset"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- do not run additional commands",
            "stability": "stable",
            "summary": "Command hooks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 271
          },
          "name": "commandHooks",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-lambda-nodejs.ICommandHooks"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no replacements are made",
            "remarks": "For example, `{ 'process.env.DEBUG': 'true' }`.\n\nAnother example, `{ 'process.env.API_KEY': JSON.stringify('xxx-xxxx-xxx') }`.",
            "stability": "stable",
            "summary": "Replace global identifiers with constant expressions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 180
          },
          "name": "define",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "aws-cdk": "/aws-lambda-nodejs"
            },
            "default": "- use the Docker image provided by",
            "remarks": "This image should have esbuild installed globally. If you plan to use `nodeModules`\nit should also have `npm` or `yarn` depending on the lock file you're using.\n\nSee https://github.com/aws/aws-cdk/blob/master/packages/%40aws-cdk/aws-lambda-nodejs/lib/Dockerfile\nfor the default image provided by @aws-cdk/aws-lambda-nodejs.",
            "stability": "stable",
            "summary": "A custom bundling Docker image."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 264
          },
          "name": "dockerImage",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.DockerImage"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no environment variables are defined.",
            "stability": "stable",
            "summary": "Environment variables defined when bundling runs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 169
          },
          "name": "environment",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no additional esbuild arguments are passed",
            "remarks": "For example, to add the [--log-limit](https://esbuild.github.io/api/#log-limit) flag:\n\n```text\nnew NodejsFunction(scope, id, {\n   ...\n   bundling: {\n     esbuildArgs: {\n       \"--log-limit\": \"0\",\n     }\n   }\n});\n```",
            "stability": "stable",
            "summary": "Build arguments to pass into esbuild."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 224
          },
          "name": "esbuildArgs",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "union": {
                  "types": [
                    {
                      "primitive": "string"
                    },
                    {
                      "primitive": "boolean"
                    }
                  ]
                }
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- latest v0",
            "stability": "stable",
            "summary": "The version of esbuild to use when running in a Docker container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 204
          },
          "name": "esbuildVersion",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "['aws-sdk']",
            "stability": "stable",
            "summary": "A list of modules that should be considered as externals (already available in the runtime)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 188
          },
          "name": "externalModules",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no comments are passed",
            "remarks": "This is similar to banner which inserts at the beginning instead of the end.\n\nThis is commonly used to insert comments",
            "stability": "stable",
            "summary": "Use this to insert an arbitrary string at the end of generated JavaScript files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 149
          },
          "name": "footer",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "This is useful if your function relies on node modules\nthat should be installed (`nodeModules`) in a Lambda compatible\nenvironment.",
            "stability": "stable",
            "summary": "Force bundling in a Docker container even if local bundling is possible."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 241
          },
          "name": "forceDockerBundling",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "OutputFormat.CJS",
            "stability": "stable",
            "summary": "Output format for the generated JavaScript files."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 293
          },
          "name": "format",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-lambda-nodejs.OutputFormat"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no code is injected",
            "see": "https://esbuild.github.io/api/#inject",
            "stability": "stable",
            "summary": "This option allows you to automatically replace a global variable with an import from another file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 310
          },
          "name": "inject",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "In JavaScript the `name` property on functions and classes defaults to a\nnearby identifier in the source code.\n\nHowever, minification renames symbols to reduce code size and bundling\nsometimes need to rename symbols to avoid collisions. That changes value of\nthe `name` property for many of these cases. This is usually fine because\nthe `name` property is normally only used for debugging. However, some\nframeworks rely on the `name` property for registration and binding purposes.\nIf this is the case, you can enable this option to preserve the original\n`name` values even in minified code.",
            "stability": "stable",
            "summary": "Whether to preserve the original `name` values even in minified code."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 85
          },
          "name": "keepNames",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- use esbuild default loaders",
            "remarks": "Configuring a loader for a given file type lets you load that file type with\nan `import` statement or a `require` call.",
            "see": "https://esbuild.github.io/api/#loader\n\nFor example, `{ '.png': 'dataurl' }`.",
            "stability": "stable",
            "summary": "Use loaders to change how a given input file is interpreted."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 59
          },
          "name": "loader",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "LogLevel.WARNING",
            "remarks": "This is also propagated to the package manager and\napplies to its specific install command.",
            "stability": "stable",
            "summary": "Log level for esbuild."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 67
          },
          "name": "logLevel",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-lambda-nodejs.LogLevel"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "['main', 'module']",
            "remarks": "Try ['module', 'main'] to default to ES module versions.",
            "stability": "stable",
            "summary": "How to determine the entry point for modules."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 301
          },
          "name": "mainFields",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "The metadata in this JSON file follows this schema (specified using TypeScript syntax):\n\n```text\n{\n   outputs: {\n     [path: string]: {\n       bytes: number\n       inputs: {\n         [path: string]: { bytesInOutput: number }\n       }\n       imports: { path: string }[]\n       exports: string[]\n     }\n   }\n}\n```\nThis data can then be analyzed by other tools. For example,\nbundle buddy can consume esbuild's metadata format and generates a treemap visualization\nof the modules in your bundle and how much space each one takes up.",
            "see": "https://esbuild.github.io/api/#metafile",
            "stability": "stable",
            "summary": "This option tells esbuild to write out a JSON file relative to output directory with metadata about the build."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 127
          },
          "name": "metafile",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "Whether to minify files when bundling."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 12
          },
          "name": "minify",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- all modules are bundled",
            "remarks": "Modules are\ninstalled in a Lambda compatible environment only when bundling runs in\nDocker.",
            "stability": "stable",
            "summary": "A list of modules that should be installed instead of bundled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 197
          },
          "name": "nodeModules",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "This usually is not required unless you are using new experimental features that\nare only supported by typescript's `tsc` compiler.\nOne example of such feature is `emitDecoratorMetadata`.",
            "stability": "stable",
            "summary": "Run compilation using tsc before running file through bundling step."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 251
          },
          "name": "preCompilation",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "stable",
            "summary": "Whether to include source maps when bundling."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 19
          },
          "name": "sourceMap",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "SourceMapMode.DEFAULT",
            "see": "https://esbuild.github.io/api/#sourcemap",
            "stability": "stable",
            "summary": "Source map mode to be used when bundling."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 27
          },
          "name": "sourceMapMode",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-lambda-nodejs.SourceMapMode"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "see": "https://esbuild.github.io/api/#sources-content",
            "stability": "stable",
            "summary": "Whether to include original source code in source maps when bundling."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 36
          },
          "name": "sourcesContent",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the node version of the runtime",
            "see": "https://esbuild.github.io/api/#target",
            "stability": "stable",
            "summary": "Target environment for the generated JavaScript code."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 45
          },
          "name": "target",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- automatically discovered by `esbuild`",
            "remarks": "However, you can also configure a custom `tsconfig.json` file to use instead.\n\nThis is similar to entry path, you need to provide path to your custom `tsconfig.json`.\n\nThis can be useful if you need to do multiple builds of the same code with different settings.\n\nFor example, `{ 'tsconfig': 'path/custom.tsconfig.json' }`.",
            "stability": "stable",
            "summary": "Normally the esbuild automatically discovers `tsconfig.json` files and reads their contents during a build."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 100
          },
          "name": "tsconfig",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/types:BundlingOptions"
    },
    "@aws-cdk/aws-lambda-nodejs.Charset": {
      "assembly": "@aws-cdk/aws-lambda-nodejs",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "new lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    minify: true, // minify code, defaults to false\n    sourceMap: true, // include source map, defaults to false\n    sourceMapMode: lambda.SourceMapMode.INLINE, // defaults to SourceMapMode.DEFAULT\n    sourcesContent: false, // do not include original source into source map, defaults to true\n    target: 'es2020', // target environment for the generated JavaScript code\n    loader: { // Use the 'dataurl' loader for '.png' files\n      '.png': 'dataurl',\n    },\n    define: { // Replace strings during build time\n      'process.env.API_KEY': JSON.stringify('xxx-xxxx-xxx'),\n      'process.env.PRODUCTION': JSON.stringify(true),\n      'process.env.NUMBER': JSON.stringify(123),\n    },\n    logLevel: lambda.LogLevel.SILENT, // defaults to LogLevel.WARNING\n    keepNames: true, // defaults to false\n    tsconfig: 'custom-tsconfig.json', // use custom-tsconfig.json instead of default,\n    metafile: true, // include meta file, defaults to false\n    banner: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    footer: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    charset: lambda.Charset.UTF8, // do not escape non-ASCII characters, defaults to Charset.ASCII\n    format: lambda.OutputFormat.ESM, // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n    mainFields: ['module', 'main'], // prefer ECMAScript versions of dependencies\n    inject: ['./my-shim.js', './other-shim.js'], // allows to automatically replace a global variable with an import from another file\n    esbuildArgs: { // Pass additional arguments to esbuild\n      \"--log-limit\": \"0\",\n      \"--splitting\": true,\n    },\n  },\n});",
        "stability": "stable",
        "summary": "Charset for esbuild's output."
      },
      "fqn": "@aws-cdk/aws-lambda-nodejs.Charset",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/types.ts",
        "line": 415
      },
      "members": [
        {
          "docs": {
            "remarks": "Any non-ASCII characters are escaped using backslash escape sequences",
            "stability": "stable",
            "summary": "ASCII."
          },
          "name": "ASCII"
        },
        {
          "docs": {
            "remarks": "Keep original characters without using escape sequences",
            "stability": "stable",
            "summary": "UTF-8."
          },
          "name": "UTF8"
        }
      ],
      "name": "Charset",
      "symbolId": "lib/types:Charset"
    },
    "@aws-cdk/aws-lambda-nodejs.ICommandHooks": {
      "assembly": "@aws-cdk/aws-lambda-nodejs",
      "docs": {
        "remarks": "These commands will run in the environment in which bundling occurs: inside\nthe container for Docker bundling or on the host OS for local bundling.\n\nCommands are chained with `&&`.\n\nThe following example (specified in TypeScript) copies a file from the input\ndirectory to the output directory to include it in the bundled asset:\n\n```text\nafterBundling(inputDir: string, outputDir: string): string[]{\n   return [`cp ${inputDir}/my-binary.node ${outputDir}`];\n}\n```",
        "stability": "stable",
        "summary": "Command hooks."
      },
      "fqn": "@aws-cdk/aws-lambda-nodejs.ICommandHooks",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/types.ts",
        "line": 347
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Commands are chained with `&&`.",
            "stability": "stable",
            "summary": "Returns commands to run after bundling."
          },
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 369
          },
          "name": "afterBundling",
          "parameters": [
            {
              "name": "inputDir",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "outputDir",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Commands are chained with `&&`.",
            "stability": "stable",
            "summary": "Returns commands to run before bundling."
          },
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 353
          },
          "name": "beforeBundling",
          "parameters": [
            {
              "name": "inputDir",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "outputDir",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This hook only runs when node modules are installed.\n\nCommands are chained with `&&`.",
            "stability": "stable",
            "summary": "Returns commands to run before installing node modules."
          },
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 362
          },
          "name": "beforeInstall",
          "parameters": [
            {
              "name": "inputDir",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "outputDir",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "ICommandHooks",
      "symbolId": "lib/types:ICommandHooks"
    },
    "@aws-cdk/aws-lambda-nodejs.LogLevel": {
      "assembly": "@aws-cdk/aws-lambda-nodejs",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "new lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    minify: true, // minify code, defaults to false\n    sourceMap: true, // include source map, defaults to false\n    sourceMapMode: lambda.SourceMapMode.INLINE, // defaults to SourceMapMode.DEFAULT\n    sourcesContent: false, // do not include original source into source map, defaults to true\n    target: 'es2020', // target environment for the generated JavaScript code\n    loader: { // Use the 'dataurl' loader for '.png' files\n      '.png': 'dataurl',\n    },\n    define: { // Replace strings during build time\n      'process.env.API_KEY': JSON.stringify('xxx-xxxx-xxx'),\n      'process.env.PRODUCTION': JSON.stringify(true),\n      'process.env.NUMBER': JSON.stringify(123),\n    },\n    logLevel: lambda.LogLevel.SILENT, // defaults to LogLevel.WARNING\n    keepNames: true, // defaults to false\n    tsconfig: 'custom-tsconfig.json', // use custom-tsconfig.json instead of default,\n    metafile: true, // include meta file, defaults to false\n    banner: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    footer: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    charset: lambda.Charset.UTF8, // do not escape non-ASCII characters, defaults to Charset.ASCII\n    format: lambda.OutputFormat.ESM, // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n    mainFields: ['module', 'main'], // prefer ECMAScript versions of dependencies\n    inject: ['./my-shim.js', './other-shim.js'], // allows to automatically replace a global variable with an import from another file\n    esbuildArgs: { // Pass additional arguments to esbuild\n      \"--log-limit\": \"0\",\n      \"--splitting\": true,\n    },\n  },\n});",
        "stability": "stable",
        "summary": "Log levels for esbuild and package managers' install commands."
      },
      "fqn": "@aws-cdk/aws-lambda-nodejs.LogLevel",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/types.ts",
        "line": 375
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Show everything."
          },
          "name": "INFO"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Show warnings and errors."
          },
          "name": "WARNING"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Show errors only."
          },
          "name": "ERROR"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Show nothing."
          },
          "name": "SILENT"
        }
      ],
      "name": "LogLevel",
      "symbolId": "lib/types:LogLevel"
    },
    "@aws-cdk/aws-lambda-nodejs.NodejsFunction": {
      "assembly": "@aws-cdk/aws-lambda-nodejs",
      "base": "@aws-cdk/aws-lambda.Function",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "new lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    dockerImage: DockerImage.fromBuild('/path/to/Dockerfile'),\n  },\n});",
        "stability": "stable",
        "summary": "A Node.js Lambda function bundled using esbuild."
      },
      "fqn": "@aws-cdk/aws-lambda-nodejs.NodejsFunction",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/function.ts",
          "line": 90
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-lambda-nodejs.NodejsFunctionProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/function.ts",
        "line": 89
      },
      "name": "NodejsFunction",
      "symbolId": "lib/function:NodejsFunction"
    },
    "@aws-cdk/aws-lambda-nodejs.NodejsFunctionProps": {
      "assembly": "@aws-cdk/aws-lambda-nodejs",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "new lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    minify: true, // minify code, defaults to false\n    sourceMap: true, // include source map, defaults to false\n    sourceMapMode: lambda.SourceMapMode.INLINE, // defaults to SourceMapMode.DEFAULT\n    sourcesContent: false, // do not include original source into source map, defaults to true\n    target: 'es2020', // target environment for the generated JavaScript code\n    loader: { // Use the 'dataurl' loader for '.png' files\n      '.png': 'dataurl',\n    },\n    define: { // Replace strings during build time\n      'process.env.API_KEY': JSON.stringify('xxx-xxxx-xxx'),\n      'process.env.PRODUCTION': JSON.stringify(true),\n      'process.env.NUMBER': JSON.stringify(123),\n    },\n    logLevel: lambda.LogLevel.SILENT, // defaults to LogLevel.WARNING\n    keepNames: true, // defaults to false\n    tsconfig: 'custom-tsconfig.json', // use custom-tsconfig.json instead of default,\n    metafile: true, // include meta file, defaults to false\n    banner: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    footer: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    charset: lambda.Charset.UTF8, // do not escape non-ASCII characters, defaults to Charset.ASCII\n    format: lambda.OutputFormat.ESM, // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n    mainFields: ['module', 'main'], // prefer ECMAScript versions of dependencies\n    inject: ['./my-shim.js', './other-shim.js'], // allows to automatically replace a global variable with an import from another file\n    esbuildArgs: { // Pass additional arguments to esbuild\n      \"--log-limit\": \"0\",\n      \"--splitting\": true,\n    },\n  },\n});",
        "stability": "stable",
        "summary": "Properties for a NodejsFunction."
      },
      "fqn": "@aws-cdk/aws-lambda-nodejs.NodejsFunctionProps",
      "interfaces": [
        "@aws-cdk/aws-lambda.FunctionOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/function.ts",
        "line": 17
      },
      "name": "NodejsFunctionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "true",
            "remarks": "This sets the `AWS_NODEJS_CONNECTION_REUSE_ENABLED` environment variable\nto `1`.",
            "see": "https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-reusing-connections.html",
            "stability": "stable",
            "summary": "Whether to automatically reuse TCP connections when working with the AWS SDK for JavaScript."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/function.ts",
            "line": 54
          },
          "name": "awsSdkConnectionReuse",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- use default bundling options: no minify, no sourcemap, all\nmodules are bundled.",
            "stability": "stable",
            "summary": "Bundling options."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/function.ts",
            "line": 76
          },
          "name": "bundling",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-lambda-nodejs.BundlingOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the path is found by walking up parent directories searching for\na `yarn.lock` or `package-lock.json` file",
            "remarks": "This will be used as the source for the volume mounted in the Docker\ncontainer.\n\nModules specified in `nodeModules` will be installed using the right\ninstaller (`npm` or `yarn`) along with this lock file.",
            "stability": "stable",
            "summary": "The path to the dependencies lock file (`yarn.lock` or `package-lock.json`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/function.ts",
            "line": 68
          },
          "name": "depsLockFilePath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Derived from the name of the defining file and the construct's id.\nIf the `NodejsFunction` is defined in `stack.ts` with `my-handler` as id\n(`new NodejsFunction(this, 'my-handler')`), the construct will look at `stack.my-handler.ts`\nand `stack.my-handler.js`.",
            "stability": "stable",
            "summary": "Path to the entry file (JavaScript or TypeScript)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/function.ts",
            "line": 26
          },
          "name": "entry",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "handler",
            "stability": "stable",
            "summary": "The name of the exported handler in the entry file."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/function.ts",
            "line": 33
          },
          "name": "handler",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- the directory containing the `depsLockFilePath`",
            "stability": "stable",
            "summary": "The path to the directory containing project config files (`package.json` or `tsconfig.json`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/function.ts",
            "line": 83
          },
          "name": "projectRoot",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Runtime.NODEJS_14_X",
            "remarks": "Only runtimes of the Node.js family are\nsupported.",
            "stability": "stable",
            "summary": "The runtime environment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/function.ts",
            "line": 41
          },
          "name": "runtime",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-lambda.Runtime"
          }
        }
      ],
      "symbolId": "lib/function:NodejsFunctionProps"
    },
    "@aws-cdk/aws-lambda-nodejs.OutputFormat": {
      "assembly": "@aws-cdk/aws-lambda-nodejs",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "new lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    minify: true, // minify code, defaults to false\n    sourceMap: true, // include source map, defaults to false\n    sourceMapMode: lambda.SourceMapMode.INLINE, // defaults to SourceMapMode.DEFAULT\n    sourcesContent: false, // do not include original source into source map, defaults to true\n    target: 'es2020', // target environment for the generated JavaScript code\n    loader: { // Use the 'dataurl' loader for '.png' files\n      '.png': 'dataurl',\n    },\n    define: { // Replace strings during build time\n      'process.env.API_KEY': JSON.stringify('xxx-xxxx-xxx'),\n      'process.env.PRODUCTION': JSON.stringify(true),\n      'process.env.NUMBER': JSON.stringify(123),\n    },\n    logLevel: lambda.LogLevel.SILENT, // defaults to LogLevel.WARNING\n    keepNames: true, // defaults to false\n    tsconfig: 'custom-tsconfig.json', // use custom-tsconfig.json instead of default,\n    metafile: true, // include meta file, defaults to false\n    banner: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    footer: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    charset: lambda.Charset.UTF8, // do not escape non-ASCII characters, defaults to Charset.ASCII\n    format: lambda.OutputFormat.ESM, // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n    mainFields: ['module', 'main'], // prefer ECMAScript versions of dependencies\n    inject: ['./my-shim.js', './other-shim.js'], // allows to automatically replace a global variable with an import from another file\n    esbuildArgs: { // Pass additional arguments to esbuild\n      \"--log-limit\": \"0\",\n      \"--splitting\": true,\n    },\n  },\n});",
        "stability": "stable",
        "summary": "Output format for the generated JavaScript files."
      },
      "fqn": "@aws-cdk/aws-lambda-nodejs.OutputFormat",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/types.ts",
        "line": 316
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "CommonJS."
          },
          "name": "CJS"
        },
        {
          "docs": {
            "remarks": "Requires a running environment that supports `import` and `export` syntax.",
            "stability": "stable",
            "summary": "ECMAScript module."
          },
          "name": "ESM"
        }
      ],
      "name": "OutputFormat",
      "symbolId": "lib/types:OutputFormat"
    },
    "@aws-cdk/aws-lambda-nodejs.SourceMapMode": {
      "assembly": "@aws-cdk/aws-lambda-nodejs",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "new lambda.NodejsFunction(this, 'my-handler', {\n  bundling: {\n    minify: true, // minify code, defaults to false\n    sourceMap: true, // include source map, defaults to false\n    sourceMapMode: lambda.SourceMapMode.INLINE, // defaults to SourceMapMode.DEFAULT\n    sourcesContent: false, // do not include original source into source map, defaults to true\n    target: 'es2020', // target environment for the generated JavaScript code\n    loader: { // Use the 'dataurl' loader for '.png' files\n      '.png': 'dataurl',\n    },\n    define: { // Replace strings during build time\n      'process.env.API_KEY': JSON.stringify('xxx-xxxx-xxx'),\n      'process.env.PRODUCTION': JSON.stringify(true),\n      'process.env.NUMBER': JSON.stringify(123),\n    },\n    logLevel: lambda.LogLevel.SILENT, // defaults to LogLevel.WARNING\n    keepNames: true, // defaults to false\n    tsconfig: 'custom-tsconfig.json', // use custom-tsconfig.json instead of default,\n    metafile: true, // include meta file, defaults to false\n    banner: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    footer: '/* comments */', // requires esbuild >= 0.9.0, defaults to none\n    charset: lambda.Charset.UTF8, // do not escape non-ASCII characters, defaults to Charset.ASCII\n    format: lambda.OutputFormat.ESM, // ECMAScript module output format, defaults to OutputFormat.CJS (OutputFormat.ESM requires Node.js 14.x)\n    mainFields: ['module', 'main'], // prefer ECMAScript versions of dependencies\n    inject: ['./my-shim.js', './other-shim.js'], // allows to automatically replace a global variable with an import from another file\n    esbuildArgs: { // Pass additional arguments to esbuild\n      \"--log-limit\": \"0\",\n      \"--splitting\": true,\n    },\n  },\n});",
        "see": "https://esbuild.github.io/api/#sourcemap",
        "stability": "stable",
        "summary": "SourceMap mode for esbuild."
      },
      "fqn": "@aws-cdk/aws-lambda-nodejs.SourceMapMode",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/types.ts",
        "line": 391
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Default sourceMap mode - will generate a .js.map file alongside any generated .js file and add a special //# sourceMappingURL= comment to the bottom of the .js file pointing to the .js.map file."
          },
          "name": "DEFAULT"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "External sourceMap mode - If you want to omit the special //# sourceMappingURL= comment from the generated .js file but you still want to generate the .js.map files."
          },
          "name": "EXTERNAL"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Inline sourceMap mode - If you want to insert the entire source map into the .js file instead of generating a separate .js.map file."
          },
          "name": "INLINE"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Both sourceMap mode - If you want to have the effect of both inline and external simultaneously."
          },
          "name": "BOTH"
        }
      ],
      "name": "SourceMapMode",
      "symbolId": "lib/types:SourceMapMode"
    }
  },
  "version": "1.159.0",
  "fingerprint": "**********"
}
