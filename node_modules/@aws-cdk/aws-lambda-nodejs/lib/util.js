"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTsconfigCompilerOptions = exports.extractDependencies = exports.tryGetModuleVersionFromPkg = exports.tryGetModuleVersionFromRequire = exports.exec = exports.findUpMultiple = exports.findUp = exports.callsites = void 0;
const child_process_1 = require("child_process");
const fs = require("fs");
const path = require("path");
/**
 * Get callsites from the V8 stack trace API
 *
 * https://github.com/sindresorhus/callsites
 */
function callsites() {
    var _a;
    const _prepareStackTrace = Error.prepareStackTrace;
    Error.prepareStackTrace = (_, stack) => stack;
    const stack = (_a = new Error().stack) === null || _a === void 0 ? void 0 : _a.slice(1);
    Error.prepareStackTrace = _prepareStackTrace;
    return stack;
}
exports.callsites = callsites;
/**
 * Find a file by walking up parent directories
 */
function findUp(name, directory = process.cwd()) {
    return findUpMultiple([name], directory)[0];
}
exports.findUp = findUp;
/**
 * Find the lowest of multiple files by walking up parent directories. If
 * multiple files exist at the same level, they will all be returned.
 */
function findUpMultiple(names, directory = process.cwd()) {
    const absoluteDirectory = path.resolve(directory);
    const files = [];
    for (const name of names) {
        const file = path.join(directory, name);
        if (fs.existsSync(file)) {
            files.push(file);
        }
    }
    if (files.length > 0) {
        return files;
    }
    const { root } = path.parse(absoluteDirectory);
    if (absoluteDirectory === root) {
        return [];
    }
    return findUpMultiple(names, path.dirname(absoluteDirectory));
}
exports.findUpMultiple = findUpMultiple;
/**
 * Spawn sync with error handling
 */
function exec(cmd, args, options) {
    var _a, _b;
    const proc = child_process_1.spawnSync(cmd, args, options);
    if (proc.error) {
        throw proc.error;
    }
    if (proc.status !== 0) {
        if (proc.stdout || proc.stderr) {
            throw new Error(`[Status ${proc.status}] stdout: ${(_a = proc.stdout) === null || _a === void 0 ? void 0 : _a.toString().trim()}\n\n\nstderr: ${(_b = proc.stderr) === null || _b === void 0 ? void 0 : _b.toString().trim()}`);
        }
        throw new Error(`${cmd} ${args.join(' ')} ${(options === null || options === void 0 ? void 0 : options.cwd) ? `run in directory ${options.cwd}` : ''} exited with status ${proc.status}`);
    }
    return proc;
}
exports.exec = exec;
/**
 * Returns a module version by requiring its package.json file
 */
function tryGetModuleVersionFromRequire(mod) {
    try {
        // eslint-disable-next-line @typescript-eslint/no-require-imports
        return require(`${mod}/package.json`).version;
    }
    catch (err) {
        return undefined;
    }
}
exports.tryGetModuleVersionFromRequire = tryGetModuleVersionFromRequire;
/**
 * Gets module version from package.json content
 */
function tryGetModuleVersionFromPkg(mod, pkgJson, pkgPath) {
    var _a, _b, _c;
    const dependencies = {
        ...(_a = pkgJson.dependencies) !== null && _a !== void 0 ? _a : {},
        ...(_b = pkgJson.devDependencies) !== null && _b !== void 0 ? _b : {},
        ...(_c = pkgJson.peerDependencies) !== null && _c !== void 0 ? _c : {},
    };
    if (!dependencies[mod]) {
        return undefined;
    }
    // If it's a "file:" version, make it absolute
    const fileMatch = dependencies[mod].match(/file:(.+)/);
    if (fileMatch && !path.isAbsolute(fileMatch[1])) {
        const absoluteFilePath = path.join(path.dirname(pkgPath), fileMatch[1]);
        return `file:${absoluteFilePath}`;
    }
    ;
    return dependencies[mod];
}
exports.tryGetModuleVersionFromPkg = tryGetModuleVersionFromPkg;
/**
 * Extract versions for a list of modules.
 *
 * First lookup the version in the package.json and then fallback to requiring
 * the module's package.json. The fallback is needed for transitive dependencies.
 */
function extractDependencies(pkgPath, modules) {
    var _a;
    const dependencies = {};
    // Use require for cache
    const pkgJson = require(pkgPath); // eslint-disable-line @typescript-eslint/no-require-imports
    for (const mod of modules) {
        const version = (_a = tryGetModuleVersionFromPkg(mod, pkgJson, pkgPath)) !== null && _a !== void 0 ? _a : tryGetModuleVersionFromRequire(mod);
        if (!version) {
            throw new Error(`Cannot extract version for module '${mod}'. Check that it's referenced in your package.json or installed.`);
        }
        dependencies[mod] = version;
    }
    return dependencies;
}
exports.extractDependencies = extractDependencies;
function getTsconfigCompilerOptions(tsconfigPath) {
    const compilerOptions = extractTsConfig(tsconfigPath);
    const excludedCompilerOptions = [
        'composite',
        'tsBuildInfoFile',
    ];
    const options = {
        ...compilerOptions,
        // Overrides
        incremental: false,
        // Intentionally Setting rootDir and outDir, so that the compiled js file always end up next to .ts file.
        rootDir: './',
        outDir: './',
    };
    let compilerOptionsString = '';
    Object.keys(options).forEach((key) => {
        if (excludedCompilerOptions.includes(key)) {
            return;
        }
        const value = options[key];
        const option = '--' + key;
        const type = typeof value;
        if (type === 'boolean') {
            if (value) {
                compilerOptionsString += option + ' ';
            }
        }
        else if (type === 'string') {
            compilerOptionsString += option + ' ' + value + ' ';
        }
        else if (type === 'object') {
            if (Array.isArray(value)) {
                compilerOptionsString += option + ' ' + value.join(',') + ' ';
            }
        }
        else {
            throw new Error(`Missing support for compilerOption: [${key}]: { ${type}, ${value}} \n`);
        }
    });
    return compilerOptionsString.trim();
}
exports.getTsconfigCompilerOptions = getTsconfigCompilerOptions;
function extractTsConfig(tsconfigPath, previousCompilerOptions) {
    // eslint-disable-next-line @typescript-eslint/no-require-imports
    const { extends: extendedConfig, compilerOptions } = require(tsconfigPath);
    const updatedCompilerOptions = {
        ...(previousCompilerOptions !== null && previousCompilerOptions !== void 0 ? previousCompilerOptions : {}),
        ...compilerOptions,
    };
    if (extendedConfig) {
        return extractTsConfig(path.resolve(tsconfigPath.replace(/[^\/]+$/, ''), extendedConfig), updatedCompilerOptions);
    }
    return updatedCompilerOptions;
}
//# sourceMappingURL=data:application/json;base64,