{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "@aws-cdk/aws-ec2": "1.159.0",
    "@aws-cdk/aws-elasticloadbalancingv2": "1.159.0",
    "@aws-cdk/aws-route53": "1.159.0",
    "@aws-cdk/core": "1.159.0",
    "constructs": "^3.3.69"
  },
  "dependencyClosure": {
    "@aws-cdk/assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.Assets",
          "packageId": "Amazon.CDK.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.assets"
        },
        "js": {
          "npm": "@aws-cdk/assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.assets",
          "module": "aws_cdk.assets"
        }
      }
    },
    "@aws-cdk/aws-acmpca": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ACMPCA",
          "packageId": "Amazon.CDK.AWS.ACMPCA"
        },
        "java": {
          "maven": {
            "artifactId": "acmpca",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.acmpca"
        },
        "js": {
          "npm": "@aws-cdk/aws-acmpca"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-acmpca",
          "module": "aws_cdk.aws_acmpca"
        }
      }
    },
    "@aws-cdk/aws-applicationautoscaling": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ApplicationAutoScaling",
          "packageId": "Amazon.CDK.AWS.ApplicationAutoScaling"
        },
        "java": {
          "maven": {
            "artifactId": "applicationautoscaling",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.applicationautoscaling"
        },
        "js": {
          "npm": "@aws-cdk/aws-applicationautoscaling"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-applicationautoscaling",
          "module": "aws_cdk.aws_applicationautoscaling"
        }
      }
    },
    "@aws-cdk/aws-autoscaling-common": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.AutoScaling.Common",
          "packageId": "Amazon.CDK.AWS.AutoScaling.Common"
        },
        "java": {
          "maven": {
            "artifactId": "autoscaling-common",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.autoscaling.common"
        },
        "js": {
          "npm": "@aws-cdk/aws-autoscaling-common"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-autoscaling-common",
          "module": "aws_cdk.aws_autoscaling_common"
        }
      }
    },
    "@aws-cdk/aws-certificatemanager": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CertificateManager",
          "packageId": "Amazon.CDK.AWS.CertificateManager"
        },
        "java": {
          "maven": {
            "artifactId": "certificatemanager",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.certificatemanager"
        },
        "js": {
          "npm": "@aws-cdk/aws-certificatemanager"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-certificatemanager",
          "module": "aws_cdk.aws_certificatemanager"
        }
      }
    },
    "@aws-cdk/aws-cloudformation": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudFormation",
          "packageId": "Amazon.CDK.AWS.CloudFormation"
        },
        "java": {
          "maven": {
            "artifactId": "cloudformation",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudformation"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudformation"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudformation",
          "module": "aws_cdk.aws_cloudformation"
        }
      }
    },
    "@aws-cdk/aws-cloudwatch": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudWatch",
          "packageId": "Amazon.CDK.AWS.CloudWatch"
        },
        "java": {
          "maven": {
            "artifactId": "cloudwatch",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudwatch"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudwatch"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudwatch",
          "module": "aws_cdk.aws_cloudwatch"
        }
      }
    },
    "@aws-cdk/aws-codeguruprofiler": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeGuruProfiler",
          "packageId": "Amazon.CDK.AWS.CodeGuruProfiler"
        },
        "java": {
          "maven": {
            "artifactId": "codeguruprofiler",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codeguruprofiler"
        },
        "js": {
          "npm": "@aws-cdk/aws-codeguruprofiler"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codeguruprofiler",
          "module": "aws_cdk.aws_codeguruprofiler"
        }
      }
    },
    "@aws-cdk/aws-codestarnotifications": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeStarNotifications",
          "packageId": "Amazon.CDK.AWS.CodeStarNotifications"
        },
        "java": {
          "maven": {
            "artifactId": "codestarnotifications",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codestarnotifications"
        },
        "js": {
          "npm": "@aws-cdk/aws-codestarnotifications"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codestarnotifications",
          "module": "aws_cdk.aws_codestarnotifications"
        }
      }
    },
    "@aws-cdk/aws-ec2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EC2",
          "packageId": "Amazon.CDK.AWS.EC2"
        },
        "java": {
          "maven": {
            "artifactId": "ec2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ec2"
        },
        "js": {
          "npm": "@aws-cdk/aws-ec2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ec2",
          "module": "aws_cdk.aws_ec2"
        }
      }
    },
    "@aws-cdk/aws-ecr": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ECR",
          "packageId": "Amazon.CDK.AWS.ECR"
        },
        "java": {
          "maven": {
            "artifactId": "ecr",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr",
          "module": "aws_cdk.aws_ecr"
        }
      }
    },
    "@aws-cdk/aws-ecr-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Ecr.Assets",
          "packageId": "Amazon.CDK.ECR.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "ecr-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr-assets",
          "module": "aws_cdk.aws_ecr_assets"
        }
      }
    },
    "@aws-cdk/aws-efs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EFS",
          "packageId": "Amazon.CDK.AWS.EFS"
        },
        "java": {
          "maven": {
            "artifactId": "efs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.efs"
        },
        "js": {
          "npm": "@aws-cdk/aws-efs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-efs",
          "module": "aws_cdk.aws_efs"
        }
      }
    },
    "@aws-cdk/aws-elasticloadbalancingv2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ElasticLoadBalancingV2",
          "packageId": "Amazon.CDK.AWS.ElasticLoadBalancingV2"
        },
        "java": {
          "maven": {
            "artifactId": "elasticloadbalancingv2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.elasticloadbalancingv2"
        },
        "js": {
          "npm": "@aws-cdk/aws-elasticloadbalancingv2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-elasticloadbalancingv2",
          "module": "aws_cdk.aws_elasticloadbalancingv2"
        }
      }
    },
    "@aws-cdk/aws-events": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Events",
          "packageId": "Amazon.CDK.AWS.Events"
        },
        "java": {
          "maven": {
            "artifactId": "events",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.events"
        },
        "js": {
          "npm": "@aws-cdk/aws-events"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-events",
          "module": "aws_cdk.aws_events"
        }
      }
    },
    "@aws-cdk/aws-iam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.IAM",
          "packageId": "Amazon.CDK.AWS.IAM"
        },
        "java": {
          "maven": {
            "artifactId": "iam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.iam"
        },
        "js": {
          "npm": "@aws-cdk/aws-iam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-iam",
          "module": "aws_cdk.aws_iam"
        }
      }
    },
    "@aws-cdk/aws-kms": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.KMS",
          "packageId": "Amazon.CDK.AWS.KMS"
        },
        "java": {
          "maven": {
            "artifactId": "kms",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kms"
        },
        "js": {
          "npm": "@aws-cdk/aws-kms"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kms",
          "module": "aws_cdk.aws_kms"
        }
      }
    },
    "@aws-cdk/aws-lambda": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Lambda",
          "packageId": "Amazon.CDK.AWS.Lambda"
        },
        "java": {
          "maven": {
            "artifactId": "lambda",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.lambda"
        },
        "js": {
          "npm": "@aws-cdk/aws-lambda"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-lambda",
          "module": "aws_cdk.aws_lambda"
        }
      }
    },
    "@aws-cdk/aws-logs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Logs",
          "packageId": "Amazon.CDK.AWS.Logs"
        },
        "java": {
          "maven": {
            "artifactId": "logs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.logs"
        },
        "js": {
          "npm": "@aws-cdk/aws-logs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-logs",
          "module": "aws_cdk.aws_logs"
        }
      }
    },
    "@aws-cdk/aws-route53": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Route53",
          "packageId": "Amazon.CDK.AWS.Route53"
        },
        "java": {
          "maven": {
            "artifactId": "route53",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.route53"
        },
        "js": {
          "npm": "@aws-cdk/aws-route53"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-route53",
          "module": "aws_cdk.aws_route53"
        }
      }
    },
    "@aws-cdk/aws-s3": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3",
          "packageId": "Amazon.CDK.AWS.S3"
        },
        "java": {
          "maven": {
            "artifactId": "s3",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3",
          "module": "aws_cdk.aws_s3"
        }
      }
    },
    "@aws-cdk/aws-s3-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3.Assets",
          "packageId": "Amazon.CDK.AWS.S3.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "s3-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3-assets",
          "module": "aws_cdk.aws_s3_assets"
        }
      }
    },
    "@aws-cdk/aws-signer": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Signer",
          "packageId": "Amazon.CDK.AWS.Signer"
        },
        "java": {
          "maven": {
            "artifactId": "signer",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.signer"
        },
        "js": {
          "npm": "@aws-cdk/aws-signer"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-signer",
          "module": "aws_cdk.aws_signer"
        }
      }
    },
    "@aws-cdk/aws-sns": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SNS",
          "packageId": "Amazon.CDK.AWS.SNS"
        },
        "java": {
          "maven": {
            "artifactId": "sns",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sns"
        },
        "js": {
          "npm": "@aws-cdk/aws-sns"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sns",
          "module": "aws_cdk.aws_sns"
        }
      }
    },
    "@aws-cdk/aws-sqs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SQS",
          "packageId": "Amazon.CDK.AWS.SQS"
        },
        "java": {
          "maven": {
            "artifactId": "sqs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sqs"
        },
        "js": {
          "npm": "@aws-cdk/aws-sqs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sqs",
          "module": "aws_cdk.aws_sqs"
        }
      }
    },
    "@aws-cdk/aws-ssm": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SSM",
          "packageId": "Amazon.CDK.AWS.SSM"
        },
        "java": {
          "maven": {
            "artifactId": "ssm",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ssm"
        },
        "js": {
          "npm": "@aws-cdk/aws-ssm"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ssm",
          "module": "aws_cdk.aws_ssm"
        }
      }
    },
    "@aws-cdk/cloud-assembly-schema": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CloudAssembly.Schema",
          "packageId": "Amazon.CDK.CloudAssembly.Schema"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cloud-assembly-schema",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cloudassembly.schema"
        },
        "js": {
          "npm": "@aws-cdk/cloud-assembly-schema"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cloud-assembly-schema",
          "module": "aws_cdk.cloud_assembly_schema"
        }
      }
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      }
    },
    "@aws-cdk/custom-resources": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CustomResources",
          "packageId": "Amazon.CDK.AWS.CustomResources"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-customresources",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.customresources"
        },
        "js": {
          "npm": "@aws-cdk/custom-resources"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.custom-resources",
          "module": "aws_cdk.custom_resources"
        }
      }
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      }
    },
    "@aws-cdk/region-info": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "The CDK Construct Library for AWS::ServiceDiscovery",
  "docs": {
    "stability": "stable"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "1.58.0 (build f8ba112)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "servicediscovery"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "compiledWithDeprecationWarnings": true,
      "pacmak": {
        "hasDefaultInterfaces": true
      },
      "rosetta": {
        "strict": true
      }
    }
  },
  "name": "@aws-cdk/aws-servicediscovery",
  "readme": {
    "markdown": "# Amazon ECS Service Discovery Construct Library\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cfn-resources: Stable](https://img.shields.io/badge/cfn--resources-stable-success.svg?style=for-the-badge)\n\n![cdk-constructs: Stable](https://img.shields.io/badge/cdk--constructs-stable-success.svg?style=for-the-badge)\n\n---\n\n<!--END STABILITY BANNER-->\n\nThis module is part of the [AWS Cloud Development Kit](https://github.com/aws/aws-cdk) project.\n\nThis package contains constructs for working with **AWS Cloud Map**\n\nAWS Cloud Map is a fully managed service that you can use to create and\nmaintain a map of the backend services and resources that your applications\ndepend on.\n\nFor further information on AWS Cloud Map,\nsee the [AWS Cloud Map documentation](https://docs.aws.amazon.com/cloud-map)\n\n## HTTP Namespace Example\n\nThe following example creates an AWS Cloud Map namespace that\nsupports API calls, creates a service in that namespace, and\nregisters an instance to it:\n\n```ts lit=test/integ.service-with-http-namespace.lit.ts\nimport * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();\n\n```\n\n## Private DNS Namespace Example\n\nThe following example creates an AWS Cloud Map namespace that\nsupports both API calls and DNS queries within a vpc, creates a\nservice in that namespace, and registers a loadbalancer as an\ninstance:\n\n```ts lit=test/integ.service-with-private-dns-namespace.lit.ts\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst vpc = new ec2.Vpc(stack, 'Vpc', { maxAzs: 2 });\n\nconst namespace = new servicediscovery.PrivateDnsNamespace(stack, 'Namespace', {\n  name: 'boobar.com',\n  vpc,\n});\n\nconst service = namespace.createService('Service', {\n  dnsRecordType: servicediscovery.DnsRecordType.A_AAAA,\n  dnsTtl: cdk.Duration.seconds(30),\n  loadBalancer: true,\n});\n\nconst loadbalancer = new elbv2.ApplicationLoadBalancer(stack, 'LB', { vpc, internetFacing: true });\n\nservice.registerLoadBalancer('Loadbalancer', loadbalancer);\n\napp.synth();\n\n```\n\n## Public DNS Namespace Example\n\nThe following example creates an AWS Cloud Map namespace that\nsupports both API calls and public DNS queries, creates a service in\nthat namespace, and registers an IP instance:\n\n```ts lit=test/integ.service-with-public-dns-namespace.lit.ts\nimport * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();\n\n```\n\nFor DNS namespaces, you can also register instances to services with CNAME records:\n\n```ts lit=test/integ.service-with-cname-record.lit.ts\nimport * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.CNAME,\n  dnsTtl: cdk.Duration.seconds(30),\n});\n\nservice.registerCnameInstance('CnameInstance', {\n  instanceCname: 'service.pizza',\n});\n\napp.synth();\n\n```\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/aws-servicediscovery",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.AWS.ServiceDiscovery",
      "packageId": "Amazon.CDK.AWS.ServiceDiscovery"
    },
    "java": {
      "maven": {
        "artifactId": "servicediscovery",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.servicediscovery"
    },
    "js": {
      "npm": "@aws-cdk/aws-servicediscovery"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 1"
      ],
      "distName": "aws-cdk.aws-servicediscovery",
      "module": "aws_cdk.aws_servicediscovery"
    }
  },
  "types": {
    "@aws-cdk/aws-servicediscovery.AliasTargetInstance": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "base": "@aws-cdk/aws-servicediscovery.InstanceBase",
      "docs": {
        "custom": {
          "resource": "AWS::ServiceDiscovery::Instance",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Currently, the only resource types supported are Elastic Load\nBalancers.",
        "stability": "stable",
        "summary": "Instance that uses Route 53 Alias record type.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\nconst aliasTargetInstance = new servicediscovery.AliasTargetInstance(this, 'MyAliasTargetInstance', {\n  dnsName: 'dnsName',\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n});"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.AliasTargetInstance",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/alias-target-instance.ts",
          "line": 45
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.AliasTargetInstanceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/alias-target-instance.ts",
        "line": 29
      },
      "name": "AliasTargetInstance",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The Route53 DNS name of the alias target."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alias-target-instance.ts",
            "line": 43
          },
          "name": "dnsName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Id of the instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alias-target-instance.ts",
            "line": 33
          },
          "name": "instanceId",
          "overrides": "@aws-cdk/aws-servicediscovery.InstanceBase",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Cloudmap service to which the instance is registered."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alias-target-instance.ts",
            "line": 38
          },
          "name": "service",
          "overrides": "@aws-cdk/aws-servicediscovery.InstanceBase",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.IService"
          }
        }
      ],
      "symbolId": "lib/alias-target-instance:AliasTargetInstance"
    },
    "@aws-cdk/aws-servicediscovery.AliasTargetInstanceProps": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\nconst aliasTargetInstanceProps: servicediscovery.AliasTargetInstanceProps = {\n  dnsName: 'dnsName',\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-servicediscovery.AliasTargetInstanceProps",
      "interfaces": [
        "@aws-cdk/aws-servicediscovery.BaseInstanceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/alias-target-instance.ts",
        "line": 11
      },
      "name": "AliasTargetInstanceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "DNS name of the target."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alias-target-instance.ts",
            "line": 15
          },
          "name": "dnsName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The Cloudmap service this resource is registered to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/alias-target-instance.ts",
            "line": 20
          },
          "name": "service",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.IService"
          }
        }
      ],
      "symbolId": "lib/alias-target-instance:AliasTargetInstanceProps"
    },
    "@aws-cdk/aws-servicediscovery.BaseInstanceProps": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Used when the resource that's associated with the service instance is accessible using values other than an IP address or a domain name (CNAME), i.e. for non-ip-instances.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst baseInstanceProps: servicediscovery.BaseInstanceProps = {\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-servicediscovery.BaseInstanceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/instance.ts",
        "line": 21
      },
      "name": "BaseInstanceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "stability": "stable",
            "summary": "Custom attributes of the instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 34
          },
          "name": "customAttributes",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Automatically generated name",
            "stability": "stable",
            "summary": "The id of the instance resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 27
          },
          "name": "instanceId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/instance:BaseInstanceProps"
    },
    "@aws-cdk/aws-servicediscovery.BaseNamespaceProps": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst baseNamespaceProps: servicediscovery.BaseNamespaceProps = {\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-servicediscovery.BaseNamespaceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/namespace.ts",
        "line": 28
      },
      "name": "BaseNamespaceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "A name for the Namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/namespace.ts",
            "line": 32
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "stability": "stable",
            "summary": "A description of the Namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/namespace.ts",
            "line": 39
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/namespace:BaseNamespaceProps"
    },
    "@aws-cdk/aws-servicediscovery.BaseServiceProps": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "lit=test/integ.service-with-http-namespace.lit.ts infused"
        },
        "example": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();",
        "remarks": "Used by HttpNamespace.createService",
        "stability": "stable",
        "summary": "Basic props needed to create a service in a given namespace."
      },
      "fqn": "@aws-cdk/aws-servicediscovery.BaseServiceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 50
      },
      "name": "BaseServiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "remarks": "Only one of healthCheckConfig or healthCheckCustomConfig can be specified.\nSee: https://docs.aws.amazon.com/cloud-map/latest/api/API_HealthCheckCustomConfig.html",
            "stability": "stable",
            "summary": "Structure containing failure threshold for a custom health checker."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 82
          },
          "name": "customHealthCheck",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.HealthCheckCustomConfig"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "stability": "stable",
            "summary": "A description of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 63
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "remarks": "If you specify health check settings, AWS Cloud Map associates the health\ncheck with the records that you specify in DnsConfig. Only one of healthCheckConfig or healthCheckCustomConfig can\nbe specified. Not valid for PrivateDnsNamespaces. If you use healthCheck, you can only register IP instances to\nthis service.",
            "stability": "stable",
            "summary": "Settings for an optional health check."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 73
          },
          "name": "healthCheck",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.HealthCheckConfig"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "CloudFormation-generated name",
            "stability": "stable",
            "summary": "A name for the Service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 56
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:BaseServiceProps"
    },
    "@aws-cdk/aws-servicediscovery.CfnHttpNamespace": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::ServiceDiscovery::HttpNamespace",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-httpnamespace.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "The `HttpNamespace` resource is an AWS Cloud Map resource type that contains information about an HTTP namespace. Service instances that you register using an HTTP namespace can be discovered using a `DiscoverInstances` request but can't be discovered using DNS.\n\nFor the current quota on the number of namespaces that you can create using the same AWS account, see [AWS Cloud Map quotas](https://docs.aws.amazon.com/cloud-map/latest/dg/cloud-map-limits.html) in the ** .",
        "stability": "external",
        "summary": "A CloudFormation `AWS::ServiceDiscovery::HttpNamespace`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst cfnHttpNamespace = new servicediscovery.CfnHttpNamespace(this, 'MyCfnHttpNamespace', {\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.CfnHttpNamespace",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::ServiceDiscovery::HttpNamespace`."
        },
        "locationInModule": {
          "filename": "lib/servicediscovery.generated.ts",
          "line": 172
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.CfnHttpNamespaceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/servicediscovery.generated.ts",
        "line": 107
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 189
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 202
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnHttpNamespace",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 111
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Arn"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the namespace, such as `arn:aws:service-discovery:us-east-1:123456789012:http-namespace/http-namespace-a1bzhi` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 136
          },
          "name": "attrArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Id"
            },
            "stability": "external",
            "summary": "The ID of the namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 142
          },
          "name": "attrId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 194
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-httpnamespace.html#cfn-servicediscovery-httpnamespace-tags"
            },
            "remarks": "Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
            "stability": "external",
            "summary": "The tags for the namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 163
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-httpnamespace.html#cfn-servicediscovery-httpnamespace-name"
            },
            "stability": "external",
            "summary": "The name that you want to assign to this namespace."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 149
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-httpnamespace.html#cfn-servicediscovery-httpnamespace-description"
            },
            "stability": "external",
            "summary": "A description for the namespace."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 156
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/servicediscovery.generated:CfnHttpNamespace"
    },
    "@aws-cdk/aws-servicediscovery.CfnHttpNamespaceProps": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-httpnamespace.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnHttpNamespace`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst cfnHttpNamespaceProps: servicediscovery.CfnHttpNamespaceProps = {\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.CfnHttpNamespaceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/servicediscovery.generated.ts",
        "line": 19
      },
      "name": "CfnHttpNamespaceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-httpnamespace.html#cfn-servicediscovery-httpnamespace-name"
            },
            "stability": "external",
            "summary": "The name that you want to assign to this namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 26
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-httpnamespace.html#cfn-servicediscovery-httpnamespace-description"
            },
            "stability": "external",
            "summary": "A description for the namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 33
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-httpnamespace.html#cfn-servicediscovery-httpnamespace-tags"
            },
            "remarks": "Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
            "stability": "external",
            "summary": "The tags for the namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 40
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/core.CfnTag"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/servicediscovery.generated:CfnHttpNamespaceProps"
    },
    "@aws-cdk/aws-servicediscovery.CfnInstance": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::ServiceDiscovery::Instance",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-instance.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "A complex type that contains information about an instance that AWS Cloud Map creates when you submit a `RegisterInstance` request.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::ServiceDiscovery::Instance`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const instanceAttributes: any;\nconst cfnInstance = new servicediscovery.CfnInstance(this, 'MyCfnInstance', {\n  instanceAttributes: instanceAttributes,\n  serviceId: 'serviceId',\n\n  // the properties below are optional\n  instanceId: 'instanceId',\n});"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.CfnInstance",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::ServiceDiscovery::Instance`."
        },
        "locationInModule": {
          "filename": "lib/servicediscovery.generated.ts",
          "line": 431
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.CfnInstanceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/servicediscovery.generated.ts",
        "line": 340
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 447
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 460
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnInstance",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 344
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 452
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-instance.html#cfn-servicediscovery-instance-instanceattributes"
            },
            "remarks": "- The attributes that apply to the records that are defined in the service.\n- For each attribute, the applicable value.\n\nSupported attribute keys include the following:\n\n- **AWS_ALIAS_DNS_NAME** - If you want AWS Cloud Map to create a Route 53 alias record that routes traffic to an Elastic Load Balancing load balancer, specify the DNS name that is associated with the load balancer. For information about how to get the DNS name, see [AliasTarget->DNSName](https://docs.aws.amazon.com/Route53/latest/APIReference/API_AliasTarget.html#Route53-Type-AliasTarget-DNSName) in the *Route 53 API Reference* .\n\nNote the following:\n\n- The configuration for the service that is specified by `ServiceId` must include settings for an `A` record, an `AAAA` record, or both.\n- In the service that is specified by `ServiceId` , the value of `RoutingPolicy` must be `WEIGHTED` .\n- If the service that is specified by `ServiceId` includes `HealthCheckConfig` settings, AWS Cloud Map will create the health check, but it won't associate the health check with the alias record.\n- Auto naming currently doesn't support creating alias records that route traffic to AWS resources other than ELB load balancers.\n- If you specify a value for `AWS_ALIAS_DNS_NAME` , don't specify values for any of the `AWS_INSTANCE` attributes.\n- **AWS_EC2_INSTANCE_ID** - *HTTP namespaces only.* The Amazon EC2 instance ID for the instance. The `AWS_INSTANCE_IPV4` attribute contains the primary private IPv4 address. When creating resources with a type of [AWS::ServiceDiscovery::Instance](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-instance.html) , if the `AWS_EC2_INSTANCE_ID` attribute is specified, the only other attribute that can be specified is `AWS_INIT_HEALTH_STATUS` . After the resource has been created, the `AWS_INSTANCE_IPV4` attribute contains the primary private IPv4 address.\n- **AWS_INIT_HEALTH_STATUS** - If the service configuration includes `HealthCheckCustomConfig` , when creating resources with a type of [AWS::ServiceDiscovery::Instance](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-instance.html) you can optionally use `AWS_INIT_HEALTH_STATUS` to specify the initial status of the custom health check, `HEALTHY` or `UNHEALTHY` . If you don't specify a value for `AWS_INIT_HEALTH_STATUS` , the initial status is `HEALTHY` . This attribute can only be used when creating resources and will not be seen on existing resources.\n- **AWS_INSTANCE_CNAME** - If the service configuration includes a `CNAME` record, the domain name that you want Route 53 to return in response to DNS queries, for example, `example.com` .\n\nThis value is required if the service specified by `ServiceId` includes settings for an `CNAME` record.\n- **AWS_INSTANCE_IPV4** - If the service configuration includes an `A` record, the IPv4 address that you want Route 53 to return in response to DNS queries, for example, `192.0.2.44` .\n\nThis value is required if the service specified by `ServiceId` includes settings for an `A` record. If the service includes settings for an `SRV` record, you must specify a value for `AWS_INSTANCE_IPV4` , `AWS_INSTANCE_IPV6` , or both.\n- **AWS_INSTANCE_IPV6** - If the service configuration includes an `AAAA` record, the IPv6 address that you want Route 53 to return in response to DNS queries, for example, `2001:0db8:85a3:0000:0000:abcd:0001:2345` .\n\nThis value is required if the service specified by `ServiceId` includes settings for an `AAAA` record. If the service includes settings for an `SRV` record, you must specify a value for `AWS_INSTANCE_IPV4` , `AWS_INSTANCE_IPV6` , or both.\n- **AWS_INSTANCE_PORT** - If the service includes an `SRV` record, the value that you want Route 53 to return for the port.\n\nIf the service includes `HealthCheckConfig` , the port on the endpoint that you want Route 53 to send requests to.\n\nThis value is required if you specified settings for an `SRV` record or a Route 53 health check when you created the service.",
            "stability": "external",
            "summary": "A string map that contains the following information for the service that you specify in `ServiceId` :."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 401
          },
          "name": "instanceAttributes",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-instance.html#cfn-servicediscovery-instance-serviceid"
            },
            "stability": "external",
            "summary": "The ID of the service that you want to use for settings for the instance."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 408
          },
          "name": "serviceId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-instance.html#cfn-servicediscovery-instance-instanceid"
            },
            "remarks": "- If the service that's specified by `ServiceId` includes settings for an `SRV` record, the value of `InstanceId` is automatically included as part of the value for the `SRV` record. For more information, see [DnsRecord > Type](https://docs.aws.amazon.com/cloud-map/latest/api/API_DnsRecord.html#cloudmap-Type-DnsRecord-Type) .\n- You can use this value to update an existing instance.\n- To register a new instance, you must specify a value that's unique among instances that you register by using the same service.\n- If you specify an existing `InstanceId` and `ServiceId` , AWS Cloud Map updates the existing DNS records, if any. If there's also an existing health check, AWS Cloud Map deletes the old health check and creates a new one.\n\n> The health check isn't deleted immediately, so it will still appear for a while if you submit a `ListHealthChecks` request, for example.",
            "stability": "external",
            "summary": "An identifier that you want to associate with the instance. Note the following:."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 422
          },
          "name": "instanceId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/servicediscovery.generated:CfnInstance"
    },
    "@aws-cdk/aws-servicediscovery.CfnInstanceProps": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-instance.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnInstance`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const instanceAttributes: any;\nconst cfnInstanceProps: servicediscovery.CfnInstanceProps = {\n  instanceAttributes: instanceAttributes,\n  serviceId: 'serviceId',\n\n  // the properties below are optional\n  instanceId: 'instanceId',\n};"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.CfnInstanceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/servicediscovery.generated.ts",
        "line": 215
      },
      "name": "CfnInstanceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-instance.html#cfn-servicediscovery-instance-instanceattributes"
            },
            "remarks": "- The attributes that apply to the records that are defined in the service.\n- For each attribute, the applicable value.\n\nSupported attribute keys include the following:\n\n- **AWS_ALIAS_DNS_NAME** - If you want AWS Cloud Map to create a Route 53 alias record that routes traffic to an Elastic Load Balancing load balancer, specify the DNS name that is associated with the load balancer. For information about how to get the DNS name, see [AliasTarget->DNSName](https://docs.aws.amazon.com/Route53/latest/APIReference/API_AliasTarget.html#Route53-Type-AliasTarget-DNSName) in the *Route 53 API Reference* .\n\nNote the following:\n\n- The configuration for the service that is specified by `ServiceId` must include settings for an `A` record, an `AAAA` record, or both.\n- In the service that is specified by `ServiceId` , the value of `RoutingPolicy` must be `WEIGHTED` .\n- If the service that is specified by `ServiceId` includes `HealthCheckConfig` settings, AWS Cloud Map will create the health check, but it won't associate the health check with the alias record.\n- Auto naming currently doesn't support creating alias records that route traffic to AWS resources other than ELB load balancers.\n- If you specify a value for `AWS_ALIAS_DNS_NAME` , don't specify values for any of the `AWS_INSTANCE` attributes.\n- **AWS_EC2_INSTANCE_ID** - *HTTP namespaces only.* The Amazon EC2 instance ID for the instance. The `AWS_INSTANCE_IPV4` attribute contains the primary private IPv4 address. When creating resources with a type of [AWS::ServiceDiscovery::Instance](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-instance.html) , if the `AWS_EC2_INSTANCE_ID` attribute is specified, the only other attribute that can be specified is `AWS_INIT_HEALTH_STATUS` . After the resource has been created, the `AWS_INSTANCE_IPV4` attribute contains the primary private IPv4 address.\n- **AWS_INIT_HEALTH_STATUS** - If the service configuration includes `HealthCheckCustomConfig` , when creating resources with a type of [AWS::ServiceDiscovery::Instance](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-instance.html) you can optionally use `AWS_INIT_HEALTH_STATUS` to specify the initial status of the custom health check, `HEALTHY` or `UNHEALTHY` . If you don't specify a value for `AWS_INIT_HEALTH_STATUS` , the initial status is `HEALTHY` . This attribute can only be used when creating resources and will not be seen on existing resources.\n- **AWS_INSTANCE_CNAME** - If the service configuration includes a `CNAME` record, the domain name that you want Route 53 to return in response to DNS queries, for example, `example.com` .\n\nThis value is required if the service specified by `ServiceId` includes settings for an `CNAME` record.\n- **AWS_INSTANCE_IPV4** - If the service configuration includes an `A` record, the IPv4 address that you want Route 53 to return in response to DNS queries, for example, `192.0.2.44` .\n\nThis value is required if the service specified by `ServiceId` includes settings for an `A` record. If the service includes settings for an `SRV` record, you must specify a value for `AWS_INSTANCE_IPV4` , `AWS_INSTANCE_IPV6` , or both.\n- **AWS_INSTANCE_IPV6** - If the service configuration includes an `AAAA` record, the IPv6 address that you want Route 53 to return in response to DNS queries, for example, `2001:0db8:85a3:0000:0000:abcd:0001:2345` .\n\nThis value is required if the service specified by `ServiceId` includes settings for an `AAAA` record. If the service includes settings for an `SRV` record, you must specify a value for `AWS_INSTANCE_IPV4` , `AWS_INSTANCE_IPV6` , or both.\n- **AWS_INSTANCE_PORT** - If the service includes an `SRV` record, the value that you want Route 53 to return for the port.\n\nIf the service includes `HealthCheckConfig` , the port on the endpoint that you want Route 53 to send requests to.\n\nThis value is required if you specified settings for an `SRV` record or a Route 53 health check when you created the service.",
            "stability": "external",
            "summary": "A string map that contains the following information for the service that you specify in `ServiceId` :."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 253
          },
          "name": "instanceAttributes",
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-instance.html#cfn-servicediscovery-instance-serviceid"
            },
            "stability": "external",
            "summary": "The ID of the service that you want to use for settings for the instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 260
          },
          "name": "serviceId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-instance.html#cfn-servicediscovery-instance-instanceid"
            },
            "remarks": "- If the service that's specified by `ServiceId` includes settings for an `SRV` record, the value of `InstanceId` is automatically included as part of the value for the `SRV` record. For more information, see [DnsRecord > Type](https://docs.aws.amazon.com/cloud-map/latest/api/API_DnsRecord.html#cloudmap-Type-DnsRecord-Type) .\n- You can use this value to update an existing instance.\n- To register a new instance, you must specify a value that's unique among instances that you register by using the same service.\n- If you specify an existing `InstanceId` and `ServiceId` , AWS Cloud Map updates the existing DNS records, if any. If there's also an existing health check, AWS Cloud Map deletes the old health check and creates a new one.\n\n> The health check isn't deleted immediately, so it will still appear for a while if you submit a `ListHealthChecks` request, for example.",
            "stability": "external",
            "summary": "An identifier that you want to associate with the instance. Note the following:."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 274
          },
          "name": "instanceId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/servicediscovery.generated:CfnInstanceProps"
    },
    "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespace": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::ServiceDiscovery::PrivateDnsNamespace",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-privatednsnamespace.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Creates a private namespace based on DNS, which is visible only inside a specified Amazon VPC. The namespace defines your service naming scheme. For example, if you name your namespace `example.com` and name your service `backend` , the resulting DNS name for the service is `backend.example.com` . Service instances that are registered using a private DNS namespace can be discovered using either a `DiscoverInstances` request or using DNS. For the current quota on the number of namespaces that you can create using the same AWS account , see [AWS Cloud Map quotas](https://docs.aws.amazon.com/cloud-map/latest/dg/cloud-map-limits.html) in the *AWS Cloud Map Developer Guide* .",
        "stability": "external",
        "summary": "A CloudFormation `AWS::ServiceDiscovery::PrivateDnsNamespace`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst cfnPrivateDnsNamespace = new servicediscovery.CfnPrivateDnsNamespace(this, 'MyCfnPrivateDnsNamespace', {\n  name: 'name',\n  vpc: 'vpc',\n\n  // the properties below are optional\n  description: 'description',\n  properties: {\n    dnsProperties: {\n      soa: {\n        ttl: 123,\n      },\n    },\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespace",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::ServiceDiscovery::PrivateDnsNamespace`."
        },
        "locationInModule": {
          "filename": "lib/servicediscovery.generated.ts",
          "line": 665
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespaceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/servicediscovery.generated.ts",
        "line": 580
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 686
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 701
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnPrivateDnsNamespace",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 584
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Arn"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the private namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 609
          },
          "name": "attrArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "HostedZoneId"
            },
            "stability": "external",
            "summary": "The ID for the Route 53 hosted zone that AWS Cloud Map creates when you create a namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 615
          },
          "name": "attrHostedZoneId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Id"
            },
            "stability": "external",
            "summary": "The ID of the private namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 621
          },
          "name": "attrId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 691
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-privatednsnamespace.html#cfn-servicediscovery-privatednsnamespace-tags"
            },
            "remarks": "Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
            "stability": "external",
            "summary": "The tags for the namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 656
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-privatednsnamespace.html#cfn-servicediscovery-privatednsnamespace-name"
            },
            "remarks": "When you create a private DNS namespace, AWS Cloud Map automatically creates an Amazon Route 53 private hosted zone that has the same name as the namespace.",
            "stability": "external",
            "summary": "The name that you want to assign to this namespace."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 628
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-privatednsnamespace.html#cfn-servicediscovery-privatednsnamespace-vpc"
            },
            "stability": "external",
            "summary": "The ID of the Amazon VPC that you want to associate the namespace with."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 635
          },
          "name": "vpc",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-privatednsnamespace.html#cfn-servicediscovery-privatednsnamespace-description"
            },
            "stability": "external",
            "summary": "A description for the namespace."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 642
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-privatednsnamespace.html#cfn-servicediscovery-privatednsnamespace-properties"
            },
            "stability": "external",
            "summary": "Properties for the private DNS namespace."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 649
          },
          "name": "properties",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespace.PropertiesProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/servicediscovery.generated:CfnPrivateDnsNamespace"
    },
    "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespace.PrivateDnsPropertiesMutableProperty": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-privatednsnamespace-privatednspropertiesmutable.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "DNS properties for the private DNS namespace.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst privateDnsPropertiesMutableProperty: servicediscovery.CfnPrivateDnsNamespace.PrivateDnsPropertiesMutableProperty = {\n  soa: {\n    ttl: 123,\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespace.PrivateDnsPropertiesMutableProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/servicediscovery.generated.ts",
        "line": 715
      },
      "name": "PrivateDnsPropertiesMutableProperty",
      "namespace": "CfnPrivateDnsNamespace",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-privatednsnamespace-privatednspropertiesmutable.html#cfn-servicediscovery-privatednsnamespace-privatednspropertiesmutable-soa"
            },
            "stability": "external",
            "summary": "Fields for the Start of Authority (SOA) record for the hosted zone for the private DNS namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 721
          },
          "name": "soa",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespace.SOAProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/servicediscovery.generated:CfnPrivateDnsNamespace.PrivateDnsPropertiesMutableProperty"
    },
    "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespace.PropertiesProperty": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-privatednsnamespace-properties.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for the private DNS namespace.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst propertiesProperty: servicediscovery.CfnPrivateDnsNamespace.PropertiesProperty = {\n  dnsProperties: {\n    soa: {\n      ttl: 123,\n    },\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespace.PropertiesProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/servicediscovery.generated.ts",
        "line": 782
      },
      "name": "PropertiesProperty",
      "namespace": "CfnPrivateDnsNamespace",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-privatednsnamespace-properties.html#cfn-servicediscovery-privatednsnamespace-properties-dnsproperties"
            },
            "stability": "external",
            "summary": "DNS properties for the private DNS namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 788
          },
          "name": "dnsProperties",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespace.PrivateDnsPropertiesMutableProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/servicediscovery.generated:CfnPrivateDnsNamespace.PropertiesProperty"
    },
    "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespace.SOAProperty": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-privatednsnamespace-soa.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Start of Authority (SOA) properties for a public or private DNS namespace.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst sOAProperty: servicediscovery.CfnPrivateDnsNamespace.SOAProperty = {\n  ttl: 123,\n};"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespace.SOAProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/servicediscovery.generated.ts",
        "line": 849
      },
      "name": "SOAProperty",
      "namespace": "CfnPrivateDnsNamespace",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-privatednsnamespace-soa.html#cfn-servicediscovery-privatednsnamespace-soa-ttl"
            },
            "stability": "external",
            "summary": "The time to live (TTL) for purposes of negative caching."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 855
          },
          "name": "ttl",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/servicediscovery.generated:CfnPrivateDnsNamespace.SOAProperty"
    },
    "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespaceProps": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-privatednsnamespace.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnPrivateDnsNamespace`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst cfnPrivateDnsNamespaceProps: servicediscovery.CfnPrivateDnsNamespaceProps = {\n  name: 'name',\n  vpc: 'vpc',\n\n  // the properties below are optional\n  description: 'description',\n  properties: {\n    dnsProperties: {\n      soa: {\n        ttl: 123,\n      },\n    },\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespaceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/servicediscovery.generated.ts",
        "line": 473
      },
      "name": "CfnPrivateDnsNamespaceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-privatednsnamespace.html#cfn-servicediscovery-privatednsnamespace-name"
            },
            "remarks": "When you create a private DNS namespace, AWS Cloud Map automatically creates an Amazon Route 53 private hosted zone that has the same name as the namespace.",
            "stability": "external",
            "summary": "The name that you want to assign to this namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 480
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-privatednsnamespace.html#cfn-servicediscovery-privatednsnamespace-vpc"
            },
            "stability": "external",
            "summary": "The ID of the Amazon VPC that you want to associate the namespace with."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 487
          },
          "name": "vpc",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-privatednsnamespace.html#cfn-servicediscovery-privatednsnamespace-description"
            },
            "stability": "external",
            "summary": "A description for the namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 494
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-privatednsnamespace.html#cfn-servicediscovery-privatednsnamespace-properties"
            },
            "stability": "external",
            "summary": "Properties for the private DNS namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 501
          },
          "name": "properties",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespace.PropertiesProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-privatednsnamespace.html#cfn-servicediscovery-privatednsnamespace-tags"
            },
            "remarks": "Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
            "stability": "external",
            "summary": "The tags for the namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 508
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/core.CfnTag"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/servicediscovery.generated:CfnPrivateDnsNamespaceProps"
    },
    "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespace": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::ServiceDiscovery::PublicDnsNamespace",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-publicdnsnamespace.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Creates a public namespace based on DNS, which is visible on the internet. The namespace defines your service naming scheme. For example, if you name your namespace `example.com` and name your service `backend` , the resulting DNS name for the service is `backend.example.com` . You can discover instances that were registered with a public DNS namespace by using either a `DiscoverInstances` request or using DNS. For the current quota on the number of namespaces that you can create using the same AWS account , see [AWS Cloud Map quotas](https://docs.aws.amazon.com/cloud-map/latest/dg/cloud-map-limits.html) in the *AWS Cloud Map Developer Guide* .\n\n> The `CreatePublicDnsNamespace` API operation is not supported in the AWS GovCloud (US) Regions.",
        "stability": "external",
        "summary": "A CloudFormation `AWS::ServiceDiscovery::PublicDnsNamespace`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst cfnPublicDnsNamespace = new servicediscovery.CfnPublicDnsNamespace(this, 'MyCfnPublicDnsNamespace', {\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  properties: {\n    dnsProperties: {\n      soa: {\n        ttl: 123,\n      },\n    },\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespace",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::ServiceDiscovery::PublicDnsNamespace`."
        },
        "locationInModule": {
          "filename": "lib/servicediscovery.generated.ts",
          "line": 1091
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespaceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/servicediscovery.generated.ts",
        "line": 1013
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1110
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1124
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnPublicDnsNamespace",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1017
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Arn"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the public namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1042
          },
          "name": "attrArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "HostedZoneId"
            },
            "stability": "external",
            "summary": "The ID for the Route 53 hosted zone that AWS Cloud Map creates when you create a namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1048
          },
          "name": "attrHostedZoneId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Id"
            },
            "stability": "external",
            "summary": "The ID of the public namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1054
          },
          "name": "attrId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1115
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-publicdnsnamespace.html#cfn-servicediscovery-publicdnsnamespace-tags"
            },
            "remarks": "Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
            "stability": "external",
            "summary": "The tags for the namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1082
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-publicdnsnamespace.html#cfn-servicediscovery-publicdnsnamespace-name"
            },
            "stability": "external",
            "summary": "The name that you want to assign to this namespace."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1061
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-publicdnsnamespace.html#cfn-servicediscovery-publicdnsnamespace-description"
            },
            "stability": "external",
            "summary": "A description for the namespace."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1068
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-publicdnsnamespace.html#cfn-servicediscovery-publicdnsnamespace-properties"
            },
            "stability": "external",
            "summary": "Properties for the public DNS namespace."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1075
          },
          "name": "properties",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespace.PropertiesProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/servicediscovery.generated:CfnPublicDnsNamespace"
    },
    "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespace.PropertiesProperty": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-publicdnsnamespace-properties.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for the public DNS namespace.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst propertiesProperty: servicediscovery.CfnPublicDnsNamespace.PropertiesProperty = {\n  dnsProperties: {\n    soa: {\n      ttl: 123,\n    },\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespace.PropertiesProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/servicediscovery.generated.ts",
        "line": 1138
      },
      "name": "PropertiesProperty",
      "namespace": "CfnPublicDnsNamespace",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-publicdnsnamespace-properties.html#cfn-servicediscovery-publicdnsnamespace-properties-dnsproperties"
            },
            "stability": "external",
            "summary": "DNS properties for the public DNS namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1144
          },
          "name": "dnsProperties",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespace.PublicDnsPropertiesMutableProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/servicediscovery.generated:CfnPublicDnsNamespace.PropertiesProperty"
    },
    "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespace.PublicDnsPropertiesMutableProperty": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-publicdnsnamespace-publicdnspropertiesmutable.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "DNS properties for the public DNS namespace.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst publicDnsPropertiesMutableProperty: servicediscovery.CfnPublicDnsNamespace.PublicDnsPropertiesMutableProperty = {\n  soa: {\n    ttl: 123,\n  },\n};"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespace.PublicDnsPropertiesMutableProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/servicediscovery.generated.ts",
        "line": 1205
      },
      "name": "PublicDnsPropertiesMutableProperty",
      "namespace": "CfnPublicDnsNamespace",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-publicdnsnamespace-publicdnspropertiesmutable.html#cfn-servicediscovery-publicdnsnamespace-publicdnspropertiesmutable-soa"
            },
            "stability": "external",
            "summary": "Start of Authority (SOA) record for the hosted zone for the public DNS namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1211
          },
          "name": "soa",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespace.SOAProperty"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/servicediscovery.generated:CfnPublicDnsNamespace.PublicDnsPropertiesMutableProperty"
    },
    "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespace.SOAProperty": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-publicdnsnamespace-soa.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Start of Authority (SOA) properties for a public or private DNS namespace.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst sOAProperty: servicediscovery.CfnPublicDnsNamespace.SOAProperty = {\n  ttl: 123,\n};"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespace.SOAProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/servicediscovery.generated.ts",
        "line": 1272
      },
      "name": "SOAProperty",
      "namespace": "CfnPublicDnsNamespace",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-publicdnsnamespace-soa.html#cfn-servicediscovery-publicdnsnamespace-soa-ttl"
            },
            "stability": "external",
            "summary": "The time to live (TTL) for purposes of negative caching."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1278
          },
          "name": "ttl",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/servicediscovery.generated:CfnPublicDnsNamespace.SOAProperty"
    },
    "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespaceProps": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-publicdnsnamespace.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnPublicDnsNamespace`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst cfnPublicDnsNamespaceProps: servicediscovery.CfnPublicDnsNamespaceProps = {\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  properties: {\n    dnsProperties: {\n      soa: {\n        ttl: 123,\n      },\n    },\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespaceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/servicediscovery.generated.ts",
        "line": 915
      },
      "name": "CfnPublicDnsNamespaceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-publicdnsnamespace.html#cfn-servicediscovery-publicdnsnamespace-name"
            },
            "stability": "external",
            "summary": "The name that you want to assign to this namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 922
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-publicdnsnamespace.html#cfn-servicediscovery-publicdnsnamespace-description"
            },
            "stability": "external",
            "summary": "A description for the namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 929
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-publicdnsnamespace.html#cfn-servicediscovery-publicdnsnamespace-properties"
            },
            "stability": "external",
            "summary": "Properties for the public DNS namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 936
          },
          "name": "properties",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespace.PropertiesProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-publicdnsnamespace.html#cfn-servicediscovery-publicdnsnamespace-tags"
            },
            "remarks": "Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
            "stability": "external",
            "summary": "The tags for the namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 943
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/core.CfnTag"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/servicediscovery.generated:CfnPublicDnsNamespaceProps"
    },
    "@aws-cdk/aws-servicediscovery.CfnService": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::ServiceDiscovery::Service",
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "A complex type that contains information about a service, which defines the configuration of the following entities:\n\n- For public and private DNS namespaces, one of the following combinations of DNS records in Amazon Route 53:\n\n- A\n- AAAA\n- A and AAAA\n- SRV\n- CNAME\n- Optionally, a health check",
        "stability": "external",
        "summary": "A CloudFormation `AWS::ServiceDiscovery::Service`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst cfnService = new servicediscovery.CfnService(this, 'MyCfnService', /* all optional props */ {\n  description: 'description',\n  dnsConfig: {\n    dnsRecords: [{\n      ttl: 123,\n      type: 'type',\n    }],\n\n    // the properties below are optional\n    namespaceId: 'namespaceId',\n    routingPolicy: 'routingPolicy',\n  },\n  healthCheckConfig: {\n    type: 'type',\n\n    // the properties below are optional\n    failureThreshold: 123,\n    resourcePath: 'resourcePath',\n  },\n  healthCheckCustomConfig: {\n    failureThreshold: 123,\n  },\n  name: 'name',\n  namespaceId: 'namespaceId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  type: 'type',\n});"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.CfnService",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::ServiceDiscovery::Service`."
        },
        "locationInModule": {
          "filename": "lib/servicediscovery.generated.ts",
          "line": 1600
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.CfnServiceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/core.IInspectable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/servicediscovery.generated.ts",
        "line": 1488
      },
      "methods": [
        {
          "docs": {
            "stability": "external",
            "summary": "Examines the CloudFormation resource and discloses attributes."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1622
          },
          "name": "inspect",
          "overrides": "@aws-cdk/core.IInspectable",
          "parameters": [
            {
              "docs": {
                "summary": "- tree inspector to collect and process attributes."
              },
              "name": "inspector",
              "type": {
                "fqn": "@aws-cdk/core.TreeInspector"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1640
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnService",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1492
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Arn"
            },
            "stability": "external",
            "summary": "The Amazon Resource Name (ARN) of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1517
          },
          "name": "attrArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Id"
            },
            "stability": "external",
            "summary": "The ID of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1523
          },
          "name": "attrId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Name"
            },
            "stability": "external",
            "summary": "The name that you assigned to the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1529
          },
          "name": "attrName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1627
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html#cfn-servicediscovery-service-tags"
            },
            "remarks": "Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
            "stability": "external",
            "summary": "The tags for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1584
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html#cfn-servicediscovery-service-description"
            },
            "stability": "external",
            "summary": "The description of the service."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1536
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html#cfn-servicediscovery-service-dnsconfig"
            },
            "stability": "external",
            "summary": "A complex type that contains information about the Route 53 DNS records that you want AWS Cloud Map to create when you register an instance."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1543
          },
          "name": "dnsConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-servicediscovery.CfnService.DnsConfigProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html#cfn-servicediscovery-service-healthcheckconfig"
            },
            "remarks": "For information about the charges for health checks, see [Amazon Route 53 Pricing](https://docs.aws.amazon.com/route53/pricing/) .",
            "stability": "external",
            "summary": "*Public DNS and HTTP namespaces only.* A complex type that contains settings for an optional health check. If you specify settings for a health check, AWS Cloud Map associates the health check with the records that you specify in `DnsConfig` ."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1552
          },
          "name": "healthCheckConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-servicediscovery.CfnService.HealthCheckConfigProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html#cfn-servicediscovery-service-healthcheckcustomconfig"
            },
            "remarks": "> If you specify a health check configuration, you can specify either `HealthCheckCustomConfig` or `HealthCheckConfig` but not both.",
            "stability": "external",
            "summary": "A complex type that contains information about an optional custom health check."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1561
          },
          "name": "healthCheckCustomConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-servicediscovery.CfnService.HealthCheckCustomConfigProperty"
                }
              ]
            }
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html#cfn-servicediscovery-service-name"
            },
            "stability": "external",
            "summary": "The name of the service."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1568
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html#cfn-servicediscovery-service-namespaceid"
            },
            "remarks": "> You must specify a value for `NamespaceId` either for the service properties or for [DnsConfig](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-service-dnsconfig.html) . Don't specify a value in both places.",
            "stability": "external",
            "summary": "The ID of the namespace that was used to create the service."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1577
          },
          "name": "namespaceId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html#cfn-servicediscovery-service-type"
            },
            "remarks": "No DNS records is registered for the service instances. The only valid value is `HTTP` .",
            "stability": "external",
            "summary": "If present, specifies that the service instances are only discoverable using the `DiscoverInstances` API operation."
          },
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1591
          },
          "name": "type",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/servicediscovery.generated:CfnService"
    },
    "@aws-cdk/aws-servicediscovery.CfnService.DnsConfigProperty": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-service-dnsconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "A complex type that contains information about the Amazon Route 53 DNS records that you want AWS Cloud Map to create when you register an instance.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst dnsConfigProperty: servicediscovery.CfnService.DnsConfigProperty = {\n  dnsRecords: [{\n    ttl: 123,\n    type: 'type',\n  }],\n\n  // the properties below are optional\n  namespaceId: 'namespaceId',\n  routingPolicy: 'routingPolicy',\n};"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.CfnService.DnsConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/servicediscovery.generated.ts",
        "line": 1654
      },
      "name": "DnsConfigProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-service-dnsconfig.html#cfn-servicediscovery-service-dnsconfig-dnsrecords"
            },
            "stability": "external",
            "summary": "An array that contains one `DnsRecord` object for each Route 53 DNS record that you want AWS Cloud Map to create when you register an instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1660
          },
          "name": "dnsRecords",
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/core.IResolvable"
                          },
                          {
                            "fqn": "@aws-cdk/aws-servicediscovery.CfnService.DnsRecordProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-service-dnsconfig.html#cfn-servicediscovery-service-dnsconfig-namespaceid"
            },
            "remarks": "> You must specify a value for `NamespaceId` either for `DnsConfig` or for the [service properties](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html) . Don't specify a value in both places.",
            "stability": "external",
            "summary": "The ID of the namespace to use for DNS configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1668
          },
          "name": "namespaceId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-service-dnsconfig.html#cfn-servicediscovery-service-dnsconfig-routingpolicy"
            },
            "remarks": "> If you want to use this service to register instances that create alias records, specify `WEIGHTED` for the routing policy.\n\nYou can specify the following values:\n\n- **MULTIVALUE** - If you define a health check for the service and the health check is healthy, Route 53 returns the applicable value for up to eight instances.\n\nFor example, suppose that the service includes configurations for one `A` record and a health check. You use the service to register 10 instances. Route 53 responds to DNS queries with IP addresses for up to eight healthy instances. If fewer than eight instances are healthy, Route 53 responds to every DNS query with the IP addresses for all of the healthy instances.\n\nIf you don't define a health check for the service, Route 53 assumes that all instances are healthy and returns the values for up to eight instances.\n\nFor more information about the multivalue routing policy, see [Multivalue Answer Routing](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-multivalue) in the *Route 53 Developer Guide* .\n- **WEIGHTED** - Route 53 returns the applicable value from one randomly selected instance from among the instances that you registered using the same service. Currently, all records have the same weight, so you can't route more or less traffic to any instances.\n\nFor example, suppose that the service includes configurations for one `A` record and a health check. You use the service to register 10 instances. Route 53 responds to DNS queries with the IP address for one randomly selected instance from among the healthy instances. If no instances are healthy, Route 53 responds to DNS queries as if all of the instances were healthy.\n\nIf you don't define a health check for the service, Route 53 assumes that all instances are healthy and returns the applicable value for one randomly selected instance.\n\nFor more information about the weighted routing policy, see [Weighted Routing](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted) in the *Route 53 Developer Guide* .",
            "stability": "external",
            "summary": "The routing policy that you want to apply to all Route 53 DNS records that AWS Cloud Map creates when you register an instance and specify this service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1693
          },
          "name": "routingPolicy",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/servicediscovery.generated:CfnService.DnsConfigProperty"
    },
    "@aws-cdk/aws-servicediscovery.CfnService.DnsRecordProperty": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-service-dnsrecord.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "A complex type that contains information about the Route 53 DNS records that you want AWS Cloud Map to create when you register an instance.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst dnsRecordProperty: servicediscovery.CfnService.DnsRecordProperty = {\n  ttl: 123,\n  type: 'type',\n};"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.CfnService.DnsRecordProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/servicediscovery.generated.ts",
        "line": 1761
      },
      "name": "DnsRecordProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-service-dnsrecord.html#cfn-servicediscovery-service-dnsrecord-ttl"
            },
            "remarks": "> Alias records don't include a TTL because Route 53 uses the TTL for the AWS resource that an alias record routes traffic to. If you include the `AWS_ALIAS_DNS_NAME` attribute when you submit a [RegisterInstance](https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html) request, the `TTL` value is ignored. Always specify a TTL for the service; you can use a service to register instances that create either alias or non-alias records.",
            "stability": "external",
            "summary": "The amount of time, in seconds, that you want DNS resolvers to cache the settings for this record."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1769
          },
          "name": "ttl",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-service-dnsrecord.html#cfn-servicediscovery-service-dnsrecord-type"
            },
            "remarks": "You can specify values for `Type` in the following combinations:\n\n- `A`\n- `AAAA`\n- `A` and `AAAA`\n- `SRV`\n- `CNAME`\n\nIf you want AWS Cloud Map to create a Route 53 alias record when you register an instance, specify `A` or `AAAA` for `Type` .\n\nYou specify other settings, such as the IP address for `A` and `AAAA` records, when you register an instance. For more information, see [RegisterInstance](https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html) .\n\nThe following values are supported:\n\n- **A** - Route 53 returns the IP address of the resource in IPv4 format, such as 192.0.2.44.\n- **AAAA** - Route 53 returns the IP address of the resource in IPv6 format, such as 2001:0db8:85a3:0000:0000:abcd:0001:2345.\n- **CNAME** - Route 53 returns the domain name of the resource, such as www.example.com. Note the following:\n\n- You specify the domain name that you want to route traffic to when you register an instance. For more information, see [Attributes](https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html#cloudmap-RegisterInstance-request-Attributes) in the topic [RegisterInstance](https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html) .\n- You must specify `WEIGHTED` for the value of `RoutingPolicy` .\n- You can't specify both `CNAME` for `Type` and settings for `HealthCheckConfig` . If you do, the request will fail with an `InvalidInput` error.\n- **SRV** - Route 53 returns the value for an `SRV` record. The value for an `SRV` record uses the following values:\n\n`priority weight port service-hostname`\n\nNote the following about the values:\n\n- The values of `priority` and `weight` are both set to `1` and can't be changed.\n- The value of `port` comes from the value that you specify for the `AWS_INSTANCE_PORT` attribute when you submit a [RegisterInstance](https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html) request.\n- The value of `service-hostname` is a concatenation of the following values:\n\n- The value that you specify for `InstanceId` when you register an instance.\n- The name of the service.\n- The name of the namespace.\n\nFor example, if the value of `InstanceId` is `test` , the name of the service is `backend` , and the name of the namespace is `example.com` , the value of `service-hostname` is:\n\n`test.backend.example.com`\n\nIf you specify settings for an `SRV` record and if you specify values for `AWS_INSTANCE_IPV4` , `AWS_INSTANCE_IPV6` , or both in the `RegisterInstance` request, AWS Cloud Map automatically creates `A` and/or `AAAA` records that have the same name as the value of `service-hostname` in the `SRV` record. You can ignore these records.",
            "stability": "external",
            "summary": "The type of the resource, which indicates the type of value that Route 53 returns in response to DNS queries."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1814
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/servicediscovery.generated:CfnService.DnsRecordProperty"
    },
    "@aws-cdk/aws-servicediscovery.CfnService.HealthCheckConfigProperty": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-service-healthcheckconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "> If you specify a health check configuration, you can specify either `HealthCheckCustomConfig` or `HealthCheckConfig` but not both.\n\nHealth checks are basic Route 53 health checks that monitor an AWS endpoint. For information about pricing for health checks, see [Amazon Route 53 Pricing](https://docs.aws.amazon.com/route53/pricing/) .\n\nNote the following about configuring health checks.\n\n- **A and AAAA records** - If `DnsConfig` includes configurations for both `A` and `AAAA` records, AWS Cloud Map creates a health check that uses the IPv4 address to check the health of the resource. If the endpoint tthat's specified by the IPv4 address is unhealthy, Route 53 considers both the `A` and `AAAA` records to be unhealthy.\n- **CNAME records** - You can't specify settings for `HealthCheckConfig` when the `DNSConfig` includes `CNAME` for the value of `Type` . If you do, the `CreateService` request will fail with an `InvalidInput` error.\n- **Request interval** - A Route 53 health checker in each health-checking AWS Region sends a health check request to an endpoint every 30 seconds. On average, your endpoint receives a health check request about every two seconds. However, health checkers don't coordinate with one another. Therefore, you might sometimes see several requests in one second that's followed by a few seconds with no health checks at all.\n- **Health checking regions** - Health checkers perform checks from all Route 53 health-checking Regions. For a list of the current Regions, see [Regions](https://docs.aws.amazon.com/Route53/latest/APIReference/API_HealthCheckConfig.html#Route53-Type-HealthCheckConfig-Regions) .\n- **Alias records** - When you register an instance, if you include the `AWS_ALIAS_DNS_NAME` attribute, AWS Cloud Map creates a Route 53 alias record. Note the following:\n\n- Route 53 automatically sets `EvaluateTargetHealth` to true for alias records. When `EvaluateTargetHealth` is true, the alias record inherits the health of the referenced AWS resource. such as an ELB load balancer. For more information, see [EvaluateTargetHealth](https://docs.aws.amazon.com/Route53/latest/APIReference/API_AliasTarget.html#Route53-Type-AliasTarget-EvaluateTargetHealth) .\n- If you include `HealthCheckConfig` and then use the service to register an instance that creates an alias record, Route 53 doesn't create the health check.\n- **Charges for health checks** - Health checks are basic Route 53 health checks that monitor an AWS endpoint. For information about pricing for health checks, see [Amazon Route 53 Pricing](https://docs.aws.amazon.com/route53/pricing/) .",
        "stability": "external",
        "summary": "*Public DNS and HTTP namespaces only.* A complex type that contains settings for an optional health check. If you specify settings for a health check, AWS Cloud Map associates the health check with the records that you specify in `DnsConfig` .",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst healthCheckConfigProperty: servicediscovery.CfnService.HealthCheckConfigProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  failureThreshold: 123,\n  resourcePath: 'resourcePath',\n};"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.CfnService.HealthCheckConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/servicediscovery.generated.ts",
        "line": 1896
      },
      "name": "HealthCheckConfigProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-service-healthcheckconfig.html#cfn-servicediscovery-service-healthcheckconfig-type"
            },
            "remarks": "> You can't change the value of `Type` after you create a health check.\n\nYou can create the following types of health checks:\n\n- *HTTP* : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTP request and waits for an HTTP status code of 200 or greater and less than 400.\n- *HTTPS* : Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTPS request and waits for an HTTP status code of 200 or greater and less than 400.\n\n> If you specify HTTPS for the value of `Type` , the endpoint must support TLS v1.0 or later.\n- *TCP* : Route 53 tries to establish a TCP connection.\n\nIf you specify `TCP` for `Type` , don't specify a value for `ResourcePath` .\n\nFor more information, see [How Route 53 Determines Whether an Endpoint Is Healthy](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html) in the *Route 53 Developer Guide* .",
            "stability": "external",
            "summary": "The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1930
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-service-healthcheckconfig.html#cfn-servicediscovery-service-healthcheckconfig-failurethreshold"
            },
            "remarks": "For more information, see [How Route 53 Determines Whether an Endpoint Is Healthy](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html) in the *Route 53 Developer Guide* .",
            "stability": "external",
            "summary": "The number of consecutive health checks that an endpoint must pass or fail for Route 53 to change the current status of the endpoint from unhealthy to healthy or the other way around."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1902
          },
          "name": "failureThreshold",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-service-healthcheckconfig.html#cfn-servicediscovery-service-healthcheckconfig-resourcepath"
            },
            "remarks": "The path can be any value that your endpoint returns an HTTP status code of a 2xx or 3xx format for when the endpoint is healthy. An example file is `/docs/route53-health-check.html` . Route 53 automatically adds the DNS name for the service. If you don't specify a value for `ResourcePath` , the default value is `/` .\n\nIf you specify `TCP` for `Type` , you must *not* specify a value for `ResourcePath` .",
            "stability": "external",
            "summary": "The path that you want Route 53 to request when performing health checks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1910
          },
          "name": "resourcePath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/servicediscovery.generated:CfnService.HealthCheckConfigProperty"
    },
    "@aws-cdk/aws-servicediscovery.CfnService.HealthCheckCustomConfigProperty": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-service-healthcheckcustomconfig.html",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "A custom health check, which requires that you use a third-party health checker to evaluate the health of your resources, is useful in the following circumstances:\n\n- You can't use a health check that's defined by `HealthCheckConfig` because the resource isn't available over the internet. For example, you can use a custom health check when the instance is in an Amazon VPC. (To check the health of resources in a VPC, the health checker must also be in the VPC.)\n- You want to use a third-party health checker regardless of where your resources are located.\n\n> If you specify a health check configuration, you can specify either `HealthCheckCustomConfig` or `HealthCheckConfig` but not both.\n\nTo change the status of a custom health check, submit an `UpdateInstanceCustomHealthStatus` request. AWS Cloud Map doesn't monitor the status of the resource, it just keeps a record of the status specified in the most recent `UpdateInstanceCustomHealthStatus` request.\n\nHere's how custom health checks work:\n\n- You create a service.\n- You register an instance.\n- You configure a third-party health checker to monitor the resource that's associated with the new instance.\n\n> AWS Cloud Map doesn't check the health of the resource directly.\n- The third-party health-checker determines that the resource is unhealthy and notifies your application.\n- Your application submits an `UpdateInstanceCustomHealthStatus` request.\n- AWS Cloud Map waits for 30 seconds.\n- If another `UpdateInstanceCustomHealthStatus` request doesn't arrive during that time to change the status back to healthy, AWS Cloud Map stops routing traffic to the resource.",
        "stability": "external",
        "summary": "A complex type that contains information about an optional custom health check.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst healthCheckCustomConfigProperty: servicediscovery.CfnService.HealthCheckCustomConfigProperty = {\n  failureThreshold: 123,\n};"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.CfnService.HealthCheckCustomConfigProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/servicediscovery.generated.ts",
        "line": 2017
      },
      "name": "HealthCheckCustomConfigProperty",
      "namespace": "CfnService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-service-healthcheckcustomconfig.html#cfn-servicediscovery-service-healthcheckcustomconfig-failurethreshold"
            },
            "remarks": "AWS Cloud Map waits for approximately 30 seconds after receiving an `UpdateInstanceCustomHealthStatus` request before changing the status of the service instance.\n\nThe number of 30-second intervals that you want AWS Cloud Map to wait after receiving an `UpdateInstanceCustomHealthStatus` request before it changes the health status of a service instance.\n\nSending a second or subsequent `UpdateInstanceCustomHealthStatus` request with the same value before 30 seconds has passed doesn't accelerate the change. AWS Cloud Map still waits `30` seconds after the first request to make the change.",
            "stability": "external",
            "summary": "> This parameter is no longer supported and is always set to 1."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 2027
          },
          "name": "failureThreshold",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/servicediscovery.generated:CfnService.HealthCheckCustomConfigProperty"
    },
    "@aws-cdk/aws-servicediscovery.CfnServiceProps": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "external",
        "summary": "Properties for defining a `CfnService`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst cfnServiceProps: servicediscovery.CfnServiceProps = {\n  description: 'description',\n  dnsConfig: {\n    dnsRecords: [{\n      ttl: 123,\n      type: 'type',\n    }],\n\n    // the properties below are optional\n    namespaceId: 'namespaceId',\n    routingPolicy: 'routingPolicy',\n  },\n  healthCheckConfig: {\n    type: 'type',\n\n    // the properties below are optional\n    failureThreshold: 123,\n    resourcePath: 'resourcePath',\n  },\n  healthCheckCustomConfig: {\n    failureThreshold: 123,\n  },\n  name: 'name',\n  namespaceId: 'namespaceId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  type: 'type',\n};"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.CfnServiceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/servicediscovery.generated.ts",
        "line": 1338
      },
      "name": "CfnServiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html#cfn-servicediscovery-service-description"
            },
            "stability": "external",
            "summary": "The description of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1345
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html#cfn-servicediscovery-service-dnsconfig"
            },
            "stability": "external",
            "summary": "A complex type that contains information about the Route 53 DNS records that you want AWS Cloud Map to create when you register an instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1352
          },
          "name": "dnsConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-servicediscovery.CfnService.DnsConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html#cfn-servicediscovery-service-healthcheckconfig"
            },
            "remarks": "For information about the charges for health checks, see [Amazon Route 53 Pricing](https://docs.aws.amazon.com/route53/pricing/) .",
            "stability": "external",
            "summary": "*Public DNS and HTTP namespaces only.* A complex type that contains settings for an optional health check. If you specify settings for a health check, AWS Cloud Map associates the health check with the records that you specify in `DnsConfig` ."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1361
          },
          "name": "healthCheckConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-servicediscovery.CfnService.HealthCheckConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html#cfn-servicediscovery-service-healthcheckcustomconfig"
            },
            "remarks": "> If you specify a health check configuration, you can specify either `HealthCheckCustomConfig` or `HealthCheckConfig` but not both.",
            "stability": "external",
            "summary": "A complex type that contains information about an optional custom health check."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1370
          },
          "name": "healthCheckCustomConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/core.IResolvable"
                },
                {
                  "fqn": "@aws-cdk/aws-servicediscovery.CfnService.HealthCheckCustomConfigProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html#cfn-servicediscovery-service-name"
            },
            "stability": "external",
            "summary": "The name of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1377
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html#cfn-servicediscovery-service-namespaceid"
            },
            "remarks": "> You must specify a value for `NamespaceId` either for the service properties or for [DnsConfig](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-servicediscovery-service-dnsconfig.html) . Don't specify a value in both places.",
            "stability": "external",
            "summary": "The ID of the namespace that was used to create the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1386
          },
          "name": "namespaceId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html#cfn-servicediscovery-service-tags"
            },
            "remarks": "Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
            "stability": "external",
            "summary": "The tags for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1393
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/core.CfnTag"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html#cfn-servicediscovery-service-type"
            },
            "remarks": "No DNS records is registered for the service instances. The only valid value is `HTTP` .",
            "stability": "external",
            "summary": "If present, specifies that the service instances are only discoverable using the `DiscoverInstances` API operation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/servicediscovery.generated.ts",
            "line": 1400
          },
          "name": "type",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/servicediscovery.generated:CfnServiceProps"
    },
    "@aws-cdk/aws-servicediscovery.CnameInstance": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "base": "@aws-cdk/aws-servicediscovery.InstanceBase",
      "docs": {
        "custom": {
          "resource": "AWS::ServiceDiscovery::Instance",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "stable",
        "summary": "Instance that is accessible using a domain name (CNAME).",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\nconst cnameInstance = new servicediscovery.CnameInstance(this, 'MyCnameInstance', {\n  instanceCname: 'instanceCname',\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n});"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.CnameInstance",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/cname-instance.ts",
          "line": 49
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.CnameInstanceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/cname-instance.ts",
        "line": 33
      },
      "name": "CnameInstance",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The domain name returned by DNS queries for the instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cname-instance.ts",
            "line": 47
          },
          "name": "cname",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Id of the instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cname-instance.ts",
            "line": 37
          },
          "name": "instanceId",
          "overrides": "@aws-cdk/aws-servicediscovery.InstanceBase",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Cloudmap service to which the instance is registered."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cname-instance.ts",
            "line": 42
          },
          "name": "service",
          "overrides": "@aws-cdk/aws-servicediscovery.InstanceBase",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.IService"
          }
        }
      ],
      "symbolId": "lib/cname-instance:CnameInstance"
    },
    "@aws-cdk/aws-servicediscovery.CnameInstanceBaseProps": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "lit=test/integ.service-with-cname-record.lit.ts infused"
        },
        "example": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.CNAME,\n  dnsTtl: cdk.Duration.seconds(30),\n});\n\nservice.registerCnameInstance('CnameInstance', {\n  instanceCname: 'service.pizza',\n});\n\napp.synth();",
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.CnameInstanceBaseProps",
      "interfaces": [
        "@aws-cdk/aws-servicediscovery.BaseInstanceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cname-instance.ts",
        "line": 10
      },
      "name": "CnameInstanceBaseProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "If the service configuration includes a CNAME record, the domain name that you want Route 53 to return in response to DNS queries, for example, example.com. This value is required if the service specified by ServiceId includes settings for an CNAME record."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cname-instance.ts",
            "line": 16
          },
          "name": "instanceCname",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/cname-instance:CnameInstanceBaseProps"
    },
    "@aws-cdk/aws-servicediscovery.CnameInstanceProps": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\nconst cnameInstanceProps: servicediscovery.CnameInstanceProps = {\n  instanceCname: 'instanceCname',\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-servicediscovery.CnameInstanceProps",
      "interfaces": [
        "@aws-cdk/aws-servicediscovery.CnameInstanceBaseProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/cname-instance.ts",
        "line": 22
      },
      "name": "CnameInstanceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The Cloudmap service this resource is registered to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/cname-instance.ts",
            "line": 26
          },
          "name": "service",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.IService"
          }
        }
      ],
      "symbolId": "lib/cname-instance:CnameInstanceProps"
    },
    "@aws-cdk/aws-servicediscovery.DnsRecordType": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "docs": {
        "custom": {
          "exampleMetadata": "lit=test/integ.service-with-cname-record.lit.ts infused"
        },
        "example": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.CNAME,\n  dnsTtl: cdk.Duration.seconds(30),\n});\n\nservice.registerCnameInstance('CnameInstance', {\n  instanceCname: 'service.pizza',\n});\n\napp.synth();",
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.DnsRecordType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 387
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "An A record."
          },
          "name": "A"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "An AAAA record."
          },
          "name": "AAAA"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Both an A and AAAA record."
          },
          "name": "A_AAAA"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "A Srv record."
          },
          "name": "SRV"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "A CNAME record."
          },
          "name": "CNAME"
        }
      ],
      "name": "DnsRecordType",
      "symbolId": "lib/service:DnsRecordType"
    },
    "@aws-cdk/aws-servicediscovery.DnsServiceProps": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "lit=test/integ.service-with-public-dns-namespace.lit.ts infused"
        },
        "example": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();",
        "remarks": "Used by createService() for PrivateDnsNamespace and\nPublicDnsNamespace",
        "stability": "stable",
        "summary": "Service props needed to create a service in a given namespace."
      },
      "fqn": "@aws-cdk/aws-servicediscovery.DnsServiceProps",
      "interfaces": [
        "@aws-cdk/aws-servicediscovery.BaseServiceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 89
      },
      "name": "DnsServiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "A",
            "remarks": "Supported record types\ninclude A, AAAA, A and AAAA (A_AAAA), CNAME, and SRV.",
            "stability": "stable",
            "summary": "The DNS type of the record that you want AWS Cloud Map to create."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 96
          },
          "name": "dnsRecordType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.DnsRecordType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.minutes(1)",
            "stability": "stable",
            "summary": "The amount of time, in seconds, that you want DNS resolvers to cache the settings for this record."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 104
          },
          "name": "dnsTtl",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "Setting this to `true` correctly configures the `routingPolicy`\nand performs some additional validation.",
            "stability": "stable",
            "summary": "Whether or not this service will have an Elastic LoadBalancer registered to it as an AliasTargetInstance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 122
          },
          "name": "loadBalancer",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "WEIGHTED for CNAME records and when loadBalancer is true, MULTIVALUE otherwise",
            "stability": "stable",
            "summary": "The routing policy that you want to apply to all DNS records that AWS Cloud Map creates when you register an instance and specify this service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 112
          },
          "name": "routingPolicy",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.RoutingPolicy"
          }
        }
      ],
      "symbolId": "lib/service:DnsServiceProps"
    },
    "@aws-cdk/aws-servicediscovery.HealthCheckConfig": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "lit=test/integ.service-with-http-namespace.lit.ts infused"
        },
        "example": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();",
        "remarks": "If you specify settings for a health check, AWS Cloud Map\nassociates the health check with all the records that you specify in DnsConfig. Only valid with a PublicDnsNamespace.",
        "stability": "stable",
        "summary": "Settings for an optional Amazon Route 53 health check."
      },
      "fqn": "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 349
      },
      "name": "HealthCheckConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "1",
            "stability": "stable",
            "summary": "The number of consecutive health checks that an endpoint must pass or fail for Route 53 to change the current status of the endpoint from unhealthy to healthy or vice versa."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 371
          },
          "name": "failureThreshold",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "'/'",
            "remarks": "Do not use when health check type is TCP.",
            "stability": "stable",
            "summary": "The path that you want Route 53 to request when performing health checks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 363
          },
          "name": "resourcePath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "HTTP",
            "remarks": "Cannot be modified once created. Supported values are HTTP, HTTPS, and TCP.",
            "stability": "stable",
            "summary": "The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 356
          },
          "name": "type",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.HealthCheckType"
          }
        }
      ],
      "symbolId": "lib/service:HealthCheckConfig"
    },
    "@aws-cdk/aws-servicediscovery.HealthCheckCustomConfig": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "summary": "Specifies information about an optional custom health check.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst healthCheckCustomConfig: servicediscovery.HealthCheckCustomConfig = {\n  failureThreshold: 123,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-servicediscovery.HealthCheckCustomConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 377
      },
      "name": "HealthCheckCustomConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "1",
            "stability": "stable",
            "summary": "The number of 30-second intervals that you want Cloud Map to wait after receiving an UpdateInstanceCustomHealthStatus request before it changes the health status of a service instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 384
          },
          "name": "failureThreshold",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/service:HealthCheckCustomConfig"
    },
    "@aws-cdk/aws-servicediscovery.HealthCheckType": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "docs": {
        "custom": {
          "exampleMetadata": "lit=test/integ.service-with-http-namespace.lit.ts infused"
        },
        "example": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();",
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.HealthCheckType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 428
      },
      "members": [
        {
          "docs": {
            "remarks": "If successful, Route 53 submits an HTTP request and waits for an HTTP\nstatus code of 200 or greater and less than 400.",
            "stability": "stable",
            "summary": "Route 53 tries to establish a TCP connection."
          },
          "name": "HTTP"
        },
        {
          "docs": {
            "remarks": "If successful, Route 53 submits an HTTPS request and waits for an\nHTTP status code of 200 or greater and less than 400.  If you specify HTTPS for the value of Type, the endpoint\nmust support TLS v1.0 or later.",
            "stability": "stable",
            "summary": "Route 53 tries to establish a TCP connection."
          },
          "name": "HTTPS"
        },
        {
          "docs": {
            "remarks": "If you specify TCP for Type, don't specify a value for ResourcePath.",
            "stability": "stable",
            "summary": "Route 53 tries to establish a TCP connection."
          },
          "name": "TCP"
        }
      ],
      "name": "HealthCheckType",
      "symbolId": "lib/service:HealthCheckType"
    },
    "@aws-cdk/aws-servicediscovery.HttpNamespace": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "custom": {
          "exampleMetadata": "lit=test/integ.service-with-http-namespace.lit.ts infused"
        },
        "example": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();",
        "stability": "stable",
        "summary": "Define an HTTP Namespace."
      },
      "fqn": "@aws-cdk/aws-servicediscovery.HttpNamespace",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/http-namespace.ts",
          "line": 61
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.HttpNamespaceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-servicediscovery.IHttpNamespace"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/http-namespace.ts",
        "line": 29
      },
      "methods": [
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/http-namespace.ts",
            "line": 31
          },
          "name": "fromHttpNamespaceAttributes",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-servicediscovery.HttpNamespaceAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.IHttpNamespace"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Creates a service within the namespace."
          },
          "locationInModule": {
            "filename": "lib/http-namespace.ts",
            "line": 87
          },
          "name": "createService",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-servicediscovery.BaseServiceProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.Service"
            }
          }
        }
      ],
      "name": "HttpNamespace",
      "properties": [
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/http-namespace.ts",
            "line": 76
          },
          "name": "httpNamespaceArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/http-namespace.ts",
            "line": 82
          },
          "name": "httpNamespaceId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/http-namespace.ts",
            "line": 79
          },
          "name": "httpNamespaceName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Namespace Arn for the namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/http-namespace.ts",
            "line": 54
          },
          "name": "namespaceArn",
          "overrides": "@aws-cdk/aws-servicediscovery.INamespace",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Namespace Id for the namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/http-namespace.ts",
            "line": 49
          },
          "name": "namespaceId",
          "overrides": "@aws-cdk/aws-servicediscovery.INamespace",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "A name for the namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/http-namespace.ts",
            "line": 44
          },
          "name": "namespaceName",
          "overrides": "@aws-cdk/aws-servicediscovery.INamespace",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Type of the namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/http-namespace.ts",
            "line": 59
          },
          "name": "type",
          "overrides": "@aws-cdk/aws-servicediscovery.INamespace",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.NamespaceType"
          }
        }
      ],
      "symbolId": "lib/http-namespace:HttpNamespace"
    },
    "@aws-cdk/aws-servicediscovery.HttpNamespaceAttributes": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst httpNamespaceAttributes: servicediscovery.HttpNamespaceAttributes = {\n  namespaceArn: 'namespaceArn',\n  namespaceId: 'namespaceId',\n  namespaceName: 'namespaceName',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-servicediscovery.HttpNamespaceAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/http-namespace.ts",
        "line": 9
      },
      "name": "HttpNamespaceAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Namespace ARN for the Namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/http-namespace.ts",
            "line": 23
          },
          "name": "namespaceArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Namespace Id for the Namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/http-namespace.ts",
            "line": 18
          },
          "name": "namespaceId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "A name for the Namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/http-namespace.ts",
            "line": 13
          },
          "name": "namespaceName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/http-namespace:HttpNamespaceAttributes"
    },
    "@aws-cdk/aws-servicediscovery.HttpNamespaceProps": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "lit=test/integ.service-with-http-namespace.lit.ts infused"
        },
        "example": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();",
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.HttpNamespaceProps",
      "interfaces": [
        "@aws-cdk/aws-servicediscovery.BaseNamespaceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/http-namespace.ts",
        "line": 7
      },
      "name": "HttpNamespaceProps",
      "symbolId": "lib/http-namespace:HttpNamespaceProps"
    },
    "@aws-cdk/aws-servicediscovery.IHttpNamespace": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "docs": {
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.IHttpNamespace",
      "interfaces": [
        "@aws-cdk/aws-servicediscovery.INamespace"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/http-namespace.ts",
        "line": 8
      },
      "name": "IHttpNamespace",
      "symbolId": "lib/http-namespace:IHttpNamespace"
    },
    "@aws-cdk/aws-servicediscovery.IInstance": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "docs": {
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.IInstance",
      "interfaces": [
        "@aws-cdk/core.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/instance.ts",
        "line": 4
      },
      "name": "IInstance",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The id of the instance resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 9
          },
          "name": "instanceId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The Cloudmap service this resource is registered to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 14
          },
          "name": "service",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.IService"
          }
        }
      ],
      "symbolId": "lib/instance:IInstance"
    },
    "@aws-cdk/aws-servicediscovery.INamespace": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "docs": {
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.INamespace",
      "interfaces": [
        "@aws-cdk/core.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/namespace.ts",
        "line": 3
      },
      "name": "INamespace",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "Namespace ARN for the Namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/namespace.ts",
            "line": 20
          },
          "name": "namespaceArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "Namespace Id for the Namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/namespace.ts",
            "line": 14
          },
          "name": "namespaceId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "A name for the Namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/namespace.ts",
            "line": 8
          },
          "name": "namespaceName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Type of Namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/namespace.ts",
            "line": 25
          },
          "name": "type",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.NamespaceType"
          }
        }
      ],
      "symbolId": "lib/namespace:INamespace"
    },
    "@aws-cdk/aws-servicediscovery.IPrivateDnsNamespace": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "docs": {
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.IPrivateDnsNamespace",
      "interfaces": [
        "@aws-cdk/aws-servicediscovery.INamespace"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/private-dns-namespace.ts",
        "line": 15
      },
      "name": "IPrivateDnsNamespace",
      "symbolId": "lib/private-dns-namespace:IPrivateDnsNamespace"
    },
    "@aws-cdk/aws-servicediscovery.IPublicDnsNamespace": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "docs": {
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.IPublicDnsNamespace",
      "interfaces": [
        "@aws-cdk/aws-servicediscovery.INamespace"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/public-dns-namespace.ts",
        "line": 8
      },
      "name": "IPublicDnsNamespace",
      "symbolId": "lib/public-dns-namespace:IPublicDnsNamespace"
    },
    "@aws-cdk/aws-servicediscovery.IService": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "docs": {
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.IService",
      "interfaces": [
        "@aws-cdk/core.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 12
      },
      "name": "IService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The DnsRecordType used by the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 39
          },
          "name": "dnsRecordType",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.DnsRecordType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The namespace for the Cloudmap Service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 22
          },
          "name": "namespace",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.INamespace"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The Routing Policy used by the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 44
          },
          "name": "routingPolicy",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.RoutingPolicy"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The Arn of the namespace that you want to use for DNS configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 34
          },
          "name": "serviceArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "The ID of the namespace that you want to use for DNS configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 28
          },
          "name": "serviceId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable",
            "summary": "A name for the Cloudmap Service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 17
          },
          "name": "serviceName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:IService"
    },
    "@aws-cdk/aws-servicediscovery.InstanceBase": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-servicediscovery",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.InstanceBase",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/resource.ts",
          "line": 150
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/core.ResourceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-servicediscovery.IInstance"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/instance.ts",
        "line": 37
      },
      "methods": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Generate a unique instance Id that is safe to pass to CloudMap."
          },
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 51
          },
          "name": "uniqueInstanceId",
          "protected": true,
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "InstanceBase",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The Id of the instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 41
          },
          "name": "instanceId",
          "overrides": "@aws-cdk/aws-servicediscovery.IInstance",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The Cloudmap service to which the instance is registered."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/instance.ts",
            "line": 46
          },
          "name": "service",
          "overrides": "@aws-cdk/aws-servicediscovery.IInstance",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.IService"
          }
        }
      ],
      "symbolId": "lib/instance:InstanceBase"
    },
    "@aws-cdk/aws-servicediscovery.IpInstance": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "base": "@aws-cdk/aws-servicediscovery.InstanceBase",
      "docs": {
        "custom": {
          "resource": "AWS::ServiceDiscovery::Instance",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "stable",
        "summary": "Instance that is accessible using an IP address.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\nconst ipInstance = new servicediscovery.IpInstance(this, 'MyIpInstance', {\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n  ipv4: 'ipv4',\n  ipv6: 'ipv6',\n  port: 123,\n});"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.IpInstance",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/ip-instance.ts",
          "line": 77
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.IpInstanceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/ip-instance.ts",
        "line": 51
      },
      "name": "IpInstance",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The Id of the instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ip-instance.ts",
            "line": 55
          },
          "name": "instanceId",
          "overrides": "@aws-cdk/aws-servicediscovery.InstanceBase",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Ipv4 address of the instance, or blank string if none available."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ip-instance.ts",
            "line": 65
          },
          "name": "ipv4",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Ipv6 address of the instance, or blank string if none available."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ip-instance.ts",
            "line": 70
          },
          "name": "ipv6",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The exposed port of the instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ip-instance.ts",
            "line": 75
          },
          "name": "port",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Cloudmap service to which the instance is registered."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ip-instance.ts",
            "line": 60
          },
          "name": "service",
          "overrides": "@aws-cdk/aws-servicediscovery.InstanceBase",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.IService"
          }
        }
      ],
      "symbolId": "lib/ip-instance:IpInstance"
    },
    "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "lit=test/integ.service-with-http-namespace.lit.ts infused"
        },
        "example": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();",
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
      "interfaces": [
        "@aws-cdk/aws-servicediscovery.BaseInstanceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ip-instance.ts",
        "line": 9
      },
      "name": "IpInstanceBaseProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "stability": "stable",
            "summary": "If the service that you specify contains a template for an A record, the IPv4 address that you want AWS Cloud Map to use for the value of the A record."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ip-instance.ts",
            "line": 25
          },
          "name": "ipv4",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "none",
            "stability": "stable",
            "summary": "If the service that you specify contains a template for an AAAA record, the IPv6 address that you want AWS Cloud Map to use for the value of the AAAA record."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ip-instance.ts",
            "line": 33
          },
          "name": "ipv6",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "80",
            "remarks": "This value is also used for\nthe port value in an SRV record if the service that you specify includes an SRV record. You can also specify a\ndefault port that is applied to all instances in the Service configuration.",
            "stability": "stable",
            "summary": "The port on the endpoint that you want AWS Cloud Map to perform health checks on."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ip-instance.ts",
            "line": 17
          },
          "name": "port",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/ip-instance:IpInstanceBaseProps"
    },
    "@aws-cdk/aws-servicediscovery.IpInstanceProps": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\nconst ipInstanceProps: servicediscovery.IpInstanceProps = {\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n  ipv4: 'ipv4',\n  ipv6: 'ipv6',\n  port: 123,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-servicediscovery.IpInstanceProps",
      "interfaces": [
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/ip-instance.ts",
        "line": 39
      },
      "name": "IpInstanceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The Cloudmap service this resource is registered to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/ip-instance.ts",
            "line": 43
          },
          "name": "service",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.IService"
          }
        }
      ],
      "symbolId": "lib/ip-instance:IpInstanceProps"
    },
    "@aws-cdk/aws-servicediscovery.NamespaceType": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "docs": {
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.NamespaceType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/namespace.ts",
        "line": 42
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Choose this option if you want your application to use only API calls to discover registered instances."
          },
          "name": "HTTP"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Choose this option if you want your application to be able to discover instances using either API calls or using DNS queries in a VPC."
          },
          "name": "DNS_PRIVATE"
        },
        {
          "docs": {
            "remarks": "You aren't required to use both methods.",
            "stability": "stable",
            "summary": "Choose this option if you want your application to be able to discover instances using either API calls or using public DNS queries."
          },
          "name": "DNS_PUBLIC"
        }
      ],
      "name": "NamespaceType",
      "symbolId": "lib/namespace:NamespaceType"
    },
    "@aws-cdk/aws-servicediscovery.NonIpInstance": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "base": "@aws-cdk/aws-servicediscovery.InstanceBase",
      "docs": {
        "custom": {
          "resource": "AWS::ServiceDiscovery::Instance",
          "exampleMetadata": "fixture=_generated"
        },
        "remarks": "Specify the other values in Custom attributes.",
        "stability": "stable",
        "summary": "Instance accessible using values other than an IP address or a domain name (CNAME).",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\nconst nonIpInstance = new servicediscovery.NonIpInstance(this, 'MyNonIpInstance', {\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n});"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.NonIpInstance",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/non-ip-instance.ts",
          "line": 37
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.NonIpInstanceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/non-ip-instance.ts",
        "line": 26
      },
      "name": "NonIpInstance",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The Id of the instance."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/non-ip-instance.ts",
            "line": 30
          },
          "name": "instanceId",
          "overrides": "@aws-cdk/aws-servicediscovery.InstanceBase",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Cloudmap service to which the instance is registered."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/non-ip-instance.ts",
            "line": 35
          },
          "name": "service",
          "overrides": "@aws-cdk/aws-servicediscovery.InstanceBase",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.IService"
          }
        }
      ],
      "symbolId": "lib/non-ip-instance:NonIpInstance"
    },
    "@aws-cdk/aws-servicediscovery.NonIpInstanceBaseProps": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "lit=test/integ.service-with-http-namespace.lit.ts infused"
        },
        "example": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();",
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.NonIpInstanceBaseProps",
      "interfaces": [
        "@aws-cdk/aws-servicediscovery.BaseInstanceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/non-ip-instance.ts",
        "line": 7
      },
      "name": "NonIpInstanceBaseProps",
      "symbolId": "lib/non-ip-instance:NonIpInstanceBaseProps"
    },
    "@aws-cdk/aws-servicediscovery.NonIpInstanceProps": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\nconst nonIpInstanceProps: servicediscovery.NonIpInstanceProps = {\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-servicediscovery.NonIpInstanceProps",
      "interfaces": [
        "@aws-cdk/aws-servicediscovery.NonIpInstanceBaseProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/non-ip-instance.ts",
        "line": 13
      },
      "name": "NonIpInstanceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The Cloudmap service this resource is registered to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/non-ip-instance.ts",
            "line": 17
          },
          "name": "service",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.IService"
          }
        }
      ],
      "symbolId": "lib/non-ip-instance:NonIpInstanceProps"
    },
    "@aws-cdk/aws-servicediscovery.PrivateDnsNamespace": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "// Cloud Map service discovery is currently required for host ejection by outlier detection\nconst vpc = new ec2.Vpc(this, 'vpc');\nconst namespace = new cloudmap.PrivateDnsNamespace(this, 'test-namespace', {\n    vpc,\n    name: 'domain.local',\n});\nconst service = namespace.createService('Svc');\n\ndeclare const mesh: appmesh.Mesh;\nconst node = mesh.addVirtualNode('virtual-node', {\n  serviceDiscovery: appmesh.ServiceDiscovery.cloudMap(service),\n  listeners: [appmesh.VirtualNodeListener.http({\n    outlierDetection: {\n      baseEjectionDuration: cdk.Duration.seconds(10),\n      interval: cdk.Duration.seconds(30),\n      maxEjectionPercent: 50,\n      maxServerErrors: 5,\n    },\n  })],\n});",
        "stability": "stable",
        "summary": "Define a Service Discovery HTTP Namespace."
      },
      "fqn": "@aws-cdk/aws-servicediscovery.PrivateDnsNamespace",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/private-dns-namespace.ts",
          "line": 69
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.PrivateDnsNamespaceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-servicediscovery.IPrivateDnsNamespace"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/private-dns-namespace.ts",
        "line": 37
      },
      "methods": [
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/private-dns-namespace.ts",
            "line": 39
          },
          "name": "fromPrivateDnsNamespaceAttributes",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-servicediscovery.PrivateDnsNamespaceAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.IPrivateDnsNamespace"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Creates a service within the namespace."
          },
          "locationInModule": {
            "filename": "lib/private-dns-namespace.ts",
            "line": 99
          },
          "name": "createService",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-servicediscovery.DnsServiceProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.Service"
            }
          }
        }
      ],
      "name": "PrivateDnsNamespace",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Namespace Arn of the namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/private-dns-namespace.ts",
            "line": 62
          },
          "name": "namespaceArn",
          "overrides": "@aws-cdk/aws-servicediscovery.INamespace",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Namespace Id of the PrivateDnsNamespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/private-dns-namespace.ts",
            "line": 57
          },
          "name": "namespaceId",
          "overrides": "@aws-cdk/aws-servicediscovery.INamespace",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The name of the PrivateDnsNamespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/private-dns-namespace.ts",
            "line": 52
          },
          "name": "namespaceName",
          "overrides": "@aws-cdk/aws-servicediscovery.INamespace",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/private-dns-namespace.ts",
            "line": 88
          },
          "name": "privateDnsNamespaceArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/private-dns-namespace.ts",
            "line": 94
          },
          "name": "privateDnsNamespaceId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/private-dns-namespace.ts",
            "line": 91
          },
          "name": "privateDnsNamespaceName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Type of the namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/private-dns-namespace.ts",
            "line": 67
          },
          "name": "type",
          "overrides": "@aws-cdk/aws-servicediscovery.INamespace",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.NamespaceType"
          }
        }
      ],
      "symbolId": "lib/private-dns-namespace:PrivateDnsNamespace"
    },
    "@aws-cdk/aws-servicediscovery.PrivateDnsNamespaceAttributes": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst privateDnsNamespaceAttributes: servicediscovery.PrivateDnsNamespaceAttributes = {\n  namespaceArn: 'namespaceArn',\n  namespaceId: 'namespaceId',\n  namespaceName: 'namespaceName',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-servicediscovery.PrivateDnsNamespaceAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/private-dns-namespace.ts",
        "line": 17
      },
      "name": "PrivateDnsNamespaceAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Namespace ARN for the Namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/private-dns-namespace.ts",
            "line": 31
          },
          "name": "namespaceArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Namespace Id for the Namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/private-dns-namespace.ts",
            "line": 26
          },
          "name": "namespaceId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "A name for the Namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/private-dns-namespace.ts",
            "line": 21
          },
          "name": "namespaceName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/private-dns-namespace:PrivateDnsNamespaceAttributes"
    },
    "@aws-cdk/aws-servicediscovery.PrivateDnsNamespaceProps": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "infused"
        },
        "example": "// Cloud Map service discovery is currently required for host ejection by outlier detection\nconst vpc = new ec2.Vpc(this, 'vpc');\nconst namespace = new cloudmap.PrivateDnsNamespace(this, 'test-namespace', {\n    vpc,\n    name: 'domain.local',\n});\nconst service = namespace.createService('Svc');\n\ndeclare const mesh: appmesh.Mesh;\nconst node = mesh.addVirtualNode('virtual-node', {\n  serviceDiscovery: appmesh.ServiceDiscovery.cloudMap(service),\n  listeners: [appmesh.VirtualNodeListener.http({\n    outlierDetection: {\n      baseEjectionDuration: cdk.Duration.seconds(10),\n      interval: cdk.Duration.seconds(30),\n      maxEjectionPercent: 50,\n      maxServerErrors: 5,\n    },\n  })],\n});",
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.PrivateDnsNamespaceProps",
      "interfaces": [
        "@aws-cdk/aws-servicediscovery.BaseNamespaceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/private-dns-namespace.ts",
        "line": 8
      },
      "name": "PrivateDnsNamespaceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The Amazon VPC that you want to associate the namespace with."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/private-dns-namespace.ts",
            "line": 12
          },
          "name": "vpc",
          "type": {
            "fqn": "@aws-cdk/aws-ec2.IVpc"
          }
        }
      ],
      "symbolId": "lib/private-dns-namespace:PrivateDnsNamespaceProps"
    },
    "@aws-cdk/aws-servicediscovery.PublicDnsNamespace": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "custom": {
          "exampleMetadata": "lit=test/integ.service-with-public-dns-namespace.lit.ts infused"
        },
        "example": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();",
        "stability": "stable",
        "summary": "Define a Public DNS Namespace."
      },
      "fqn": "@aws-cdk/aws-servicediscovery.PublicDnsNamespace",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/public-dns-namespace.ts",
          "line": 61
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-servicediscovery.IPublicDnsNamespace"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/public-dns-namespace.ts",
        "line": 29
      },
      "methods": [
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/public-dns-namespace.ts",
            "line": 31
          },
          "name": "fromPublicDnsNamespaceAttributes",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.IPublicDnsNamespace"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Creates a service within the namespace."
          },
          "locationInModule": {
            "filename": "lib/public-dns-namespace.ts",
            "line": 87
          },
          "name": "createService",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-servicediscovery.DnsServiceProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.Service"
            }
          }
        }
      ],
      "name": "PublicDnsNamespace",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Namespace Arn for the namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/public-dns-namespace.ts",
            "line": 54
          },
          "name": "namespaceArn",
          "overrides": "@aws-cdk/aws-servicediscovery.INamespace",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Namespace Id for the namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/public-dns-namespace.ts",
            "line": 49
          },
          "name": "namespaceId",
          "overrides": "@aws-cdk/aws-servicediscovery.INamespace",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "A name for the namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/public-dns-namespace.ts",
            "line": 44
          },
          "name": "namespaceName",
          "overrides": "@aws-cdk/aws-servicediscovery.INamespace",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/public-dns-namespace.ts",
            "line": 76
          },
          "name": "publicDnsNamespaceArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/public-dns-namespace.ts",
            "line": 82
          },
          "name": "publicDnsNamespaceId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/public-dns-namespace.ts",
            "line": 79
          },
          "name": "publicDnsNamespaceName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Type of the namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/public-dns-namespace.ts",
            "line": 59
          },
          "name": "type",
          "overrides": "@aws-cdk/aws-servicediscovery.INamespace",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.NamespaceType"
          }
        }
      ],
      "symbolId": "lib/public-dns-namespace:PublicDnsNamespace"
    },
    "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceAttributes": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst publicDnsNamespaceAttributes: servicediscovery.PublicDnsNamespaceAttributes = {\n  namespaceArn: 'namespaceArn',\n  namespaceId: 'namespaceId',\n  namespaceName: 'namespaceName',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/public-dns-namespace.ts",
        "line": 9
      },
      "name": "PublicDnsNamespaceAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Namespace ARN for the Namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/public-dns-namespace.ts",
            "line": 23
          },
          "name": "namespaceArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "Namespace Id for the Namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/public-dns-namespace.ts",
            "line": 18
          },
          "name": "namespaceId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "A name for the Namespace."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/public-dns-namespace.ts",
            "line": 13
          },
          "name": "namespaceName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/public-dns-namespace:PublicDnsNamespaceAttributes"
    },
    "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceProps": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "custom": {
          "exampleMetadata": "lit=test/integ.service-with-public-dns-namespace.lit.ts infused"
        },
        "example": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();",
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceProps",
      "interfaces": [
        "@aws-cdk/aws-servicediscovery.BaseNamespaceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/public-dns-namespace.ts",
        "line": 7
      },
      "name": "PublicDnsNamespaceProps",
      "symbolId": "lib/public-dns-namespace:PublicDnsNamespaceProps"
    },
    "@aws-cdk/aws-servicediscovery.RoutingPolicy": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "docs": {
        "stability": "stable"
      },
      "fqn": "@aws-cdk/aws-servicediscovery.RoutingPolicy",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 414
      },
      "members": [
        {
          "docs": {
            "stability": "stable",
            "summary": "Route 53 returns the applicable value from one randomly selected instance from among the instances that you registered using the same service."
          },
          "name": "WEIGHTED"
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "If you define a health check for the service and the health check is healthy, Route 53 returns the applicable value for up to eight instances."
          },
          "name": "MULTIVALUE"
        }
      ],
      "name": "RoutingPolicy",
      "symbolId": "lib/service:RoutingPolicy"
    },
    "@aws-cdk/aws-servicediscovery.Service": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "custom": {
          "exampleMetadata": "lit=test/integ.service-with-public-dns-namespace.lit.ts infused"
        },
        "example": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();",
        "stability": "stable",
        "summary": "Define a CloudMap Service."
      },
      "fqn": "@aws-cdk/aws-servicediscovery.Service",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "lib/service.ts",
          "line": 198
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.ServiceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-servicediscovery.IService"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 153
      },
      "methods": [
        {
          "docs": {
            "stability": "stable"
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 155
          },
          "name": "fromServiceAttributes",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-servicediscovery.ServiceAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.IService"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Registers a resource that is accessible using a CNAME."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 321
          },
          "name": "registerCnameInstance",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-servicediscovery.CnameInstanceBaseProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.IInstance"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Registers a resource that is accessible using an IP address."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 311
          },
          "name": "registerIpInstance",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.IInstance"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Registers an ELB as a new instance with unique name instanceId in this service."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 290
          },
          "name": "registerLoadBalancer",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "loadBalancer",
              "type": {
                "fqn": "@aws-cdk/aws-elasticloadbalancingv2.ILoadBalancerV2"
              }
            },
            {
              "name": "customAttributes",
              "optional": true,
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.IInstance"
            }
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "Registers a resource that is accessible using values other than an IP address or a domain name (CNAME)."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 301
          },
          "name": "registerNonIpInstance",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-servicediscovery.NonIpInstanceBaseProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-servicediscovery.IInstance"
            }
          }
        }
      ],
      "name": "Service",
      "properties": [
        {
          "docs": {
            "stability": "stable",
            "summary": "The DnsRecordType used by the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 191
          },
          "name": "dnsRecordType",
          "overrides": "@aws-cdk/aws-servicediscovery.IService",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.DnsRecordType"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The namespace for the Cloudmap Service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 176
          },
          "name": "namespace",
          "overrides": "@aws-cdk/aws-servicediscovery.IService",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.INamespace"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Routing Policy used by the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 196
          },
          "name": "routingPolicy",
          "overrides": "@aws-cdk/aws-servicediscovery.IService",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.RoutingPolicy"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The Arn of the namespace that you want to use for DNS configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 186
          },
          "name": "serviceArn",
          "overrides": "@aws-cdk/aws-servicediscovery.IService",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "The ID of the namespace that you want to use for DNS configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 181
          },
          "name": "serviceId",
          "overrides": "@aws-cdk/aws-servicediscovery.IService",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "stable",
            "summary": "A name for the Cloudmap Service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 171
          },
          "name": "serviceName",
          "overrides": "@aws-cdk/aws-servicediscovery.IService",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:Service"
    },
    "@aws-cdk/aws-servicediscovery.ServiceAttributes": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const namespace: servicediscovery.INamespace;\nconst serviceAttributes: servicediscovery.ServiceAttributes = {\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  namespace: namespace,\n  routingPolicy: servicediscovery.RoutingPolicy.WEIGHTED,\n  serviceArn: 'serviceArn',\n  serviceId: 'serviceId',\n  serviceName: 'serviceName',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-servicediscovery.ServiceAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 141
      },
      "name": "ServiceAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 146
          },
          "name": "dnsRecordType",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.DnsRecordType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 142
          },
          "name": "namespace",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.INamespace"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 147
          },
          "name": "routingPolicy",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.RoutingPolicy"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 145
          },
          "name": "serviceArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 144
          },
          "name": "serviceId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "stable"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 143
          },
          "name": "serviceName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:ServiceAttributes"
    },
    "@aws-cdk/aws-servicediscovery.ServiceProps": {
      "assembly": "@aws-cdk/aws-servicediscovery",
      "datatype": true,
      "docs": {
        "stability": "stable",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const namespace: servicediscovery.INamespace;\nconst serviceProps: servicediscovery.ServiceProps = {\n  namespace: namespace,\n\n  // the properties below are optional\n  customHealthCheck: {\n    failureThreshold: 123,\n  },\n  description: 'description',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.minutes(30),\n  healthCheck: {\n    failureThreshold: 123,\n    resourcePath: 'resourcePath',\n    type: servicediscovery.HealthCheckType.HTTP,\n  },\n  loadBalancer: false,\n  name: 'name',\n  routingPolicy: servicediscovery.RoutingPolicy.WEIGHTED,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-servicediscovery.ServiceProps",
      "interfaces": [
        "@aws-cdk/aws-servicediscovery.DnsServiceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 125
      },
      "name": "ServiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "stable",
            "summary": "The namespace that you want to use for DNS configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 129
          },
          "name": "namespace",
          "type": {
            "fqn": "@aws-cdk/aws-servicediscovery.INamespace"
          }
        }
      ],
      "symbolId": "lib/service:ServiceProps"
    }
  },
  "version": "1.159.0",
  "fingerprint": "**********"
}
