{
  "version": "2",
  "toolVersion": "1.58.0",
  "snippets": {
    "2cd14217ee7938b5d28536966737944b434c82d4adc7ce07b5ce5d918d1208f0": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.HttpNamespace(stack, \"MyNamespace\",\n    name=\"covfefe\"\n)\n\nservice1 = namespace.create_service(\"NonIpService\",\n    description=\"service registering non-ip instances\"\n)\n\nservice1.register_non_ip_instance(\"NonIpInstance\",\n    custom_attributes={\"arn\": \"arn:aws:s3:::mybucket\"}\n)\n\nservice2 = namespace.create_service(\"IpService\",\n    description=\"service registering ip instances\",\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTP,\n        resource_path=\"/check\"\n    )\n)\n\nservice2.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\"\n)\n\napp.synth()",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = new HttpNamespace(stack, \"MyNamespace\", new HttpNamespaceProps {\n    Name = \"covfefe\"\n});\n\nService service1 = namespace.CreateService(\"NonIpService\", new BaseServiceProps {\n    Description = \"service registering non-ip instances\"\n});\n\nservice1.RegisterNonIpInstance(\"NonIpInstance\", new NonIpInstanceBaseProps {\n    CustomAttributes = new Dictionary<string, string> { { \"arn\", \"arn:aws:s3:::mybucket\" } }\n});\n\nService service2 = namespace.CreateService(\"IpService\", new BaseServiceProps {\n    Description = \"service registering ip instances\",\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTP,\n        ResourcePath = \"/check\"\n    }\n});\n\nservice2.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\"\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = HttpNamespace.Builder.create(stack, \"MyNamespace\")\n        .name(\"covfefe\")\n        .build();\n\nService service1 = namespace.createService(\"NonIpService\", BaseServiceProps.builder()\n        .description(\"service registering non-ip instances\")\n        .build());\n\nservice1.registerNonIpInstance(\"NonIpInstance\", NonIpInstanceBaseProps.builder()\n        .customAttributes(Map.of(\"arn\", \"arn:aws:s3:::mybucket\"))\n        .build());\n\nService service2 = namespace.createService(\"IpService\", BaseServiceProps.builder()\n        .description(\"service registering ip instances\")\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTP)\n                .resourcePath(\"/check\")\n                .build())\n        .build());\n\nservice2.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nimport servicediscovery \"github.com/aws-samples/dummy/lib\"\n\napp := cdk.NewApp()\nstack := cdk.NewStack(app, jsii.String(\"aws-servicediscovery-integ\"))\n\nnamespace := servicediscovery.NewHttpNamespace(stack, jsii.String(\"MyNamespace\"), &httpNamespaceProps{\n\tname: jsii.String(\"covfefe\"),\n})\n\nservice1 := namespace.createService(jsii.String(\"NonIpService\"), &baseServiceProps{\n\tdescription: jsii.String(\"service registering non-ip instances\"),\n})\n\nservice1.registerNonIpInstance(jsii.String(\"NonIpInstance\"), &nonIpInstanceBaseProps{\n\tcustomAttributes: map[string]*string{\n\t\t\"arn\": jsii.String(\"arn:aws:s3:::mybucket\"),\n\t},\n})\n\nservice2 := namespace.createService(jsii.String(\"IpService\"), &baseServiceProps{\n\tdescription: jsii.String(\"service registering ip instances\"),\n\thealthCheck: &healthCheckConfig{\n\t\ttype: servicediscovery.healthCheckType_HTTP,\n\t\tresourcePath: jsii.String(\"/check\"),\n\t},\n})\n\nservice2.registerIpInstance(jsii.String(\"IpInstance\"), &ipInstanceBaseProps{\n\tipv4: jsii.String(\"54.239.25.192\"),\n})\n\napp.synth()",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-servicediscovery"
        },
        "field": {
          "field": "markdown",
          "line": 31
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.BaseServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTP",
        "@aws-cdk/aws-servicediscovery.HttpNamespace",
        "@aws-cdk/aws-servicediscovery.HttpNamespace#createService",
        "@aws-cdk/aws-servicediscovery.HttpNamespaceProps",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.NonIpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/aws-servicediscovery.Service#registerNonIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth",
        "constructs.Construct"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 14,
        "75": 37,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "2fdec27985c7d2150be70aad26b202434f2945d76988c6c8d3043d51e938e5a8"
    },
    "72e448dcd7b946d505bd84b9306826ab5b9ea08d1a45d995cacdf4e7b1be3225": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_elasticloadbalancingv2 as elbv2\nimport aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nvpc = ec2.Vpc(stack, \"Vpc\", max_azs=2)\n\nnamespace = servicediscovery.PrivateDnsNamespace(stack, \"Namespace\",\n    name=\"boobar.com\",\n    vpc=vpc\n)\n\nservice = namespace.create_service(\"Service\",\n    dns_record_type=servicediscovery.DnsRecordType.A_AAAA,\n    dns_ttl=cdk.Duration.seconds(30),\n    load_balancer=True\n)\n\nloadbalancer = elbv2.ApplicationLoadBalancer(stack, \"LB\", vpc=vpc, internet_facing=True)\n\nservice.register_load_balancer(\"Loadbalancer\", loadbalancer)\n\napp.synth()",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.ElasticLoadBalancingV2;\nusing Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nVpc vpc = new Vpc(stack, \"Vpc\", new VpcProps { MaxAzs = 2 });\n\nPrivateDnsNamespace namespace = new PrivateDnsNamespace(stack, \"Namespace\", new PrivateDnsNamespaceProps {\n    Name = \"boobar.com\",\n    Vpc = vpc\n});\n\nService service = namespace.CreateService(\"Service\", new DnsServiceProps {\n    DnsRecordType = DnsRecordType.A_AAAA,\n    DnsTtl = Duration.Seconds(30),\n    LoadBalancer = true\n});\n\nApplicationLoadBalancer loadbalancer = new ApplicationLoadBalancer(stack, \"LB\", new ApplicationLoadBalancerProps { Vpc = vpc, InternetFacing = true });\n\nservice.RegisterLoadBalancer(\"Loadbalancer\", loadbalancer);\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.elasticloadbalancingv2.*;\nimport software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nVpc vpc = Vpc.Builder.create(stack, \"Vpc\").maxAzs(2).build();\n\nPrivateDnsNamespace namespace = PrivateDnsNamespace.Builder.create(stack, \"Namespace\")\n        .name(\"boobar.com\")\n        .vpc(vpc)\n        .build();\n\nService service = namespace.createService(\"Service\", DnsServiceProps.builder()\n        .dnsRecordType(DnsRecordType.A_AAAA)\n        .dnsTtl(Duration.seconds(30))\n        .loadBalancer(true)\n        .build());\n\nApplicationLoadBalancer loadbalancer = ApplicationLoadBalancer.Builder.create(stack, \"LB\").vpc(vpc).internetFacing(true).build();\n\nservice.registerLoadBalancer(\"Loadbalancer\", loadbalancer);\n\napp.synth();",
          "version": "1"
        },
        "go": {
          "source": "import ec2 \"github.com/aws-samples/dummy/awscdkawsec2\"\nimport elbv2 \"github.com/aws-samples/dummy/awscdkawselasticloadbalancingv2\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\nimport servicediscovery \"github.com/aws-samples/dummy/lib\"\n\napp := cdk.NewApp()\nstack := cdk.NewStack(app, jsii.String(\"aws-servicediscovery-integ\"))\n\nvpc := ec2.NewVpc(stack, jsii.String(\"Vpc\"), &vpcProps{\n\tmaxAzs: jsii.Number(2),\n})\n\nnamespace := servicediscovery.NewPrivateDnsNamespace(stack, jsii.String(\"Namespace\"), &privateDnsNamespaceProps{\n\tname: jsii.String(\"boobar.com\"),\n\tvpc: vpc,\n})\n\nservice := namespace.createService(jsii.String(\"Service\"), &dnsServiceProps{\n\tdnsRecordType: servicediscovery.dnsRecordType_A_AAAA,\n\tdnsTtl: cdk.duration.seconds(jsii.Number(30)),\n\tloadBalancer: jsii.Boolean(true),\n})\n\nloadbalancer := elbv2.NewApplicationLoadBalancer(stack, jsii.String(\"LB\"), &applicationLoadBalancerProps{\n\tvpc: vpc,\n\tinternetFacing: jsii.Boolean(true),\n})\n\nservice.registerLoadBalancer(jsii.String(\"Loadbalancer\"), loadbalancer)\n\napp.synth()",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst vpc = new ec2.Vpc(stack, 'Vpc', { maxAzs: 2 });\n\nconst namespace = new servicediscovery.PrivateDnsNamespace(stack, 'Namespace', {\n  name: 'boobar.com',\n  vpc,\n});\n\nconst service = namespace.createService('Service', {\n  dnsRecordType: servicediscovery.DnsRecordType.A_AAAA,\n  dnsTtl: cdk.Duration.seconds(30),\n  loadBalancer: true,\n});\n\nconst loadbalancer = new elbv2.ApplicationLoadBalancer(stack, 'LB', { vpc, internetFacing: true });\n\nservice.registerLoadBalancer('Loadbalancer', loadbalancer);\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-servicediscovery"
        },
        "field": {
          "field": "markdown",
          "line": 73
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-ec2.VpcProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ILoadBalancerV2",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A_AAAA",
        "@aws-cdk/aws-servicediscovery.DnsServiceProps",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerLoadBalancer",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth",
        "constructs.Construct"
      ],
      "fullSource": "import * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst vpc = new ec2.Vpc(stack, 'Vpc', { maxAzs: 2 });\n\nconst namespace = new servicediscovery.PrivateDnsNamespace(stack, 'Namespace', {\n  name: 'boobar.com',\n  vpc,\n});\n\nconst service = namespace.createService('Service', {\n  dnsRecordType: servicediscovery.DnsRecordType.A_AAAA,\n  dnsTtl: cdk.Duration.seconds(30),\n  loadBalancer: true,\n});\n\nconst loadbalancer = new elbv2.ApplicationLoadBalancer(stack, 'LB', { vpc, internetFacing: true });\n\nservice.registerLoadBalancer('Loadbalancer', loadbalancer);\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 11,
        "75": 45,
        "106": 2,
        "193": 4,
        "194": 12,
        "196": 4,
        "197": 5,
        "225": 6,
        "226": 2,
        "242": 6,
        "243": 6,
        "254": 4,
        "255": 4,
        "256": 4,
        "281": 6,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "7a881260d1af3ac355ad380dfc23a6fdf9e8b2b589dc25b7f88a5e4cc7afe012"
    },
    "ecea33433b24b5d93d1bb4948ac01da6f9510bc63a4ef2ecaaf451360be13309": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.PublicDnsNamespace(stack, \"Namespace\",\n    name=\"foobar.com\"\n)\n\nservice = namespace.create_service(\"Service\",\n    name=\"foo\",\n    dns_record_type=servicediscovery.DnsRecordType.A,\n    dns_ttl=cdk.Duration.seconds(30),\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTPS,\n        resource_path=\"/healthcheck\",\n        failure_threshold=2\n    )\n)\n\nservice.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\",\n    port=443\n)\n\napp.synth()",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = new PublicDnsNamespace(stack, \"Namespace\", new PublicDnsNamespaceProps {\n    Name = \"foobar.com\"\n});\n\nService service = namespace.CreateService(\"Service\", new DnsServiceProps {\n    Name = \"foo\",\n    DnsRecordType = DnsRecordType.A,\n    DnsTtl = Duration.Seconds(30),\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTPS,\n        ResourcePath = \"/healthcheck\",\n        FailureThreshold = 2\n    }\n});\n\nservice.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\",\n    Port = 443\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = PublicDnsNamespace.Builder.create(stack, \"Namespace\")\n        .name(\"foobar.com\")\n        .build();\n\nService service = namespace.createService(\"Service\", DnsServiceProps.builder()\n        .name(\"foo\")\n        .dnsRecordType(DnsRecordType.A)\n        .dnsTtl(Duration.seconds(30))\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTPS)\n                .resourcePath(\"/healthcheck\")\n                .failureThreshold(2)\n                .build())\n        .build());\n\nservice.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .port(443)\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nimport servicediscovery \"github.com/aws-samples/dummy/lib\"\n\napp := cdk.NewApp()\nstack := cdk.NewStack(app, jsii.String(\"aws-servicediscovery-integ\"))\n\nnamespace := servicediscovery.NewPublicDnsNamespace(stack, jsii.String(\"Namespace\"), &publicDnsNamespaceProps{\n\tname: jsii.String(\"foobar.com\"),\n})\n\nservice := namespace.createService(jsii.String(\"Service\"), &dnsServiceProps{\n\tname: jsii.String(\"foo\"),\n\tdnsRecordType: servicediscovery.dnsRecordType_A,\n\tdnsTtl: cdk.duration.seconds(jsii.Number(30)),\n\thealthCheck: &healthCheckConfig{\n\t\ttype: servicediscovery.healthCheckType_HTTPS,\n\t\tresourcePath: jsii.String(\"/healthcheck\"),\n\t\tfailureThreshold: jsii.Number(2),\n\t},\n})\n\nservice.registerIpInstance(jsii.String(\"IpInstance\"), &ipInstanceBaseProps{\n\tipv4: jsii.String(\"54.239.25.192\"),\n\tport: jsii.Number(443),\n})\n\napp.synth()",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-servicediscovery"
        },
        "field": {
          "field": "markdown",
          "line": 109
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A",
        "@aws-cdk/aws-servicediscovery.DnsServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTPS",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth",
        "constructs.Construct"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 10,
        "75": 39,
        "193": 4,
        "194": 12,
        "196": 4,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "a11de7b674b686c52abcf26f1d2594b432120358b1665a7d801817e0bfa4c590"
    },
    "c4344deaa7d2bf2a2224f6528d9e9ae88b36762b36f80533ed16e4d2b0afea92": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.PublicDnsNamespace(stack, \"Namespace\",\n    name=\"foobar.com\"\n)\n\nservice = namespace.create_service(\"Service\",\n    name=\"foo\",\n    dns_record_type=servicediscovery.DnsRecordType.CNAME,\n    dns_ttl=cdk.Duration.seconds(30)\n)\n\nservice.register_cname_instance(\"CnameInstance\",\n    instance_cname=\"service.pizza\"\n)\n\napp.synth()",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = new PublicDnsNamespace(stack, \"Namespace\", new PublicDnsNamespaceProps {\n    Name = \"foobar.com\"\n});\n\nService service = namespace.CreateService(\"Service\", new DnsServiceProps {\n    Name = \"foo\",\n    DnsRecordType = DnsRecordType.CNAME,\n    DnsTtl = Duration.Seconds(30)\n});\n\nservice.RegisterCnameInstance(\"CnameInstance\", new CnameInstanceBaseProps {\n    InstanceCname = \"service.pizza\"\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = PublicDnsNamespace.Builder.create(stack, \"Namespace\")\n        .name(\"foobar.com\")\n        .build();\n\nService service = namespace.createService(\"Service\", DnsServiceProps.builder()\n        .name(\"foo\")\n        .dnsRecordType(DnsRecordType.CNAME)\n        .dnsTtl(Duration.seconds(30))\n        .build());\n\nservice.registerCnameInstance(\"CnameInstance\", CnameInstanceBaseProps.builder()\n        .instanceCname(\"service.pizza\")\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nimport servicediscovery \"github.com/aws-samples/dummy/lib\"\n\napp := cdk.NewApp()\nstack := cdk.NewStack(app, jsii.String(\"aws-servicediscovery-integ\"))\n\nnamespace := servicediscovery.NewPublicDnsNamespace(stack, jsii.String(\"Namespace\"), &publicDnsNamespaceProps{\n\tname: jsii.String(\"foobar.com\"),\n})\n\nservice := namespace.createService(jsii.String(\"Service\"), &dnsServiceProps{\n\tname: jsii.String(\"foo\"),\n\tdnsRecordType: servicediscovery.dnsRecordType_CNAME,\n\tdnsTtl: cdk.duration.seconds(jsii.Number(30)),\n})\n\nservice.registerCnameInstance(jsii.String(\"CnameInstance\"), &cnameInstanceBaseProps{\n\tinstanceCname: jsii.String(\"service.pizza\"),\n})\n\napp.synth()",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.CNAME,\n  dnsTtl: cdk.Duration.seconds(30),\n});\n\nservice.registerCnameInstance('CnameInstance', {\n  instanceCname: 'service.pizza',\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-servicediscovery"
        },
        "field": {
          "field": "markdown",
          "line": 142
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CnameInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#CNAME",
        "@aws-cdk/aws-servicediscovery.DnsServiceProps",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerCnameInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth",
        "constructs.Construct"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.CNAME,\n  dnsTtl: cdk.Duration.seconds(30),\n});\n\nservice.registerCnameInstance('CnameInstance', {\n  instanceCname: 'service.pizza',\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 31,
        "193": 3,
        "194": 10,
        "196": 4,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "6b59d6a38491740c429aaf8dde6339e775bd12426dd9c78109bfecdb6bd7c4a8"
    },
    "fac4306def030da9ce9d405f450909b8e1d9978b9ba23a4250625c70be48c659": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\n# service: servicediscovery.Service\n\nalias_target_instance = servicediscovery.AliasTargetInstance(self, \"MyAliasTargetInstance\",\n    dns_name=\"dnsName\",\n    service=service,\n\n    # the properties below are optional\n    custom_attributes={\n        \"custom_attributes_key\": \"customAttributes\"\n    },\n    instance_id=\"instanceId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nService service;\n\nAliasTargetInstance aliasTargetInstance = new AliasTargetInstance(this, \"MyAliasTargetInstance\", new AliasTargetInstanceProps {\n    DnsName = \"dnsName\",\n    Service = service,\n\n    // the properties below are optional\n    CustomAttributes = new Dictionary<string, string> {\n        { \"customAttributesKey\", \"customAttributes\" }\n    },\n    InstanceId = \"instanceId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nService service;\n\nAliasTargetInstance aliasTargetInstance = AliasTargetInstance.Builder.create(this, \"MyAliasTargetInstance\")\n        .dnsName(\"dnsName\")\n        .service(service)\n\n        // the properties below are optional\n        .customAttributes(Map.of(\n                \"customAttributesKey\", \"customAttributes\"))\n        .instanceId(\"instanceId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\nvar service service\n\naliasTargetInstance := servicediscovery.NewAliasTargetInstance(this, jsii.String(\"MyAliasTargetInstance\"), &aliasTargetInstanceProps{\n\tdnsName: jsii.String(\"dnsName\"),\n\tservice: service,\n\n\t// the properties below are optional\n\tcustomAttributes: map[string]*string{\n\t\t\"customAttributesKey\": jsii.String(\"customAttributes\"),\n\t},\n\tinstanceId: jsii.String(\"instanceId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\nconst aliasTargetInstance = new servicediscovery.AliasTargetInstance(this, 'MyAliasTargetInstance', {\n  dnsName: 'dnsName',\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.AliasTargetInstance"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.AliasTargetInstance",
        "@aws-cdk/aws-servicediscovery.AliasTargetInstanceProps",
        "@aws-cdk/aws-servicediscovery.IService",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst aliasTargetInstance = new servicediscovery.AliasTargetInstance(this, 'MyAliasTargetInstance', {\n  dnsName: 'dnsName',\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 13,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "06f54a952ea7836b14820fdfed4e5fcc5b194bbe93b15813142a449385c80d86"
    },
    "0c1fc536da8cc0ae1aa5a474286199ce0cee2dbb69e1d5ea87759f121e046a2f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\n# service: servicediscovery.Service\n\nalias_target_instance_props = servicediscovery.AliasTargetInstanceProps(\n    dns_name=\"dnsName\",\n    service=service,\n\n    # the properties below are optional\n    custom_attributes={\n        \"custom_attributes_key\": \"customAttributes\"\n    },\n    instance_id=\"instanceId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nService service;\n\nAliasTargetInstanceProps aliasTargetInstanceProps = new AliasTargetInstanceProps {\n    DnsName = \"dnsName\",\n    Service = service,\n\n    // the properties below are optional\n    CustomAttributes = new Dictionary<string, string> {\n        { \"customAttributesKey\", \"customAttributes\" }\n    },\n    InstanceId = \"instanceId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nService service;\n\nAliasTargetInstanceProps aliasTargetInstanceProps = AliasTargetInstanceProps.builder()\n        .dnsName(\"dnsName\")\n        .service(service)\n\n        // the properties below are optional\n        .customAttributes(Map.of(\n                \"customAttributesKey\", \"customAttributes\"))\n        .instanceId(\"instanceId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\nvar service service\n\naliasTargetInstanceProps := &aliasTargetInstanceProps{\n\tdnsName: jsii.String(\"dnsName\"),\n\tservice: service,\n\n\t// the properties below are optional\n\tcustomAttributes: map[string]*string{\n\t\t\"customAttributesKey\": jsii.String(\"customAttributes\"),\n\t},\n\tinstanceId: jsii.String(\"instanceId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\nconst aliasTargetInstanceProps: servicediscovery.AliasTargetInstanceProps = {\n  dnsName: 'dnsName',\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.AliasTargetInstanceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.AliasTargetInstanceProps",
        "@aws-cdk/aws-servicediscovery.IService"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst aliasTargetInstanceProps: servicediscovery.AliasTargetInstanceProps = {\n  dnsName: 'dnsName',\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 13,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "62c393d611ebcfd6bfc5ed7984cce02617a16abe1a7700778d301d6391488fd2"
    },
    "f7ae3ece458dce21fe581b9a6054c1326dab756bbd06689873953b230db50e46": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\nbase_instance_props = servicediscovery.BaseInstanceProps(\n    custom_attributes={\n        \"custom_attributes_key\": \"customAttributes\"\n    },\n    instance_id=\"instanceId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nBaseInstanceProps baseInstanceProps = new BaseInstanceProps {\n    CustomAttributes = new Dictionary<string, string> {\n        { \"customAttributesKey\", \"customAttributes\" }\n    },\n    InstanceId = \"instanceId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nBaseInstanceProps baseInstanceProps = BaseInstanceProps.builder()\n        .customAttributes(Map.of(\n                \"customAttributesKey\", \"customAttributes\"))\n        .instanceId(\"instanceId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\nbaseInstanceProps := &baseInstanceProps{\n\tcustomAttributes: map[string]*string{\n\t\t\"customAttributesKey\": jsii.String(\"customAttributes\"),\n\t},\n\tinstanceId: jsii.String(\"instanceId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst baseInstanceProps: servicediscovery.BaseInstanceProps = {\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.BaseInstanceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.BaseInstanceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst baseInstanceProps: servicediscovery.BaseInstanceProps = {\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "32d0401346af362e216059147e23a86b3921ea10e0846e20755b679a68a66c61"
    },
    "b8ac9d1a473d8cd6dc0597eb7334730d3415bf753d543427c40fe20ae1f1681b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\nbase_namespace_props = servicediscovery.BaseNamespaceProps(\n    name=\"name\",\n\n    # the properties below are optional\n    description=\"description\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nBaseNamespaceProps baseNamespaceProps = new BaseNamespaceProps {\n    Name = \"name\",\n\n    // the properties below are optional\n    Description = \"description\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nBaseNamespaceProps baseNamespaceProps = BaseNamespaceProps.builder()\n        .name(\"name\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\nbaseNamespaceProps := &baseNamespaceProps{\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst baseNamespaceProps: servicediscovery.BaseNamespaceProps = {\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.BaseNamespaceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.BaseNamespaceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst baseNamespaceProps: servicediscovery.BaseNamespaceProps = {\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "0f3bda4eac3d7300c811d24e2c65a50a2074d9c2f31960e455211f12f3bf56c0"
    },
    "8979523cf85f77b07766fbe12b681f49d51a81bf2405686afd1f063b33100f2c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.HttpNamespace(stack, \"MyNamespace\",\n    name=\"covfefe\"\n)\n\nservice1 = namespace.create_service(\"NonIpService\",\n    description=\"service registering non-ip instances\"\n)\n\nservice1.register_non_ip_instance(\"NonIpInstance\",\n    custom_attributes={\"arn\": \"arn:aws:s3:::mybucket\"}\n)\n\nservice2 = namespace.create_service(\"IpService\",\n    description=\"service registering ip instances\",\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTP,\n        resource_path=\"/check\"\n    )\n)\n\nservice2.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\"\n)\n\napp.synth()",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = new HttpNamespace(stack, \"MyNamespace\", new HttpNamespaceProps {\n    Name = \"covfefe\"\n});\n\nService service1 = namespace.CreateService(\"NonIpService\", new BaseServiceProps {\n    Description = \"service registering non-ip instances\"\n});\n\nservice1.RegisterNonIpInstance(\"NonIpInstance\", new NonIpInstanceBaseProps {\n    CustomAttributes = new Dictionary<string, string> { { \"arn\", \"arn:aws:s3:::mybucket\" } }\n});\n\nService service2 = namespace.CreateService(\"IpService\", new BaseServiceProps {\n    Description = \"service registering ip instances\",\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTP,\n        ResourcePath = \"/check\"\n    }\n});\n\nservice2.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\"\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = HttpNamespace.Builder.create(stack, \"MyNamespace\")\n        .name(\"covfefe\")\n        .build();\n\nService service1 = namespace.createService(\"NonIpService\", BaseServiceProps.builder()\n        .description(\"service registering non-ip instances\")\n        .build());\n\nservice1.registerNonIpInstance(\"NonIpInstance\", NonIpInstanceBaseProps.builder()\n        .customAttributes(Map.of(\"arn\", \"arn:aws:s3:::mybucket\"))\n        .build());\n\nService service2 = namespace.createService(\"IpService\", BaseServiceProps.builder()\n        .description(\"service registering ip instances\")\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTP)\n                .resourcePath(\"/check\")\n                .build())\n        .build());\n\nservice2.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nimport servicediscovery \"github.com/aws-samples/dummy/lib\"\n\napp := cdk.NewApp()\nstack := cdk.NewStack(app, jsii.String(\"aws-servicediscovery-integ\"))\n\nnamespace := servicediscovery.NewHttpNamespace(stack, jsii.String(\"MyNamespace\"), &httpNamespaceProps{\n\tname: jsii.String(\"covfefe\"),\n})\n\nservice1 := namespace.createService(jsii.String(\"NonIpService\"), &baseServiceProps{\n\tdescription: jsii.String(\"service registering non-ip instances\"),\n})\n\nservice1.registerNonIpInstance(jsii.String(\"NonIpInstance\"), &nonIpInstanceBaseProps{\n\tcustomAttributes: map[string]*string{\n\t\t\"arn\": jsii.String(\"arn:aws:s3:::mybucket\"),\n\t},\n})\n\nservice2 := namespace.createService(jsii.String(\"IpService\"), &baseServiceProps{\n\tdescription: jsii.String(\"service registering ip instances\"),\n\thealthCheck: &healthCheckConfig{\n\t\ttype: servicediscovery.healthCheckType_HTTP,\n\t\tresourcePath: jsii.String(\"/check\"),\n\t},\n})\n\nservice2.registerIpInstance(jsii.String(\"IpInstance\"), &ipInstanceBaseProps{\n\tipv4: jsii.String(\"54.239.25.192\"),\n})\n\napp.synth()",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.BaseServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.BaseServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTP",
        "@aws-cdk/aws-servicediscovery.HttpNamespace",
        "@aws-cdk/aws-servicediscovery.HttpNamespace#createService",
        "@aws-cdk/aws-servicediscovery.HttpNamespaceProps",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.NonIpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/aws-servicediscovery.Service#registerNonIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth",
        "constructs.Construct"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 14,
        "75": 37,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "2fdec27985c7d2150be70aad26b202434f2945d76988c6c8d3043d51e938e5a8"
    },
    "3c20484005a137eaff67ec8a8d6d1a1b47a9ed42acc21c79784d79adcc89ca1d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\ncfn_http_namespace = servicediscovery.CfnHttpNamespace(self, \"MyCfnHttpNamespace\",\n    name=\"name\",\n\n    # the properties below are optional\n    description=\"description\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nCfnHttpNamespace cfnHttpNamespace = new CfnHttpNamespace(this, \"MyCfnHttpNamespace\", new CfnHttpNamespaceProps {\n    Name = \"name\",\n\n    // the properties below are optional\n    Description = \"description\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nCfnHttpNamespace cfnHttpNamespace = CfnHttpNamespace.Builder.create(this, \"MyCfnHttpNamespace\")\n        .name(\"name\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\ncfnHttpNamespace := servicediscovery.NewCfnHttpNamespace(this, jsii.String(\"MyCfnHttpNamespace\"), &cfnHttpNamespaceProps{\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst cfnHttpNamespace = new servicediscovery.CfnHttpNamespace(this, 'MyCfnHttpNamespace', {\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CfnHttpNamespace"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CfnHttpNamespace",
        "@aws-cdk/aws-servicediscovery.CfnHttpNamespaceProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnHttpNamespace = new servicediscovery.CfnHttpNamespace(this, 'MyCfnHttpNamespace', {\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 6,
        "75": 9,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "9f76cec697a101a2bc3da1682c48281bc725839b6b3d5a3cd44ab158bf5682ab"
    },
    "2e294e990764378ba4e381de10841c10c0a1f600615eb1b4869960a62d524d08": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\ncfn_http_namespace_props = servicediscovery.CfnHttpNamespaceProps(\n    name=\"name\",\n\n    # the properties below are optional\n    description=\"description\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nCfnHttpNamespaceProps cfnHttpNamespaceProps = new CfnHttpNamespaceProps {\n    Name = \"name\",\n\n    // the properties below are optional\n    Description = \"description\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nCfnHttpNamespaceProps cfnHttpNamespaceProps = CfnHttpNamespaceProps.builder()\n        .name(\"name\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\ncfnHttpNamespaceProps := &cfnHttpNamespaceProps{\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst cfnHttpNamespaceProps: servicediscovery.CfnHttpNamespaceProps = {\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CfnHttpNamespaceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CfnHttpNamespaceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnHttpNamespaceProps: servicediscovery.CfnHttpNamespaceProps = {\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "bda8422d62856ae1544807284b5350608840da9774e198e2e202315068d33112"
    },
    "f7de76a5a14a896de2773f53649e01ef471ba7fdd7319633bd5962119443f2e6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\n# instance_attributes: Any\n\ncfn_instance = servicediscovery.CfnInstance(self, \"MyCfnInstance\",\n    instance_attributes=instance_attributes,\n    service_id=\"serviceId\",\n\n    # the properties below are optional\n    instance_id=\"instanceId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nvar instanceAttributes;\n\nCfnInstance cfnInstance = new CfnInstance(this, \"MyCfnInstance\", new CfnInstanceProps {\n    InstanceAttributes = instanceAttributes,\n    ServiceId = \"serviceId\",\n\n    // the properties below are optional\n    InstanceId = \"instanceId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nObject instanceAttributes;\n\nCfnInstance cfnInstance = CfnInstance.Builder.create(this, \"MyCfnInstance\")\n        .instanceAttributes(instanceAttributes)\n        .serviceId(\"serviceId\")\n\n        // the properties below are optional\n        .instanceId(\"instanceId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\nvar instanceAttributes interface{}\n\ncfnInstance := servicediscovery.NewCfnInstance(this, jsii.String(\"MyCfnInstance\"), &cfnInstanceProps{\n\tinstanceAttributes: instanceAttributes,\n\tserviceId: jsii.String(\"serviceId\"),\n\n\t// the properties below are optional\n\tinstanceId: jsii.String(\"instanceId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const instanceAttributes: any;\nconst cfnInstance = new servicediscovery.CfnInstance(this, 'MyCfnInstance', {\n  instanceAttributes: instanceAttributes,\n  serviceId: 'serviceId',\n\n  // the properties below are optional\n  instanceId: 'instanceId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CfnInstance"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CfnInstance",
        "@aws-cdk/aws-servicediscovery.CfnInstanceProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const instanceAttributes: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnInstance = new servicediscovery.CfnInstance(this, 'MyCfnInstance', {\n  instanceAttributes: instanceAttributes,\n  serviceId: 'serviceId',\n\n  // the properties below are optional\n  instanceId: 'instanceId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 9,
        "104": 1,
        "125": 1,
        "130": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "04092050705c3a2a0d6e15bd8c8b132099ce52638959f646d542b5ac0ab8d196"
    },
    "36e5f071e02c25a13ef5137f904c2b34170aefde3af4e1eded8f43a8a97214b0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\n# instance_attributes: Any\n\ncfn_instance_props = servicediscovery.CfnInstanceProps(\n    instance_attributes=instance_attributes,\n    service_id=\"serviceId\",\n\n    # the properties below are optional\n    instance_id=\"instanceId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nvar instanceAttributes;\n\nCfnInstanceProps cfnInstanceProps = new CfnInstanceProps {\n    InstanceAttributes = instanceAttributes,\n    ServiceId = \"serviceId\",\n\n    // the properties below are optional\n    InstanceId = \"instanceId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nObject instanceAttributes;\n\nCfnInstanceProps cfnInstanceProps = CfnInstanceProps.builder()\n        .instanceAttributes(instanceAttributes)\n        .serviceId(\"serviceId\")\n\n        // the properties below are optional\n        .instanceId(\"instanceId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\nvar instanceAttributes interface{}\n\ncfnInstanceProps := &cfnInstanceProps{\n\tinstanceAttributes: instanceAttributes,\n\tserviceId: jsii.String(\"serviceId\"),\n\n\t// the properties below are optional\n\tinstanceId: jsii.String(\"instanceId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const instanceAttributes: any;\nconst cfnInstanceProps: servicediscovery.CfnInstanceProps = {\n  instanceAttributes: instanceAttributes,\n  serviceId: 'serviceId',\n\n  // the properties below are optional\n  instanceId: 'instanceId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CfnInstanceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CfnInstanceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const instanceAttributes: any;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnInstanceProps: servicediscovery.CfnInstanceProps = {\n  instanceAttributes: instanceAttributes,\n  serviceId: 'serviceId',\n\n  // the properties below are optional\n  instanceId: 'instanceId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 9,
        "125": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "a1e7765c3864142e99bae92ee2a059cfc70006e2c893e4509fe2d7442e4c4377"
    },
    "4cb9fd3198f53257d266f6a9256cbc52463134f3f482520e9289fba8e90c3e24": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\ncfn_private_dns_namespace = servicediscovery.CfnPrivateDnsNamespace(self, \"MyCfnPrivateDnsNamespace\",\n    name=\"name\",\n    vpc=\"vpc\",\n\n    # the properties below are optional\n    description=\"description\",\n    properties=servicediscovery.CfnPrivateDnsNamespace.PropertiesProperty(\n        dns_properties=servicediscovery.CfnPrivateDnsNamespace.PrivateDnsPropertiesMutableProperty(\n            soa=servicediscovery.CfnPrivateDnsNamespace.SOAProperty(\n                ttl=123\n            )\n        )\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nCfnPrivateDnsNamespace cfnPrivateDnsNamespace = new CfnPrivateDnsNamespace(this, \"MyCfnPrivateDnsNamespace\", new CfnPrivateDnsNamespaceProps {\n    Name = \"name\",\n    Vpc = \"vpc\",\n\n    // the properties below are optional\n    Description = \"description\",\n    Properties = new PropertiesProperty {\n        DnsProperties = new PrivateDnsPropertiesMutableProperty {\n            Soa = new SOAProperty {\n                Ttl = 123\n            }\n        }\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nCfnPrivateDnsNamespace cfnPrivateDnsNamespace = CfnPrivateDnsNamespace.Builder.create(this, \"MyCfnPrivateDnsNamespace\")\n        .name(\"name\")\n        .vpc(\"vpc\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .properties(PropertiesProperty.builder()\n                .dnsProperties(PrivateDnsPropertiesMutableProperty.builder()\n                        .soa(SOAProperty.builder()\n                                .ttl(123)\n                                .build())\n                        .build())\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\ncfnPrivateDnsNamespace := servicediscovery.NewCfnPrivateDnsNamespace(this, jsii.String(\"MyCfnPrivateDnsNamespace\"), &cfnPrivateDnsNamespaceProps{\n\tname: jsii.String(\"name\"),\n\tvpc: jsii.String(\"vpc\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tproperties: &propertiesProperty{\n\t\tdnsProperties: &privateDnsPropertiesMutableProperty{\n\t\t\tsoa: &sOAProperty{\n\t\t\t\tttl: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst cfnPrivateDnsNamespace = new servicediscovery.CfnPrivateDnsNamespace(this, 'MyCfnPrivateDnsNamespace', {\n  name: 'name',\n  vpc: 'vpc',\n\n  // the properties below are optional\n  description: 'description',\n  properties: {\n    dnsProperties: {\n      soa: {\n        ttl: 123,\n      },\n    },\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespace"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespace",
        "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespaceProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnPrivateDnsNamespace = new servicediscovery.CfnPrivateDnsNamespace(this, 'MyCfnPrivateDnsNamespace', {\n  name: 'name',\n  vpc: 'vpc',\n\n  // the properties below are optional\n  description: 'description',\n  properties: {\n    dnsProperties: {\n      soa: {\n        ttl: 123,\n      },\n    },\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 7,
        "75": 14,
        "104": 1,
        "192": 1,
        "193": 5,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "2a86b5db4d4030b0d3324240131ce21da869c8f883f7d3911e704e28918f78a5"
    },
    "532bf2b264ed17f7f383ac368ca2df4438455fc5f69031a000f15e4b8f93e9cc": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\nprivate_dns_properties_mutable_property = servicediscovery.CfnPrivateDnsNamespace.PrivateDnsPropertiesMutableProperty(\n    soa=servicediscovery.CfnPrivateDnsNamespace.SOAProperty(\n        ttl=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nPrivateDnsPropertiesMutableProperty privateDnsPropertiesMutableProperty = new PrivateDnsPropertiesMutableProperty {\n    Soa = new SOAProperty {\n        Ttl = 123\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nPrivateDnsPropertiesMutableProperty privateDnsPropertiesMutableProperty = PrivateDnsPropertiesMutableProperty.builder()\n        .soa(SOAProperty.builder()\n                .ttl(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\nprivateDnsPropertiesMutableProperty := &privateDnsPropertiesMutableProperty{\n\tsoa: &sOAProperty{\n\t\tttl: jsii.Number(123),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst privateDnsPropertiesMutableProperty: servicediscovery.CfnPrivateDnsNamespace.PrivateDnsPropertiesMutableProperty = {\n  soa: {\n    ttl: 123,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespace.PrivateDnsPropertiesMutableProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespace.PrivateDnsPropertiesMutableProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst privateDnsPropertiesMutableProperty: servicediscovery.CfnPrivateDnsNamespace.PrivateDnsPropertiesMutableProperty = {\n  soa: {\n    ttl: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "b0406af153bc628614190bffa2cec9d61e8b24f675c7c42c390f62b8415ff6c3"
    },
    "258bc36c9f0a0f64e5062a5ef3bff0eb5e6911c949f0f250651a7f99720d8069": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\nproperties_property = servicediscovery.CfnPrivateDnsNamespace.PropertiesProperty(\n    dns_properties=servicediscovery.CfnPrivateDnsNamespace.PrivateDnsPropertiesMutableProperty(\n        soa=servicediscovery.CfnPrivateDnsNamespace.SOAProperty(\n            ttl=123\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nPropertiesProperty propertiesProperty = new PropertiesProperty {\n    DnsProperties = new PrivateDnsPropertiesMutableProperty {\n        Soa = new SOAProperty {\n            Ttl = 123\n        }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nPropertiesProperty propertiesProperty = PropertiesProperty.builder()\n        .dnsProperties(PrivateDnsPropertiesMutableProperty.builder()\n                .soa(SOAProperty.builder()\n                        .ttl(123)\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\npropertiesProperty := &propertiesProperty{\n\tdnsProperties: &privateDnsPropertiesMutableProperty{\n\t\tsoa: &sOAProperty{\n\t\t\tttl: jsii.Number(123),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst propertiesProperty: servicediscovery.CfnPrivateDnsNamespace.PropertiesProperty = {\n  dnsProperties: {\n    soa: {\n      ttl: 123,\n    },\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespace.PropertiesProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespace.PropertiesProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst propertiesProperty: servicediscovery.CfnPrivateDnsNamespace.PropertiesProperty = {\n  dnsProperties: {\n    soa: {\n      ttl: 123,\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "8d9d69c126dd44b3cf8443128620841265efb5d997c09b88ac438dbccd0a8257"
    },
    "333521d3d21b7573141b86abeba2338ca0e7bd8d1a6b8da45f4a728bfb194515": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\ns_oAProperty = servicediscovery.CfnPrivateDnsNamespace.SOAProperty(\n    ttl=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nSOAProperty sOAProperty = new SOAProperty {\n    Ttl = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nSOAProperty sOAProperty = SOAProperty.builder()\n        .ttl(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\nsOAProperty := &sOAProperty{\n\tttl: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst sOAProperty: servicediscovery.CfnPrivateDnsNamespace.SOAProperty = {\n  ttl: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespace.SOAProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespace.SOAProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sOAProperty: servicediscovery.CfnPrivateDnsNamespace.SOAProperty = {\n  ttl: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "4ffd8007ab10d2135125950f0a8239475caeee9193927cfe0c815eee26b5ecd8"
    },
    "47b82731a737c7603a1b6d49cb2d076618cebdcb80804de3806f9f02ed059916": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\ncfn_private_dns_namespace_props = servicediscovery.CfnPrivateDnsNamespaceProps(\n    name=\"name\",\n    vpc=\"vpc\",\n\n    # the properties below are optional\n    description=\"description\",\n    properties=servicediscovery.CfnPrivateDnsNamespace.PropertiesProperty(\n        dns_properties=servicediscovery.CfnPrivateDnsNamespace.PrivateDnsPropertiesMutableProperty(\n            soa=servicediscovery.CfnPrivateDnsNamespace.SOAProperty(\n                ttl=123\n            )\n        )\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nCfnPrivateDnsNamespaceProps cfnPrivateDnsNamespaceProps = new CfnPrivateDnsNamespaceProps {\n    Name = \"name\",\n    Vpc = \"vpc\",\n\n    // the properties below are optional\n    Description = \"description\",\n    Properties = new PropertiesProperty {\n        DnsProperties = new PrivateDnsPropertiesMutableProperty {\n            Soa = new SOAProperty {\n                Ttl = 123\n            }\n        }\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nCfnPrivateDnsNamespaceProps cfnPrivateDnsNamespaceProps = CfnPrivateDnsNamespaceProps.builder()\n        .name(\"name\")\n        .vpc(\"vpc\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .properties(PropertiesProperty.builder()\n                .dnsProperties(PrivateDnsPropertiesMutableProperty.builder()\n                        .soa(SOAProperty.builder()\n                                .ttl(123)\n                                .build())\n                        .build())\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\ncfnPrivateDnsNamespaceProps := &cfnPrivateDnsNamespaceProps{\n\tname: jsii.String(\"name\"),\n\tvpc: jsii.String(\"vpc\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tproperties: &propertiesProperty{\n\t\tdnsProperties: &privateDnsPropertiesMutableProperty{\n\t\t\tsoa: &sOAProperty{\n\t\t\t\tttl: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst cfnPrivateDnsNamespaceProps: servicediscovery.CfnPrivateDnsNamespaceProps = {\n  name: 'name',\n  vpc: 'vpc',\n\n  // the properties below are optional\n  description: 'description',\n  properties: {\n    dnsProperties: {\n      soa: {\n        ttl: 123,\n      },\n    },\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespaceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CfnPrivateDnsNamespaceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnPrivateDnsNamespaceProps: servicediscovery.CfnPrivateDnsNamespaceProps = {\n  name: 'name',\n  vpc: 'vpc',\n\n  // the properties below are optional\n  description: 'description',\n  properties: {\n    dnsProperties: {\n      soa: {\n        ttl: 123,\n      },\n    },\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 14,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 5,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "2c2a0f842c20505f6b6f1e25aa5d9fd049674e86246ee68efd4bfb2424c9540a"
    },
    "ff2214fa839cc443e0cb4499f1a826bcab638cd803b089be2060f4dd305ad170": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\ncfn_public_dns_namespace = servicediscovery.CfnPublicDnsNamespace(self, \"MyCfnPublicDnsNamespace\",\n    name=\"name\",\n\n    # the properties below are optional\n    description=\"description\",\n    properties=servicediscovery.CfnPublicDnsNamespace.PropertiesProperty(\n        dns_properties=servicediscovery.CfnPublicDnsNamespace.PublicDnsPropertiesMutableProperty(\n            soa=servicediscovery.CfnPublicDnsNamespace.SOAProperty(\n                ttl=123\n            )\n        )\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nCfnPublicDnsNamespace cfnPublicDnsNamespace = new CfnPublicDnsNamespace(this, \"MyCfnPublicDnsNamespace\", new CfnPublicDnsNamespaceProps {\n    Name = \"name\",\n\n    // the properties below are optional\n    Description = \"description\",\n    Properties = new PropertiesProperty {\n        DnsProperties = new PublicDnsPropertiesMutableProperty {\n            Soa = new SOAProperty {\n                Ttl = 123\n            }\n        }\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nCfnPublicDnsNamespace cfnPublicDnsNamespace = CfnPublicDnsNamespace.Builder.create(this, \"MyCfnPublicDnsNamespace\")\n        .name(\"name\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .properties(PropertiesProperty.builder()\n                .dnsProperties(PublicDnsPropertiesMutableProperty.builder()\n                        .soa(SOAProperty.builder()\n                                .ttl(123)\n                                .build())\n                        .build())\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\ncfnPublicDnsNamespace := servicediscovery.NewCfnPublicDnsNamespace(this, jsii.String(\"MyCfnPublicDnsNamespace\"), &cfnPublicDnsNamespaceProps{\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tproperties: &propertiesProperty{\n\t\tdnsProperties: &publicDnsPropertiesMutableProperty{\n\t\t\tsoa: &sOAProperty{\n\t\t\t\tttl: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst cfnPublicDnsNamespace = new servicediscovery.CfnPublicDnsNamespace(this, 'MyCfnPublicDnsNamespace', {\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  properties: {\n    dnsProperties: {\n      soa: {\n        ttl: 123,\n      },\n    },\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespace"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespace",
        "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespaceProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnPublicDnsNamespace = new servicediscovery.CfnPublicDnsNamespace(this, 'MyCfnPublicDnsNamespace', {\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  properties: {\n    dnsProperties: {\n      soa: {\n        ttl: 123,\n      },\n    },\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 13,
        "104": 1,
        "192": 1,
        "193": 5,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "98b96982c8d745bf1ff322488a3055efe9bdcb06af78e49b3e1d77dcd10e3425"
    },
    "f2fdbbea5eaa57d2721b27df4813cb040edbb7da1b4abe4b04bd7263937c0421": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\nproperties_property = servicediscovery.CfnPublicDnsNamespace.PropertiesProperty(\n    dns_properties=servicediscovery.CfnPublicDnsNamespace.PublicDnsPropertiesMutableProperty(\n        soa=servicediscovery.CfnPublicDnsNamespace.SOAProperty(\n            ttl=123\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nPropertiesProperty propertiesProperty = new PropertiesProperty {\n    DnsProperties = new PublicDnsPropertiesMutableProperty {\n        Soa = new SOAProperty {\n            Ttl = 123\n        }\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nPropertiesProperty propertiesProperty = PropertiesProperty.builder()\n        .dnsProperties(PublicDnsPropertiesMutableProperty.builder()\n                .soa(SOAProperty.builder()\n                        .ttl(123)\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\npropertiesProperty := &propertiesProperty{\n\tdnsProperties: &publicDnsPropertiesMutableProperty{\n\t\tsoa: &sOAProperty{\n\t\t\tttl: jsii.Number(123),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst propertiesProperty: servicediscovery.CfnPublicDnsNamespace.PropertiesProperty = {\n  dnsProperties: {\n    soa: {\n      ttl: 123,\n    },\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespace.PropertiesProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespace.PropertiesProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst propertiesProperty: servicediscovery.CfnPublicDnsNamespace.PropertiesProperty = {\n  dnsProperties: {\n    soa: {\n      ttl: 123,\n    },\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 3,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "f8b8dc9ecda0c29d7421f621ce42dfd1749fa1014d5d0497d118830f9195b555"
    },
    "065f4e4b0601e2245916a31265c1b82b4bd45358b88554d41b8915aa05aad661": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\npublic_dns_properties_mutable_property = servicediscovery.CfnPublicDnsNamespace.PublicDnsPropertiesMutableProperty(\n    soa=servicediscovery.CfnPublicDnsNamespace.SOAProperty(\n        ttl=123\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nPublicDnsPropertiesMutableProperty publicDnsPropertiesMutableProperty = new PublicDnsPropertiesMutableProperty {\n    Soa = new SOAProperty {\n        Ttl = 123\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nPublicDnsPropertiesMutableProperty publicDnsPropertiesMutableProperty = PublicDnsPropertiesMutableProperty.builder()\n        .soa(SOAProperty.builder()\n                .ttl(123)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\npublicDnsPropertiesMutableProperty := &publicDnsPropertiesMutableProperty{\n\tsoa: &sOAProperty{\n\t\tttl: jsii.Number(123),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst publicDnsPropertiesMutableProperty: servicediscovery.CfnPublicDnsNamespace.PublicDnsPropertiesMutableProperty = {\n  soa: {\n    ttl: 123,\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespace.PublicDnsPropertiesMutableProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespace.PublicDnsPropertiesMutableProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst publicDnsPropertiesMutableProperty: servicediscovery.CfnPublicDnsNamespace.PublicDnsPropertiesMutableProperty = {\n  soa: {\n    ttl: 123,\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "86608a7f75a78abec4338717783f158e1206a97546caeb05840385c5f9aca5e5"
    },
    "02b644ed16f09f08549d9fcc4f4a8a24217c90f4118aabda7875d766548b6141": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\ns_oAProperty = servicediscovery.CfnPublicDnsNamespace.SOAProperty(\n    ttl=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nSOAProperty sOAProperty = new SOAProperty {\n    Ttl = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nSOAProperty sOAProperty = SOAProperty.builder()\n        .ttl(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\nsOAProperty := &sOAProperty{\n\tttl: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst sOAProperty: servicediscovery.CfnPublicDnsNamespace.SOAProperty = {\n  ttl: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespace.SOAProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespace.SOAProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst sOAProperty: servicediscovery.CfnPublicDnsNamespace.SOAProperty = {\n  ttl: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "4715844a4152b11817693eb181a4cba2c20446ca102c7236412d107db14780e6"
    },
    "aacbd16cc3037bbd9d2b18fa39f97862d43ffdc92cd5bd62f473e15bb3ca43e0": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\ncfn_public_dns_namespace_props = servicediscovery.CfnPublicDnsNamespaceProps(\n    name=\"name\",\n\n    # the properties below are optional\n    description=\"description\",\n    properties=servicediscovery.CfnPublicDnsNamespace.PropertiesProperty(\n        dns_properties=servicediscovery.CfnPublicDnsNamespace.PublicDnsPropertiesMutableProperty(\n            soa=servicediscovery.CfnPublicDnsNamespace.SOAProperty(\n                ttl=123\n            )\n        )\n    ),\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nCfnPublicDnsNamespaceProps cfnPublicDnsNamespaceProps = new CfnPublicDnsNamespaceProps {\n    Name = \"name\",\n\n    // the properties below are optional\n    Description = \"description\",\n    Properties = new PropertiesProperty {\n        DnsProperties = new PublicDnsPropertiesMutableProperty {\n            Soa = new SOAProperty {\n                Ttl = 123\n            }\n        }\n    },\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nCfnPublicDnsNamespaceProps cfnPublicDnsNamespaceProps = CfnPublicDnsNamespaceProps.builder()\n        .name(\"name\")\n\n        // the properties below are optional\n        .description(\"description\")\n        .properties(PropertiesProperty.builder()\n                .dnsProperties(PublicDnsPropertiesMutableProperty.builder()\n                        .soa(SOAProperty.builder()\n                                .ttl(123)\n                                .build())\n                        .build())\n                .build())\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\ncfnPublicDnsNamespaceProps := &cfnPublicDnsNamespaceProps{\n\tname: jsii.String(\"name\"),\n\n\t// the properties below are optional\n\tdescription: jsii.String(\"description\"),\n\tproperties: &propertiesProperty{\n\t\tdnsProperties: &publicDnsPropertiesMutableProperty{\n\t\t\tsoa: &sOAProperty{\n\t\t\t\tttl: jsii.Number(123),\n\t\t\t},\n\t\t},\n\t},\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst cfnPublicDnsNamespaceProps: servicediscovery.CfnPublicDnsNamespaceProps = {\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  properties: {\n    dnsProperties: {\n      soa: {\n        ttl: 123,\n      },\n    },\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespaceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CfnPublicDnsNamespaceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnPublicDnsNamespaceProps: servicediscovery.CfnPublicDnsNamespaceProps = {\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  properties: {\n    dnsProperties: {\n      soa: {\n        ttl: 123,\n      },\n    },\n  },\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 13,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 5,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "607e5cd8556c3aa1ff737c35c2880878b19d9c1a87e1bf5ac4f1ef0821c43c3c"
    },
    "99af20dd0fc7f0dd918940748b6f24177370d3b41edc9991810cfd1ed4edc341": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\ncfn_service = servicediscovery.CfnService(self, \"MyCfnService\",\n    description=\"description\",\n    dns_config=servicediscovery.CfnService.DnsConfigProperty(\n        dns_records=[servicediscovery.CfnService.DnsRecordProperty(\n            ttl=123,\n            type=\"type\"\n        )],\n\n        # the properties below are optional\n        namespace_id=\"namespaceId\",\n        routing_policy=\"routingPolicy\"\n    ),\n    health_check_config=servicediscovery.CfnService.HealthCheckConfigProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        failure_threshold=123,\n        resource_path=\"resourcePath\"\n    ),\n    health_check_custom_config=servicediscovery.CfnService.HealthCheckCustomConfigProperty(\n        failure_threshold=123\n    ),\n    name=\"name\",\n    namespace_id=\"namespaceId\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    type=\"type\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nCfnService cfnService = new CfnService(this, \"MyCfnService\", new CfnServiceProps {\n    Description = \"description\",\n    DnsConfig = new DnsConfigProperty {\n        DnsRecords = new [] { new DnsRecordProperty {\n            Ttl = 123,\n            Type = \"type\"\n        } },\n\n        // the properties below are optional\n        NamespaceId = \"namespaceId\",\n        RoutingPolicy = \"routingPolicy\"\n    },\n    HealthCheckConfig = new HealthCheckConfigProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        FailureThreshold = 123,\n        ResourcePath = \"resourcePath\"\n    },\n    HealthCheckCustomConfig = new HealthCheckCustomConfigProperty {\n        FailureThreshold = 123\n    },\n    Name = \"name\",\n    NamespaceId = \"namespaceId\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Type = \"type\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nCfnService cfnService = CfnService.Builder.create(this, \"MyCfnService\")\n        .description(\"description\")\n        .dnsConfig(DnsConfigProperty.builder()\n                .dnsRecords(List.of(DnsRecordProperty.builder()\n                        .ttl(123)\n                        .type(\"type\")\n                        .build()))\n\n                // the properties below are optional\n                .namespaceId(\"namespaceId\")\n                .routingPolicy(\"routingPolicy\")\n                .build())\n        .healthCheckConfig(HealthCheckConfigProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .failureThreshold(123)\n                .resourcePath(\"resourcePath\")\n                .build())\n        .healthCheckCustomConfig(HealthCheckCustomConfigProperty.builder()\n                .failureThreshold(123)\n                .build())\n        .name(\"name\")\n        .namespaceId(\"namespaceId\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .type(\"type\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\ncfnService := servicediscovery.NewCfnService(this, jsii.String(\"MyCfnService\"), &cfnServiceProps{\n\tdescription: jsii.String(\"description\"),\n\tdnsConfig: &dnsConfigProperty{\n\t\tdnsRecords: []interface{}{\n\t\t\t&dnsRecordProperty{\n\t\t\t\tttl: jsii.Number(123),\n\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t},\n\t\t},\n\n\t\t// the properties below are optional\n\t\tnamespaceId: jsii.String(\"namespaceId\"),\n\t\troutingPolicy: jsii.String(\"routingPolicy\"),\n\t},\n\thealthCheckConfig: &healthCheckConfigProperty{\n\t\ttype: jsii.String(\"type\"),\n\n\t\t// the properties below are optional\n\t\tfailureThreshold: jsii.Number(123),\n\t\tresourcePath: jsii.String(\"resourcePath\"),\n\t},\n\thealthCheckCustomConfig: &healthCheckCustomConfigProperty{\n\t\tfailureThreshold: jsii.Number(123),\n\t},\n\tname: jsii.String(\"name\"),\n\tnamespaceId: jsii.String(\"namespaceId\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttype: jsii.String(\"type\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst cfnService = new servicediscovery.CfnService(this, 'MyCfnService', /* all optional props */ {\n  description: 'description',\n  dnsConfig: {\n    dnsRecords: [{\n      ttl: 123,\n      type: 'type',\n    }],\n\n    // the properties below are optional\n    namespaceId: 'namespaceId',\n    routingPolicy: 'routingPolicy',\n  },\n  healthCheckConfig: {\n    type: 'type',\n\n    // the properties below are optional\n    failureThreshold: 123,\n    resourcePath: 'resourcePath',\n  },\n  healthCheckCustomConfig: {\n    failureThreshold: 123,\n  },\n  name: 'name',\n  namespaceId: 'namespaceId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  type: 'type',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CfnService"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CfnService",
        "@aws-cdk/aws-servicediscovery.CfnServiceProps",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnService = new servicediscovery.CfnService(this, 'MyCfnService', /* all optional props */ {\n  description: 'description',\n  dnsConfig: {\n    dnsRecords: [{\n      ttl: 123,\n      type: 'type',\n    }],\n\n    // the properties below are optional\n    namespaceId: 'namespaceId',\n    routingPolicy: 'routingPolicy',\n  },\n  healthCheckConfig: {\n    type: 'type',\n\n    // the properties below are optional\n    failureThreshold: 123,\n    resourcePath: 'resourcePath',\n  },\n  healthCheckCustomConfig: {\n    failureThreshold: 123,\n  },\n  name: 'name',\n  namespaceId: 'namespaceId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  type: 'type',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 13,
        "75": 23,
        "104": 1,
        "192": 2,
        "193": 6,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 19,
        "290": 1
      },
      "fqnsFingerprint": "4b1e0f7a989777839450faa36f914a1584799f031fe1c8abaccce14f60472d2a"
    },
    "8626d465b06a848c389b1e6d1ea52e6f58bb12ad187db70f98d3c9eb620a37b2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\ndns_config_property = servicediscovery.CfnService.DnsConfigProperty(\n    dns_records=[servicediscovery.CfnService.DnsRecordProperty(\n        ttl=123,\n        type=\"type\"\n    )],\n\n    # the properties below are optional\n    namespace_id=\"namespaceId\",\n    routing_policy=\"routingPolicy\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nDnsConfigProperty dnsConfigProperty = new DnsConfigProperty {\n    DnsRecords = new [] { new DnsRecordProperty {\n        Ttl = 123,\n        Type = \"type\"\n    } },\n\n    // the properties below are optional\n    NamespaceId = \"namespaceId\",\n    RoutingPolicy = \"routingPolicy\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nDnsConfigProperty dnsConfigProperty = DnsConfigProperty.builder()\n        .dnsRecords(List.of(DnsRecordProperty.builder()\n                .ttl(123)\n                .type(\"type\")\n                .build()))\n\n        // the properties below are optional\n        .namespaceId(\"namespaceId\")\n        .routingPolicy(\"routingPolicy\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\ndnsConfigProperty := &dnsConfigProperty{\n\tdnsRecords: []interface{}{\n\t\t&dnsRecordProperty{\n\t\t\tttl: jsii.Number(123),\n\t\t\ttype: jsii.String(\"type\"),\n\t\t},\n\t},\n\n\t// the properties below are optional\n\tnamespaceId: jsii.String(\"namespaceId\"),\n\troutingPolicy: jsii.String(\"routingPolicy\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst dnsConfigProperty: servicediscovery.CfnService.DnsConfigProperty = {\n  dnsRecords: [{\n    ttl: 123,\n    type: 'type',\n  }],\n\n  // the properties below are optional\n  namespaceId: 'namespaceId',\n  routingPolicy: 'routingPolicy',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CfnService.DnsConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CfnService.DnsConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dnsConfigProperty: servicediscovery.CfnService.DnsConfigProperty = {\n  dnsRecords: [{\n    ttl: 123,\n    type: 'type',\n  }],\n\n  // the properties below are optional\n  namespaceId: 'namespaceId',\n  routingPolicy: 'routingPolicy',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 10,
        "153": 2,
        "169": 1,
        "192": 1,
        "193": 2,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "25afbff46647e40196bccc8e232f6782582652bfcba4db714ff431cdd577639a"
    },
    "0649da5efc9845e397cb9d4cc4516a4b6e41ce3fc689905240d274b349520a2b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\ndns_record_property = servicediscovery.CfnService.DnsRecordProperty(\n    ttl=123,\n    type=\"type\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nDnsRecordProperty dnsRecordProperty = new DnsRecordProperty {\n    Ttl = 123,\n    Type = \"type\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nDnsRecordProperty dnsRecordProperty = DnsRecordProperty.builder()\n        .ttl(123)\n        .type(\"type\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\ndnsRecordProperty := &dnsRecordProperty{\n\tttl: jsii.Number(123),\n\ttype: jsii.String(\"type\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst dnsRecordProperty: servicediscovery.CfnService.DnsRecordProperty = {\n  ttl: 123,\n  type: 'type',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CfnService.DnsRecordProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CfnService.DnsRecordProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst dnsRecordProperty: servicediscovery.CfnService.DnsRecordProperty = {\n  ttl: 123,\n  type: 'type',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 2,
        "75": 7,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "318adbbd27205989747fd7bc115cd1b9f09e51094cfb4469b793903776f31ca7"
    },
    "30794db7fe421580b6a3b78943e12b7056b4e5e766ebf9d9047e0208f24ee5b1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\nhealth_check_config_property = servicediscovery.CfnService.HealthCheckConfigProperty(\n    type=\"type\",\n\n    # the properties below are optional\n    failure_threshold=123,\n    resource_path=\"resourcePath\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nHealthCheckConfigProperty healthCheckConfigProperty = new HealthCheckConfigProperty {\n    Type = \"type\",\n\n    // the properties below are optional\n    FailureThreshold = 123,\n    ResourcePath = \"resourcePath\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nHealthCheckConfigProperty healthCheckConfigProperty = HealthCheckConfigProperty.builder()\n        .type(\"type\")\n\n        // the properties below are optional\n        .failureThreshold(123)\n        .resourcePath(\"resourcePath\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\nhealthCheckConfigProperty := &healthCheckConfigProperty{\n\ttype: jsii.String(\"type\"),\n\n\t// the properties below are optional\n\tfailureThreshold: jsii.Number(123),\n\tresourcePath: jsii.String(\"resourcePath\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst healthCheckConfigProperty: servicediscovery.CfnService.HealthCheckConfigProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  failureThreshold: 123,\n  resourcePath: 'resourcePath',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CfnService.HealthCheckConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CfnService.HealthCheckConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst healthCheckConfigProperty: servicediscovery.CfnService.HealthCheckConfigProperty = {\n  type: 'type',\n\n  // the properties below are optional\n  failureThreshold: 123,\n  resourcePath: 'resourcePath',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 8,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "6344f2468530fc605b354de82ffd4e5c6790a2586f1dabba2c4a7283e6ed3650"
    },
    "2d6b6f42d98ea9af7de62b64134ab9d03a6febef68267c01c5f1191957b2efa2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\nhealth_check_custom_config_property = servicediscovery.CfnService.HealthCheckCustomConfigProperty(\n    failure_threshold=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nHealthCheckCustomConfigProperty healthCheckCustomConfigProperty = new HealthCheckCustomConfigProperty {\n    FailureThreshold = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nHealthCheckCustomConfigProperty healthCheckCustomConfigProperty = HealthCheckCustomConfigProperty.builder()\n        .failureThreshold(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\nhealthCheckCustomConfigProperty := &healthCheckCustomConfigProperty{\n\tfailureThreshold: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst healthCheckCustomConfigProperty: servicediscovery.CfnService.HealthCheckCustomConfigProperty = {\n  failureThreshold: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CfnService.HealthCheckCustomConfigProperty"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CfnService.HealthCheckCustomConfigProperty"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst healthCheckCustomConfigProperty: servicediscovery.CfnService.HealthCheckCustomConfigProperty = {\n  failureThreshold: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 6,
        "153": 2,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "3d3edba79fcd86b8f4628968a74cf05b68e891312aad79ccf6e5b02a4f570d4f"
    },
    "0345d8b33cd3a77823057e4a902ea4c79faa99ae19bb0155bf9e3bbb7a4628b1": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\ncfn_service_props = servicediscovery.CfnServiceProps(\n    description=\"description\",\n    dns_config=servicediscovery.CfnService.DnsConfigProperty(\n        dns_records=[servicediscovery.CfnService.DnsRecordProperty(\n            ttl=123,\n            type=\"type\"\n        )],\n\n        # the properties below are optional\n        namespace_id=\"namespaceId\",\n        routing_policy=\"routingPolicy\"\n    ),\n    health_check_config=servicediscovery.CfnService.HealthCheckConfigProperty(\n        type=\"type\",\n\n        # the properties below are optional\n        failure_threshold=123,\n        resource_path=\"resourcePath\"\n    ),\n    health_check_custom_config=servicediscovery.CfnService.HealthCheckCustomConfigProperty(\n        failure_threshold=123\n    ),\n    name=\"name\",\n    namespace_id=\"namespaceId\",\n    tags=[CfnTag(\n        key=\"key\",\n        value=\"value\"\n    )],\n    type=\"type\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nCfnServiceProps cfnServiceProps = new CfnServiceProps {\n    Description = \"description\",\n    DnsConfig = new DnsConfigProperty {\n        DnsRecords = new [] { new DnsRecordProperty {\n            Ttl = 123,\n            Type = \"type\"\n        } },\n\n        // the properties below are optional\n        NamespaceId = \"namespaceId\",\n        RoutingPolicy = \"routingPolicy\"\n    },\n    HealthCheckConfig = new HealthCheckConfigProperty {\n        Type = \"type\",\n\n        // the properties below are optional\n        FailureThreshold = 123,\n        ResourcePath = \"resourcePath\"\n    },\n    HealthCheckCustomConfig = new HealthCheckCustomConfigProperty {\n        FailureThreshold = 123\n    },\n    Name = \"name\",\n    NamespaceId = \"namespaceId\",\n    Tags = new [] { new CfnTag {\n        Key = \"key\",\n        Value = \"value\"\n    } },\n    Type = \"type\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nCfnServiceProps cfnServiceProps = CfnServiceProps.builder()\n        .description(\"description\")\n        .dnsConfig(DnsConfigProperty.builder()\n                .dnsRecords(List.of(DnsRecordProperty.builder()\n                        .ttl(123)\n                        .type(\"type\")\n                        .build()))\n\n                // the properties below are optional\n                .namespaceId(\"namespaceId\")\n                .routingPolicy(\"routingPolicy\")\n                .build())\n        .healthCheckConfig(HealthCheckConfigProperty.builder()\n                .type(\"type\")\n\n                // the properties below are optional\n                .failureThreshold(123)\n                .resourcePath(\"resourcePath\")\n                .build())\n        .healthCheckCustomConfig(HealthCheckCustomConfigProperty.builder()\n                .failureThreshold(123)\n                .build())\n        .name(\"name\")\n        .namespaceId(\"namespaceId\")\n        .tags(List.of(CfnTag.builder()\n                .key(\"key\")\n                .value(\"value\")\n                .build()))\n        .type(\"type\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\ncfnServiceProps := &cfnServiceProps{\n\tdescription: jsii.String(\"description\"),\n\tdnsConfig: &dnsConfigProperty{\n\t\tdnsRecords: []interface{}{\n\t\t\t&dnsRecordProperty{\n\t\t\t\tttl: jsii.Number(123),\n\t\t\t\ttype: jsii.String(\"type\"),\n\t\t\t},\n\t\t},\n\n\t\t// the properties below are optional\n\t\tnamespaceId: jsii.String(\"namespaceId\"),\n\t\troutingPolicy: jsii.String(\"routingPolicy\"),\n\t},\n\thealthCheckConfig: &healthCheckConfigProperty{\n\t\ttype: jsii.String(\"type\"),\n\n\t\t// the properties below are optional\n\t\tfailureThreshold: jsii.Number(123),\n\t\tresourcePath: jsii.String(\"resourcePath\"),\n\t},\n\thealthCheckCustomConfig: &healthCheckCustomConfigProperty{\n\t\tfailureThreshold: jsii.Number(123),\n\t},\n\tname: jsii.String(\"name\"),\n\tnamespaceId: jsii.String(\"namespaceId\"),\n\ttags: []cfnTag{\n\t\t&cfnTag{\n\t\t\tkey: jsii.String(\"key\"),\n\t\t\tvalue: jsii.String(\"value\"),\n\t\t},\n\t},\n\ttype: jsii.String(\"type\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst cfnServiceProps: servicediscovery.CfnServiceProps = {\n  description: 'description',\n  dnsConfig: {\n    dnsRecords: [{\n      ttl: 123,\n      type: 'type',\n    }],\n\n    // the properties below are optional\n    namespaceId: 'namespaceId',\n    routingPolicy: 'routingPolicy',\n  },\n  healthCheckConfig: {\n    type: 'type',\n\n    // the properties below are optional\n    failureThreshold: 123,\n    resourcePath: 'resourcePath',\n  },\n  healthCheckCustomConfig: {\n    failureThreshold: 123,\n  },\n  name: 'name',\n  namespaceId: 'namespaceId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  type: 'type',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CfnServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CfnServiceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cfnServiceProps: servicediscovery.CfnServiceProps = {\n  description: 'description',\n  dnsConfig: {\n    dnsRecords: [{\n      ttl: 123,\n      type: 'type',\n    }],\n\n    // the properties below are optional\n    namespaceId: 'namespaceId',\n    routingPolicy: 'routingPolicy',\n  },\n  healthCheckConfig: {\n    type: 'type',\n\n    // the properties below are optional\n    failureThreshold: 123,\n    resourcePath: 'resourcePath',\n  },\n  healthCheckCustomConfig: {\n    failureThreshold: 123,\n  },\n  name: 'name',\n  namespaceId: 'namespaceId',\n  tags: [{\n    key: 'key',\n    value: 'value',\n  }],\n  type: 'type',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 12,
        "75": 23,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 6,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 19,
        "290": 1
      },
      "fqnsFingerprint": "0d7da4b4a05fdc5bb1de30f61d9838079abd2dff6f5d4eba42e037b74b5d0075"
    },
    "12ccac6c181db6fa9953fb159f36865013c868aac41d53d0969afa5eefe8ce17": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\n# service: servicediscovery.Service\n\ncname_instance = servicediscovery.CnameInstance(self, \"MyCnameInstance\",\n    instance_cname=\"instanceCname\",\n    service=service,\n\n    # the properties below are optional\n    custom_attributes={\n        \"custom_attributes_key\": \"customAttributes\"\n    },\n    instance_id=\"instanceId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nService service;\n\nCnameInstance cnameInstance = new CnameInstance(this, \"MyCnameInstance\", new CnameInstanceProps {\n    InstanceCname = \"instanceCname\",\n    Service = service,\n\n    // the properties below are optional\n    CustomAttributes = new Dictionary<string, string> {\n        { \"customAttributesKey\", \"customAttributes\" }\n    },\n    InstanceId = \"instanceId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nService service;\n\nCnameInstance cnameInstance = CnameInstance.Builder.create(this, \"MyCnameInstance\")\n        .instanceCname(\"instanceCname\")\n        .service(service)\n\n        // the properties below are optional\n        .customAttributes(Map.of(\n                \"customAttributesKey\", \"customAttributes\"))\n        .instanceId(\"instanceId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\nvar service service\n\ncnameInstance := servicediscovery.NewCnameInstance(this, jsii.String(\"MyCnameInstance\"), &cnameInstanceProps{\n\tinstanceCname: jsii.String(\"instanceCname\"),\n\tservice: service,\n\n\t// the properties below are optional\n\tcustomAttributes: map[string]*string{\n\t\t\"customAttributesKey\": jsii.String(\"customAttributes\"),\n\t},\n\tinstanceId: jsii.String(\"instanceId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\nconst cnameInstance = new servicediscovery.CnameInstance(this, 'MyCnameInstance', {\n  instanceCname: 'instanceCname',\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CnameInstance"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CnameInstance",
        "@aws-cdk/aws-servicediscovery.CnameInstanceProps",
        "@aws-cdk/aws-servicediscovery.IService",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cnameInstance = new servicediscovery.CnameInstance(this, 'MyCnameInstance', {\n  instanceCname: 'instanceCname',\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 13,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "5fb18bf2604e93d1ed72086cb98cad049f3c378703956561ecc1c608b6517e2f"
    },
    "1aefb5af034f7b7f9cbe6d6bd3a2e0b0b1b6d0a0df0109bff813d808334dee59": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.PublicDnsNamespace(stack, \"Namespace\",\n    name=\"foobar.com\"\n)\n\nservice = namespace.create_service(\"Service\",\n    name=\"foo\",\n    dns_record_type=servicediscovery.DnsRecordType.CNAME,\n    dns_ttl=cdk.Duration.seconds(30)\n)\n\nservice.register_cname_instance(\"CnameInstance\",\n    instance_cname=\"service.pizza\"\n)\n\napp.synth()",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = new PublicDnsNamespace(stack, \"Namespace\", new PublicDnsNamespaceProps {\n    Name = \"foobar.com\"\n});\n\nService service = namespace.CreateService(\"Service\", new DnsServiceProps {\n    Name = \"foo\",\n    DnsRecordType = DnsRecordType.CNAME,\n    DnsTtl = Duration.Seconds(30)\n});\n\nservice.RegisterCnameInstance(\"CnameInstance\", new CnameInstanceBaseProps {\n    InstanceCname = \"service.pizza\"\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = PublicDnsNamespace.Builder.create(stack, \"Namespace\")\n        .name(\"foobar.com\")\n        .build();\n\nService service = namespace.createService(\"Service\", DnsServiceProps.builder()\n        .name(\"foo\")\n        .dnsRecordType(DnsRecordType.CNAME)\n        .dnsTtl(Duration.seconds(30))\n        .build());\n\nservice.registerCnameInstance(\"CnameInstance\", CnameInstanceBaseProps.builder()\n        .instanceCname(\"service.pizza\")\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nimport servicediscovery \"github.com/aws-samples/dummy/lib\"\n\napp := cdk.NewApp()\nstack := cdk.NewStack(app, jsii.String(\"aws-servicediscovery-integ\"))\n\nnamespace := servicediscovery.NewPublicDnsNamespace(stack, jsii.String(\"Namespace\"), &publicDnsNamespaceProps{\n\tname: jsii.String(\"foobar.com\"),\n})\n\nservice := namespace.createService(jsii.String(\"Service\"), &dnsServiceProps{\n\tname: jsii.String(\"foo\"),\n\tdnsRecordType: servicediscovery.dnsRecordType_CNAME,\n\tdnsTtl: cdk.duration.seconds(jsii.Number(30)),\n})\n\nservice.registerCnameInstance(jsii.String(\"CnameInstance\"), &cnameInstanceBaseProps{\n\tinstanceCname: jsii.String(\"service.pizza\"),\n})\n\napp.synth()",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.CNAME,\n  dnsTtl: cdk.Duration.seconds(30),\n});\n\nservice.registerCnameInstance('CnameInstance', {\n  instanceCname: 'service.pizza',\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CnameInstanceBaseProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CnameInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#CNAME",
        "@aws-cdk/aws-servicediscovery.DnsServiceProps",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerCnameInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth",
        "constructs.Construct"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.CNAME,\n  dnsTtl: cdk.Duration.seconds(30),\n});\n\nservice.registerCnameInstance('CnameInstance', {\n  instanceCname: 'service.pizza',\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 31,
        "193": 3,
        "194": 10,
        "196": 4,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "6b59d6a38491740c429aaf8dde6339e775bd12426dd9c78109bfecdb6bd7c4a8"
    },
    "63bdc33d3509668b6819f78a0c39e410313163fa82b3a1250d88af9a53cd18b4": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\n# service: servicediscovery.Service\n\ncname_instance_props = servicediscovery.CnameInstanceProps(\n    instance_cname=\"instanceCname\",\n    service=service,\n\n    # the properties below are optional\n    custom_attributes={\n        \"custom_attributes_key\": \"customAttributes\"\n    },\n    instance_id=\"instanceId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nService service;\n\nCnameInstanceProps cnameInstanceProps = new CnameInstanceProps {\n    InstanceCname = \"instanceCname\",\n    Service = service,\n\n    // the properties below are optional\n    CustomAttributes = new Dictionary<string, string> {\n        { \"customAttributesKey\", \"customAttributes\" }\n    },\n    InstanceId = \"instanceId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nService service;\n\nCnameInstanceProps cnameInstanceProps = CnameInstanceProps.builder()\n        .instanceCname(\"instanceCname\")\n        .service(service)\n\n        // the properties below are optional\n        .customAttributes(Map.of(\n                \"customAttributesKey\", \"customAttributes\"))\n        .instanceId(\"instanceId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\nvar service service\n\ncnameInstanceProps := &cnameInstanceProps{\n\tinstanceCname: jsii.String(\"instanceCname\"),\n\tservice: service,\n\n\t// the properties below are optional\n\tcustomAttributes: map[string]*string{\n\t\t\"customAttributesKey\": jsii.String(\"customAttributes\"),\n\t},\n\tinstanceId: jsii.String(\"instanceId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\nconst cnameInstanceProps: servicediscovery.CnameInstanceProps = {\n  instanceCname: 'instanceCname',\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.CnameInstanceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CnameInstanceProps",
        "@aws-cdk/aws-servicediscovery.IService"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst cnameInstanceProps: servicediscovery.CnameInstanceProps = {\n  instanceCname: 'instanceCname',\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 13,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "3389c2f21f96309897adb6ca9120c3b84bab355ba64e0eeceda04117bff86788"
    },
    "ca1cd5af3b6954e1f84e4fdd9a0c9ab43c0919637b46c3a08d4d461553811a0a": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.PublicDnsNamespace(stack, \"Namespace\",\n    name=\"foobar.com\"\n)\n\nservice = namespace.create_service(\"Service\",\n    name=\"foo\",\n    dns_record_type=servicediscovery.DnsRecordType.CNAME,\n    dns_ttl=cdk.Duration.seconds(30)\n)\n\nservice.register_cname_instance(\"CnameInstance\",\n    instance_cname=\"service.pizza\"\n)\n\napp.synth()",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = new PublicDnsNamespace(stack, \"Namespace\", new PublicDnsNamespaceProps {\n    Name = \"foobar.com\"\n});\n\nService service = namespace.CreateService(\"Service\", new DnsServiceProps {\n    Name = \"foo\",\n    DnsRecordType = DnsRecordType.CNAME,\n    DnsTtl = Duration.Seconds(30)\n});\n\nservice.RegisterCnameInstance(\"CnameInstance\", new CnameInstanceBaseProps {\n    InstanceCname = \"service.pizza\"\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = PublicDnsNamespace.Builder.create(stack, \"Namespace\")\n        .name(\"foobar.com\")\n        .build();\n\nService service = namespace.createService(\"Service\", DnsServiceProps.builder()\n        .name(\"foo\")\n        .dnsRecordType(DnsRecordType.CNAME)\n        .dnsTtl(Duration.seconds(30))\n        .build());\n\nservice.registerCnameInstance(\"CnameInstance\", CnameInstanceBaseProps.builder()\n        .instanceCname(\"service.pizza\")\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nimport servicediscovery \"github.com/aws-samples/dummy/lib\"\n\napp := cdk.NewApp()\nstack := cdk.NewStack(app, jsii.String(\"aws-servicediscovery-integ\"))\n\nnamespace := servicediscovery.NewPublicDnsNamespace(stack, jsii.String(\"Namespace\"), &publicDnsNamespaceProps{\n\tname: jsii.String(\"foobar.com\"),\n})\n\nservice := namespace.createService(jsii.String(\"Service\"), &dnsServiceProps{\n\tname: jsii.String(\"foo\"),\n\tdnsRecordType: servicediscovery.dnsRecordType_CNAME,\n\tdnsTtl: cdk.duration.seconds(jsii.Number(30)),\n})\n\nservice.registerCnameInstance(jsii.String(\"CnameInstance\"), &cnameInstanceBaseProps{\n\tinstanceCname: jsii.String(\"service.pizza\"),\n})\n\napp.synth()",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.CNAME,\n  dnsTtl: cdk.Duration.seconds(30),\n});\n\nservice.registerCnameInstance('CnameInstance', {\n  instanceCname: 'service.pizza',\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.DnsRecordType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.CnameInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#CNAME",
        "@aws-cdk/aws-servicediscovery.DnsServiceProps",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerCnameInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth",
        "constructs.Construct"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.CNAME,\n  dnsTtl: cdk.Duration.seconds(30),\n});\n\nservice.registerCnameInstance('CnameInstance', {\n  instanceCname: 'service.pizza',\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 9,
        "75": 31,
        "193": 3,
        "194": 10,
        "196": 4,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "6b59d6a38491740c429aaf8dde6339e775bd12426dd9c78109bfecdb6bd7c4a8"
    },
    "fbd5abeabee0e6168c82976eedfa71e0014f685b6281dc333d4b43e7520d22ba": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.PublicDnsNamespace(stack, \"Namespace\",\n    name=\"foobar.com\"\n)\n\nservice = namespace.create_service(\"Service\",\n    name=\"foo\",\n    dns_record_type=servicediscovery.DnsRecordType.A,\n    dns_ttl=cdk.Duration.seconds(30),\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTPS,\n        resource_path=\"/healthcheck\",\n        failure_threshold=2\n    )\n)\n\nservice.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\",\n    port=443\n)\n\napp.synth()",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = new PublicDnsNamespace(stack, \"Namespace\", new PublicDnsNamespaceProps {\n    Name = \"foobar.com\"\n});\n\nService service = namespace.CreateService(\"Service\", new DnsServiceProps {\n    Name = \"foo\",\n    DnsRecordType = DnsRecordType.A,\n    DnsTtl = Duration.Seconds(30),\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTPS,\n        ResourcePath = \"/healthcheck\",\n        FailureThreshold = 2\n    }\n});\n\nservice.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\",\n    Port = 443\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = PublicDnsNamespace.Builder.create(stack, \"Namespace\")\n        .name(\"foobar.com\")\n        .build();\n\nService service = namespace.createService(\"Service\", DnsServiceProps.builder()\n        .name(\"foo\")\n        .dnsRecordType(DnsRecordType.A)\n        .dnsTtl(Duration.seconds(30))\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTPS)\n                .resourcePath(\"/healthcheck\")\n                .failureThreshold(2)\n                .build())\n        .build());\n\nservice.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .port(443)\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nimport servicediscovery \"github.com/aws-samples/dummy/lib\"\n\napp := cdk.NewApp()\nstack := cdk.NewStack(app, jsii.String(\"aws-servicediscovery-integ\"))\n\nnamespace := servicediscovery.NewPublicDnsNamespace(stack, jsii.String(\"Namespace\"), &publicDnsNamespaceProps{\n\tname: jsii.String(\"foobar.com\"),\n})\n\nservice := namespace.createService(jsii.String(\"Service\"), &dnsServiceProps{\n\tname: jsii.String(\"foo\"),\n\tdnsRecordType: servicediscovery.dnsRecordType_A,\n\tdnsTtl: cdk.duration.seconds(jsii.Number(30)),\n\thealthCheck: &healthCheckConfig{\n\t\ttype: servicediscovery.healthCheckType_HTTPS,\n\t\tresourcePath: jsii.String(\"/healthcheck\"),\n\t\tfailureThreshold: jsii.Number(2),\n\t},\n})\n\nservice.registerIpInstance(jsii.String(\"IpInstance\"), &ipInstanceBaseProps{\n\tipv4: jsii.String(\"54.239.25.192\"),\n\tport: jsii.Number(443),\n})\n\napp.synth()",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.DnsServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A",
        "@aws-cdk/aws-servicediscovery.DnsServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTPS",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth",
        "constructs.Construct"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 10,
        "75": 39,
        "193": 4,
        "194": 12,
        "196": 4,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "a11de7b674b686c52abcf26f1d2594b432120358b1665a7d801817e0bfa4c590"
    },
    "bb427af4691362a378ef99f7c4b1b36bded0c6c0ff1bbf29b0b2d4ccf48148d5": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.HttpNamespace(stack, \"MyNamespace\",\n    name=\"covfefe\"\n)\n\nservice1 = namespace.create_service(\"NonIpService\",\n    description=\"service registering non-ip instances\"\n)\n\nservice1.register_non_ip_instance(\"NonIpInstance\",\n    custom_attributes={\"arn\": \"arn:aws:s3:::mybucket\"}\n)\n\nservice2 = namespace.create_service(\"IpService\",\n    description=\"service registering ip instances\",\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTP,\n        resource_path=\"/check\"\n    )\n)\n\nservice2.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\"\n)\n\napp.synth()",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = new HttpNamespace(stack, \"MyNamespace\", new HttpNamespaceProps {\n    Name = \"covfefe\"\n});\n\nService service1 = namespace.CreateService(\"NonIpService\", new BaseServiceProps {\n    Description = \"service registering non-ip instances\"\n});\n\nservice1.RegisterNonIpInstance(\"NonIpInstance\", new NonIpInstanceBaseProps {\n    CustomAttributes = new Dictionary<string, string> { { \"arn\", \"arn:aws:s3:::mybucket\" } }\n});\n\nService service2 = namespace.CreateService(\"IpService\", new BaseServiceProps {\n    Description = \"service registering ip instances\",\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTP,\n        ResourcePath = \"/check\"\n    }\n});\n\nservice2.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\"\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = HttpNamespace.Builder.create(stack, \"MyNamespace\")\n        .name(\"covfefe\")\n        .build();\n\nService service1 = namespace.createService(\"NonIpService\", BaseServiceProps.builder()\n        .description(\"service registering non-ip instances\")\n        .build());\n\nservice1.registerNonIpInstance(\"NonIpInstance\", NonIpInstanceBaseProps.builder()\n        .customAttributes(Map.of(\"arn\", \"arn:aws:s3:::mybucket\"))\n        .build());\n\nService service2 = namespace.createService(\"IpService\", BaseServiceProps.builder()\n        .description(\"service registering ip instances\")\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTP)\n                .resourcePath(\"/check\")\n                .build())\n        .build());\n\nservice2.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nimport servicediscovery \"github.com/aws-samples/dummy/lib\"\n\napp := cdk.NewApp()\nstack := cdk.NewStack(app, jsii.String(\"aws-servicediscovery-integ\"))\n\nnamespace := servicediscovery.NewHttpNamespace(stack, jsii.String(\"MyNamespace\"), &httpNamespaceProps{\n\tname: jsii.String(\"covfefe\"),\n})\n\nservice1 := namespace.createService(jsii.String(\"NonIpService\"), &baseServiceProps{\n\tdescription: jsii.String(\"service registering non-ip instances\"),\n})\n\nservice1.registerNonIpInstance(jsii.String(\"NonIpInstance\"), &nonIpInstanceBaseProps{\n\tcustomAttributes: map[string]*string{\n\t\t\"arn\": jsii.String(\"arn:aws:s3:::mybucket\"),\n\t},\n})\n\nservice2 := namespace.createService(jsii.String(\"IpService\"), &baseServiceProps{\n\tdescription: jsii.String(\"service registering ip instances\"),\n\thealthCheck: &healthCheckConfig{\n\t\ttype: servicediscovery.healthCheckType_HTTP,\n\t\tresourcePath: jsii.String(\"/check\"),\n\t},\n})\n\nservice2.registerIpInstance(jsii.String(\"IpInstance\"), &ipInstanceBaseProps{\n\tipv4: jsii.String(\"54.239.25.192\"),\n})\n\napp.synth()",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.HealthCheckConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.BaseServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTP",
        "@aws-cdk/aws-servicediscovery.HttpNamespace",
        "@aws-cdk/aws-servicediscovery.HttpNamespace#createService",
        "@aws-cdk/aws-servicediscovery.HttpNamespaceProps",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.NonIpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/aws-servicediscovery.Service#registerNonIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth",
        "constructs.Construct"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 14,
        "75": 37,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "2fdec27985c7d2150be70aad26b202434f2945d76988c6c8d3043d51e938e5a8"
    },
    "fae06dda15e2198ba270b1ee95eaf49b88f8d6d06cfa094d119d8829ad548068": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\nhealth_check_custom_config = servicediscovery.HealthCheckCustomConfig(\n    failure_threshold=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nHealthCheckCustomConfig healthCheckCustomConfig = new HealthCheckCustomConfig {\n    FailureThreshold = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nHealthCheckCustomConfig healthCheckCustomConfig = HealthCheckCustomConfig.builder()\n        .failureThreshold(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\nhealthCheckCustomConfig := &healthCheckCustomConfig{\n\tfailureThreshold: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst healthCheckCustomConfig: servicediscovery.HealthCheckCustomConfig = {\n  failureThreshold: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.HealthCheckCustomConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.HealthCheckCustomConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst healthCheckCustomConfig: servicediscovery.HealthCheckCustomConfig = {\n  failureThreshold: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 5,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "13dcfa3d386370ee1b693b2e60735ae4f131a0951d5975fee9e382f4384f3d03"
    },
    "c06e2b06c70e73dfef62db72f24dfa740bf67bb2a87c0f068c5f0a49b76e5a28": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.HttpNamespace(stack, \"MyNamespace\",\n    name=\"covfefe\"\n)\n\nservice1 = namespace.create_service(\"NonIpService\",\n    description=\"service registering non-ip instances\"\n)\n\nservice1.register_non_ip_instance(\"NonIpInstance\",\n    custom_attributes={\"arn\": \"arn:aws:s3:::mybucket\"}\n)\n\nservice2 = namespace.create_service(\"IpService\",\n    description=\"service registering ip instances\",\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTP,\n        resource_path=\"/check\"\n    )\n)\n\nservice2.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\"\n)\n\napp.synth()",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = new HttpNamespace(stack, \"MyNamespace\", new HttpNamespaceProps {\n    Name = \"covfefe\"\n});\n\nService service1 = namespace.CreateService(\"NonIpService\", new BaseServiceProps {\n    Description = \"service registering non-ip instances\"\n});\n\nservice1.RegisterNonIpInstance(\"NonIpInstance\", new NonIpInstanceBaseProps {\n    CustomAttributes = new Dictionary<string, string> { { \"arn\", \"arn:aws:s3:::mybucket\" } }\n});\n\nService service2 = namespace.CreateService(\"IpService\", new BaseServiceProps {\n    Description = \"service registering ip instances\",\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTP,\n        ResourcePath = \"/check\"\n    }\n});\n\nservice2.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\"\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = HttpNamespace.Builder.create(stack, \"MyNamespace\")\n        .name(\"covfefe\")\n        .build();\n\nService service1 = namespace.createService(\"NonIpService\", BaseServiceProps.builder()\n        .description(\"service registering non-ip instances\")\n        .build());\n\nservice1.registerNonIpInstance(\"NonIpInstance\", NonIpInstanceBaseProps.builder()\n        .customAttributes(Map.of(\"arn\", \"arn:aws:s3:::mybucket\"))\n        .build());\n\nService service2 = namespace.createService(\"IpService\", BaseServiceProps.builder()\n        .description(\"service registering ip instances\")\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTP)\n                .resourcePath(\"/check\")\n                .build())\n        .build());\n\nservice2.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nimport servicediscovery \"github.com/aws-samples/dummy/lib\"\n\napp := cdk.NewApp()\nstack := cdk.NewStack(app, jsii.String(\"aws-servicediscovery-integ\"))\n\nnamespace := servicediscovery.NewHttpNamespace(stack, jsii.String(\"MyNamespace\"), &httpNamespaceProps{\n\tname: jsii.String(\"covfefe\"),\n})\n\nservice1 := namespace.createService(jsii.String(\"NonIpService\"), &baseServiceProps{\n\tdescription: jsii.String(\"service registering non-ip instances\"),\n})\n\nservice1.registerNonIpInstance(jsii.String(\"NonIpInstance\"), &nonIpInstanceBaseProps{\n\tcustomAttributes: map[string]*string{\n\t\t\"arn\": jsii.String(\"arn:aws:s3:::mybucket\"),\n\t},\n})\n\nservice2 := namespace.createService(jsii.String(\"IpService\"), &baseServiceProps{\n\tdescription: jsii.String(\"service registering ip instances\"),\n\thealthCheck: &healthCheckConfig{\n\t\ttype: servicediscovery.healthCheckType_HTTP,\n\t\tresourcePath: jsii.String(\"/check\"),\n\t},\n})\n\nservice2.registerIpInstance(jsii.String(\"IpInstance\"), &ipInstanceBaseProps{\n\tipv4: jsii.String(\"54.239.25.192\"),\n})\n\napp.synth()",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.HealthCheckType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.BaseServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTP",
        "@aws-cdk/aws-servicediscovery.HttpNamespace",
        "@aws-cdk/aws-servicediscovery.HttpNamespace#createService",
        "@aws-cdk/aws-servicediscovery.HttpNamespaceProps",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.NonIpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/aws-servicediscovery.Service#registerNonIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth",
        "constructs.Construct"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 14,
        "75": 37,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "2fdec27985c7d2150be70aad26b202434f2945d76988c6c8d3043d51e938e5a8"
    },
    "94f29a542517c7c584e7df8892ab0c138ad3bd652e97869108254df3ca07cd83": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.HttpNamespace(stack, \"MyNamespace\",\n    name=\"covfefe\"\n)\n\nservice1 = namespace.create_service(\"NonIpService\",\n    description=\"service registering non-ip instances\"\n)\n\nservice1.register_non_ip_instance(\"NonIpInstance\",\n    custom_attributes={\"arn\": \"arn:aws:s3:::mybucket\"}\n)\n\nservice2 = namespace.create_service(\"IpService\",\n    description=\"service registering ip instances\",\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTP,\n        resource_path=\"/check\"\n    )\n)\n\nservice2.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\"\n)\n\napp.synth()",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = new HttpNamespace(stack, \"MyNamespace\", new HttpNamespaceProps {\n    Name = \"covfefe\"\n});\n\nService service1 = namespace.CreateService(\"NonIpService\", new BaseServiceProps {\n    Description = \"service registering non-ip instances\"\n});\n\nservice1.RegisterNonIpInstance(\"NonIpInstance\", new NonIpInstanceBaseProps {\n    CustomAttributes = new Dictionary<string, string> { { \"arn\", \"arn:aws:s3:::mybucket\" } }\n});\n\nService service2 = namespace.CreateService(\"IpService\", new BaseServiceProps {\n    Description = \"service registering ip instances\",\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTP,\n        ResourcePath = \"/check\"\n    }\n});\n\nservice2.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\"\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = HttpNamespace.Builder.create(stack, \"MyNamespace\")\n        .name(\"covfefe\")\n        .build();\n\nService service1 = namespace.createService(\"NonIpService\", BaseServiceProps.builder()\n        .description(\"service registering non-ip instances\")\n        .build());\n\nservice1.registerNonIpInstance(\"NonIpInstance\", NonIpInstanceBaseProps.builder()\n        .customAttributes(Map.of(\"arn\", \"arn:aws:s3:::mybucket\"))\n        .build());\n\nService service2 = namespace.createService(\"IpService\", BaseServiceProps.builder()\n        .description(\"service registering ip instances\")\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTP)\n                .resourcePath(\"/check\")\n                .build())\n        .build());\n\nservice2.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nimport servicediscovery \"github.com/aws-samples/dummy/lib\"\n\napp := cdk.NewApp()\nstack := cdk.NewStack(app, jsii.String(\"aws-servicediscovery-integ\"))\n\nnamespace := servicediscovery.NewHttpNamespace(stack, jsii.String(\"MyNamespace\"), &httpNamespaceProps{\n\tname: jsii.String(\"covfefe\"),\n})\n\nservice1 := namespace.createService(jsii.String(\"NonIpService\"), &baseServiceProps{\n\tdescription: jsii.String(\"service registering non-ip instances\"),\n})\n\nservice1.registerNonIpInstance(jsii.String(\"NonIpInstance\"), &nonIpInstanceBaseProps{\n\tcustomAttributes: map[string]*string{\n\t\t\"arn\": jsii.String(\"arn:aws:s3:::mybucket\"),\n\t},\n})\n\nservice2 := namespace.createService(jsii.String(\"IpService\"), &baseServiceProps{\n\tdescription: jsii.String(\"service registering ip instances\"),\n\thealthCheck: &healthCheckConfig{\n\t\ttype: servicediscovery.healthCheckType_HTTP,\n\t\tresourcePath: jsii.String(\"/check\"),\n\t},\n})\n\nservice2.registerIpInstance(jsii.String(\"IpInstance\"), &ipInstanceBaseProps{\n\tipv4: jsii.String(\"54.239.25.192\"),\n})\n\napp.synth()",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.HttpNamespace"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.BaseServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTP",
        "@aws-cdk/aws-servicediscovery.HttpNamespace",
        "@aws-cdk/aws-servicediscovery.HttpNamespace#createService",
        "@aws-cdk/aws-servicediscovery.HttpNamespaceProps",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.NonIpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/aws-servicediscovery.Service#registerNonIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth",
        "constructs.Construct"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 14,
        "75": 37,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "2fdec27985c7d2150be70aad26b202434f2945d76988c6c8d3043d51e938e5a8"
    },
    "585d386132508335c871f4eae41029ad42caf42fba76f9ae8844fed001e63cd2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\nhttp_namespace_attributes = servicediscovery.HttpNamespaceAttributes(\n    namespace_arn=\"namespaceArn\",\n    namespace_id=\"namespaceId\",\n    namespace_name=\"namespaceName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nHttpNamespaceAttributes httpNamespaceAttributes = new HttpNamespaceAttributes {\n    NamespaceArn = \"namespaceArn\",\n    NamespaceId = \"namespaceId\",\n    NamespaceName = \"namespaceName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nHttpNamespaceAttributes httpNamespaceAttributes = HttpNamespaceAttributes.builder()\n        .namespaceArn(\"namespaceArn\")\n        .namespaceId(\"namespaceId\")\n        .namespaceName(\"namespaceName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\nhttpNamespaceAttributes := &httpNamespaceAttributes{\n\tnamespaceArn: jsii.String(\"namespaceArn\"),\n\tnamespaceId: jsii.String(\"namespaceId\"),\n\tnamespaceName: jsii.String(\"namespaceName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst httpNamespaceAttributes: servicediscovery.HttpNamespaceAttributes = {\n  namespaceArn: 'namespaceArn',\n  namespaceId: 'namespaceId',\n  namespaceName: 'namespaceName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.HttpNamespaceAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.HttpNamespaceAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpNamespaceAttributes: servicediscovery.HttpNamespaceAttributes = {\n  namespaceArn: 'namespaceArn',\n  namespaceId: 'namespaceId',\n  namespaceName: 'namespaceName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "73d99d729332984dbabf4a879e9a450c1611fb59b3812ae9182c4065f20dbde9"
    },
    "da753bb37bc91d279efcc9f69c35515d34793ad3b5ecfd33cc523618b82eb3e1": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.HttpNamespace(stack, \"MyNamespace\",\n    name=\"covfefe\"\n)\n\nservice1 = namespace.create_service(\"NonIpService\",\n    description=\"service registering non-ip instances\"\n)\n\nservice1.register_non_ip_instance(\"NonIpInstance\",\n    custom_attributes={\"arn\": \"arn:aws:s3:::mybucket\"}\n)\n\nservice2 = namespace.create_service(\"IpService\",\n    description=\"service registering ip instances\",\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTP,\n        resource_path=\"/check\"\n    )\n)\n\nservice2.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\"\n)\n\napp.synth()",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = new HttpNamespace(stack, \"MyNamespace\", new HttpNamespaceProps {\n    Name = \"covfefe\"\n});\n\nService service1 = namespace.CreateService(\"NonIpService\", new BaseServiceProps {\n    Description = \"service registering non-ip instances\"\n});\n\nservice1.RegisterNonIpInstance(\"NonIpInstance\", new NonIpInstanceBaseProps {\n    CustomAttributes = new Dictionary<string, string> { { \"arn\", \"arn:aws:s3:::mybucket\" } }\n});\n\nService service2 = namespace.CreateService(\"IpService\", new BaseServiceProps {\n    Description = \"service registering ip instances\",\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTP,\n        ResourcePath = \"/check\"\n    }\n});\n\nservice2.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\"\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = HttpNamespace.Builder.create(stack, \"MyNamespace\")\n        .name(\"covfefe\")\n        .build();\n\nService service1 = namespace.createService(\"NonIpService\", BaseServiceProps.builder()\n        .description(\"service registering non-ip instances\")\n        .build());\n\nservice1.registerNonIpInstance(\"NonIpInstance\", NonIpInstanceBaseProps.builder()\n        .customAttributes(Map.of(\"arn\", \"arn:aws:s3:::mybucket\"))\n        .build());\n\nService service2 = namespace.createService(\"IpService\", BaseServiceProps.builder()\n        .description(\"service registering ip instances\")\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTP)\n                .resourcePath(\"/check\")\n                .build())\n        .build());\n\nservice2.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nimport servicediscovery \"github.com/aws-samples/dummy/lib\"\n\napp := cdk.NewApp()\nstack := cdk.NewStack(app, jsii.String(\"aws-servicediscovery-integ\"))\n\nnamespace := servicediscovery.NewHttpNamespace(stack, jsii.String(\"MyNamespace\"), &httpNamespaceProps{\n\tname: jsii.String(\"covfefe\"),\n})\n\nservice1 := namespace.createService(jsii.String(\"NonIpService\"), &baseServiceProps{\n\tdescription: jsii.String(\"service registering non-ip instances\"),\n})\n\nservice1.registerNonIpInstance(jsii.String(\"NonIpInstance\"), &nonIpInstanceBaseProps{\n\tcustomAttributes: map[string]*string{\n\t\t\"arn\": jsii.String(\"arn:aws:s3:::mybucket\"),\n\t},\n})\n\nservice2 := namespace.createService(jsii.String(\"IpService\"), &baseServiceProps{\n\tdescription: jsii.String(\"service registering ip instances\"),\n\thealthCheck: &healthCheckConfig{\n\t\ttype: servicediscovery.healthCheckType_HTTP,\n\t\tresourcePath: jsii.String(\"/check\"),\n\t},\n})\n\nservice2.registerIpInstance(jsii.String(\"IpInstance\"), &ipInstanceBaseProps{\n\tipv4: jsii.String(\"54.239.25.192\"),\n})\n\napp.synth()",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.HttpNamespaceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.BaseServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTP",
        "@aws-cdk/aws-servicediscovery.HttpNamespace",
        "@aws-cdk/aws-servicediscovery.HttpNamespace#createService",
        "@aws-cdk/aws-servicediscovery.HttpNamespaceProps",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.NonIpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/aws-servicediscovery.Service#registerNonIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth",
        "constructs.Construct"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 14,
        "75": 37,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "2fdec27985c7d2150be70aad26b202434f2945d76988c6c8d3043d51e938e5a8"
    },
    "de1b5c4e910650c4b38d6f2a2a826c17a1acec8b8b7421be4c74ec2a2c1a4216": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\n# service: servicediscovery.Service\n\nip_instance = servicediscovery.IpInstance(self, \"MyIpInstance\",\n    service=service,\n\n    # the properties below are optional\n    custom_attributes={\n        \"custom_attributes_key\": \"customAttributes\"\n    },\n    instance_id=\"instanceId\",\n    ipv4=\"ipv4\",\n    ipv6=\"ipv6\",\n    port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nService service;\n\nIpInstance ipInstance = new IpInstance(this, \"MyIpInstance\", new IpInstanceProps {\n    Service = service,\n\n    // the properties below are optional\n    CustomAttributes = new Dictionary<string, string> {\n        { \"customAttributesKey\", \"customAttributes\" }\n    },\n    InstanceId = \"instanceId\",\n    Ipv4 = \"ipv4\",\n    Ipv6 = \"ipv6\",\n    Port = 123\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nService service;\n\nIpInstance ipInstance = IpInstance.Builder.create(this, \"MyIpInstance\")\n        .service(service)\n\n        // the properties below are optional\n        .customAttributes(Map.of(\n                \"customAttributesKey\", \"customAttributes\"))\n        .instanceId(\"instanceId\")\n        .ipv4(\"ipv4\")\n        .ipv6(\"ipv6\")\n        .port(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\nvar service service\n\nipInstance := servicediscovery.NewIpInstance(this, jsii.String(\"MyIpInstance\"), &ipInstanceProps{\n\tservice: service,\n\n\t// the properties below are optional\n\tcustomAttributes: map[string]*string{\n\t\t\"customAttributesKey\": jsii.String(\"customAttributes\"),\n\t},\n\tinstanceId: jsii.String(\"instanceId\"),\n\tipv4: jsii.String(\"ipv4\"),\n\tipv6: jsii.String(\"ipv6\"),\n\tport: jsii.Number(123),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\nconst ipInstance = new servicediscovery.IpInstance(this, 'MyIpInstance', {\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n  ipv4: 'ipv4',\n  ipv6: 'ipv6',\n  port: 123,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.IpInstance"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.IService",
        "@aws-cdk/aws-servicediscovery.IpInstance",
        "@aws-cdk/aws-servicediscovery.IpInstanceProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ipInstance = new servicediscovery.IpInstance(this, 'MyIpInstance', {\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n  ipv4: 'ipv4',\n  ipv6: 'ipv6',\n  port: 123,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 6,
        "75": 15,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "a5d040e3cf559a603575ace5ba4387bb77cf71bad698a6264f00cb4960d03afe"
    },
    "b440f8cfa7fcf5c9a7a6c1529aa16115e77e2e26307d1bc2e333f7dcaee67dfb": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.HttpNamespace(stack, \"MyNamespace\",\n    name=\"covfefe\"\n)\n\nservice1 = namespace.create_service(\"NonIpService\",\n    description=\"service registering non-ip instances\"\n)\n\nservice1.register_non_ip_instance(\"NonIpInstance\",\n    custom_attributes={\"arn\": \"arn:aws:s3:::mybucket\"}\n)\n\nservice2 = namespace.create_service(\"IpService\",\n    description=\"service registering ip instances\",\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTP,\n        resource_path=\"/check\"\n    )\n)\n\nservice2.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\"\n)\n\napp.synth()",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = new HttpNamespace(stack, \"MyNamespace\", new HttpNamespaceProps {\n    Name = \"covfefe\"\n});\n\nService service1 = namespace.CreateService(\"NonIpService\", new BaseServiceProps {\n    Description = \"service registering non-ip instances\"\n});\n\nservice1.RegisterNonIpInstance(\"NonIpInstance\", new NonIpInstanceBaseProps {\n    CustomAttributes = new Dictionary<string, string> { { \"arn\", \"arn:aws:s3:::mybucket\" } }\n});\n\nService service2 = namespace.CreateService(\"IpService\", new BaseServiceProps {\n    Description = \"service registering ip instances\",\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTP,\n        ResourcePath = \"/check\"\n    }\n});\n\nservice2.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\"\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = HttpNamespace.Builder.create(stack, \"MyNamespace\")\n        .name(\"covfefe\")\n        .build();\n\nService service1 = namespace.createService(\"NonIpService\", BaseServiceProps.builder()\n        .description(\"service registering non-ip instances\")\n        .build());\n\nservice1.registerNonIpInstance(\"NonIpInstance\", NonIpInstanceBaseProps.builder()\n        .customAttributes(Map.of(\"arn\", \"arn:aws:s3:::mybucket\"))\n        .build());\n\nService service2 = namespace.createService(\"IpService\", BaseServiceProps.builder()\n        .description(\"service registering ip instances\")\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTP)\n                .resourcePath(\"/check\")\n                .build())\n        .build());\n\nservice2.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nimport servicediscovery \"github.com/aws-samples/dummy/lib\"\n\napp := cdk.NewApp()\nstack := cdk.NewStack(app, jsii.String(\"aws-servicediscovery-integ\"))\n\nnamespace := servicediscovery.NewHttpNamespace(stack, jsii.String(\"MyNamespace\"), &httpNamespaceProps{\n\tname: jsii.String(\"covfefe\"),\n})\n\nservice1 := namespace.createService(jsii.String(\"NonIpService\"), &baseServiceProps{\n\tdescription: jsii.String(\"service registering non-ip instances\"),\n})\n\nservice1.registerNonIpInstance(jsii.String(\"NonIpInstance\"), &nonIpInstanceBaseProps{\n\tcustomAttributes: map[string]*string{\n\t\t\"arn\": jsii.String(\"arn:aws:s3:::mybucket\"),\n\t},\n})\n\nservice2 := namespace.createService(jsii.String(\"IpService\"), &baseServiceProps{\n\tdescription: jsii.String(\"service registering ip instances\"),\n\thealthCheck: &healthCheckConfig{\n\t\ttype: servicediscovery.healthCheckType_HTTP,\n\t\tresourcePath: jsii.String(\"/check\"),\n\t},\n})\n\nservice2.registerIpInstance(jsii.String(\"IpInstance\"), &ipInstanceBaseProps{\n\tipv4: jsii.String(\"54.239.25.192\"),\n})\n\napp.synth()",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.BaseServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTP",
        "@aws-cdk/aws-servicediscovery.HttpNamespace",
        "@aws-cdk/aws-servicediscovery.HttpNamespace#createService",
        "@aws-cdk/aws-servicediscovery.HttpNamespaceProps",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.NonIpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/aws-servicediscovery.Service#registerNonIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth",
        "constructs.Construct"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 14,
        "75": 37,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "2fdec27985c7d2150be70aad26b202434f2945d76988c6c8d3043d51e938e5a8"
    },
    "791548badd36a9dde7f0017621c6f08da124ed7840e7b177cb58b3d2eb925a9f": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\n# service: servicediscovery.Service\n\nip_instance_props = servicediscovery.IpInstanceProps(\n    service=service,\n\n    # the properties below are optional\n    custom_attributes={\n        \"custom_attributes_key\": \"customAttributes\"\n    },\n    instance_id=\"instanceId\",\n    ipv4=\"ipv4\",\n    ipv6=\"ipv6\",\n    port=123\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nService service;\n\nIpInstanceProps ipInstanceProps = new IpInstanceProps {\n    Service = service,\n\n    // the properties below are optional\n    CustomAttributes = new Dictionary<string, string> {\n        { \"customAttributesKey\", \"customAttributes\" }\n    },\n    InstanceId = \"instanceId\",\n    Ipv4 = \"ipv4\",\n    Ipv6 = \"ipv6\",\n    Port = 123\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nService service;\n\nIpInstanceProps ipInstanceProps = IpInstanceProps.builder()\n        .service(service)\n\n        // the properties below are optional\n        .customAttributes(Map.of(\n                \"customAttributesKey\", \"customAttributes\"))\n        .instanceId(\"instanceId\")\n        .ipv4(\"ipv4\")\n        .ipv6(\"ipv6\")\n        .port(123)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\nvar service service\n\nipInstanceProps := &ipInstanceProps{\n\tservice: service,\n\n\t// the properties below are optional\n\tcustomAttributes: map[string]*string{\n\t\t\"customAttributesKey\": jsii.String(\"customAttributes\"),\n\t},\n\tinstanceId: jsii.String(\"instanceId\"),\n\tipv4: jsii.String(\"ipv4\"),\n\tipv6: jsii.String(\"ipv6\"),\n\tport: jsii.Number(123),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\nconst ipInstanceProps: servicediscovery.IpInstanceProps = {\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n  ipv4: 'ipv4',\n  ipv6: 'ipv6',\n  port: 123,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.IpInstanceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.IService",
        "@aws-cdk/aws-servicediscovery.IpInstanceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst ipInstanceProps: servicediscovery.IpInstanceProps = {\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n  ipv4: 'ipv4',\n  ipv6: 'ipv6',\n  port: 123,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 15,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 7,
        "290": 1
      },
      "fqnsFingerprint": "ea5e884347a0c4ea734d0b5ca2ebb9c8a41cce9d6f2bde3fedc9fc9a67adb9ee"
    },
    "3ebf0bcee424d0446c88529deb71ce613b34363b48dd68b33ba9f519abab0c5b": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\n# service: servicediscovery.Service\n\nnon_ip_instance = servicediscovery.NonIpInstance(self, \"MyNonIpInstance\",\n    service=service,\n\n    # the properties below are optional\n    custom_attributes={\n        \"custom_attributes_key\": \"customAttributes\"\n    },\n    instance_id=\"instanceId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nService service;\n\nNonIpInstance nonIpInstance = new NonIpInstance(this, \"MyNonIpInstance\", new NonIpInstanceProps {\n    Service = service,\n\n    // the properties below are optional\n    CustomAttributes = new Dictionary<string, string> {\n        { \"customAttributesKey\", \"customAttributes\" }\n    },\n    InstanceId = \"instanceId\"\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nService service;\n\nNonIpInstance nonIpInstance = NonIpInstance.Builder.create(this, \"MyNonIpInstance\")\n        .service(service)\n\n        // the properties below are optional\n        .customAttributes(Map.of(\n                \"customAttributesKey\", \"customAttributes\"))\n        .instanceId(\"instanceId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\nvar service service\n\nnonIpInstance := servicediscovery.NewNonIpInstance(this, jsii.String(\"MyNonIpInstance\"), &nonIpInstanceProps{\n\tservice: service,\n\n\t// the properties below are optional\n\tcustomAttributes: map[string]*string{\n\t\t\"customAttributesKey\": jsii.String(\"customAttributes\"),\n\t},\n\tinstanceId: jsii.String(\"instanceId\"),\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\nconst nonIpInstance = new servicediscovery.NonIpInstance(this, 'MyNonIpInstance', {\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.NonIpInstance"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.IService",
        "@aws-cdk/aws-servicediscovery.NonIpInstance",
        "@aws-cdk/aws-servicediscovery.NonIpInstanceProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst nonIpInstance = new servicediscovery.NonIpInstance(this, 'MyNonIpInstance', {\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "273efbad64ad91f1002abcd9169b99b54cebee818046ebfa9ce7d6aa6922fcf3"
    },
    "ebe1c68f03d1309f821b9d0002a26463bd4759026b9478e1de2b28c15554bac6": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.HttpNamespace(stack, \"MyNamespace\",\n    name=\"covfefe\"\n)\n\nservice1 = namespace.create_service(\"NonIpService\",\n    description=\"service registering non-ip instances\"\n)\n\nservice1.register_non_ip_instance(\"NonIpInstance\",\n    custom_attributes={\"arn\": \"arn:aws:s3:::mybucket\"}\n)\n\nservice2 = namespace.create_service(\"IpService\",\n    description=\"service registering ip instances\",\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTP,\n        resource_path=\"/check\"\n    )\n)\n\nservice2.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\"\n)\n\napp.synth()",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = new HttpNamespace(stack, \"MyNamespace\", new HttpNamespaceProps {\n    Name = \"covfefe\"\n});\n\nService service1 = namespace.CreateService(\"NonIpService\", new BaseServiceProps {\n    Description = \"service registering non-ip instances\"\n});\n\nservice1.RegisterNonIpInstance(\"NonIpInstance\", new NonIpInstanceBaseProps {\n    CustomAttributes = new Dictionary<string, string> { { \"arn\", \"arn:aws:s3:::mybucket\" } }\n});\n\nService service2 = namespace.CreateService(\"IpService\", new BaseServiceProps {\n    Description = \"service registering ip instances\",\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTP,\n        ResourcePath = \"/check\"\n    }\n});\n\nservice2.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\"\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nHttpNamespace namespace = HttpNamespace.Builder.create(stack, \"MyNamespace\")\n        .name(\"covfefe\")\n        .build();\n\nService service1 = namespace.createService(\"NonIpService\", BaseServiceProps.builder()\n        .description(\"service registering non-ip instances\")\n        .build());\n\nservice1.registerNonIpInstance(\"NonIpInstance\", NonIpInstanceBaseProps.builder()\n        .customAttributes(Map.of(\"arn\", \"arn:aws:s3:::mybucket\"))\n        .build());\n\nService service2 = namespace.createService(\"IpService\", BaseServiceProps.builder()\n        .description(\"service registering ip instances\")\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTP)\n                .resourcePath(\"/check\")\n                .build())\n        .build());\n\nservice2.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nimport servicediscovery \"github.com/aws-samples/dummy/lib\"\n\napp := cdk.NewApp()\nstack := cdk.NewStack(app, jsii.String(\"aws-servicediscovery-integ\"))\n\nnamespace := servicediscovery.NewHttpNamespace(stack, jsii.String(\"MyNamespace\"), &httpNamespaceProps{\n\tname: jsii.String(\"covfefe\"),\n})\n\nservice1 := namespace.createService(jsii.String(\"NonIpService\"), &baseServiceProps{\n\tdescription: jsii.String(\"service registering non-ip instances\"),\n})\n\nservice1.registerNonIpInstance(jsii.String(\"NonIpInstance\"), &nonIpInstanceBaseProps{\n\tcustomAttributes: map[string]*string{\n\t\t\"arn\": jsii.String(\"arn:aws:s3:::mybucket\"),\n\t},\n})\n\nservice2 := namespace.createService(jsii.String(\"IpService\"), &baseServiceProps{\n\tdescription: jsii.String(\"service registering ip instances\"),\n\thealthCheck: &healthCheckConfig{\n\t\ttype: servicediscovery.healthCheckType_HTTP,\n\t\tresourcePath: jsii.String(\"/check\"),\n\t},\n})\n\nservice2.registerIpInstance(jsii.String(\"IpInstance\"), &ipInstanceBaseProps{\n\tipv4: jsii.String(\"54.239.25.192\"),\n})\n\napp.synth()",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.NonIpInstanceBaseProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.BaseServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTP",
        "@aws-cdk/aws-servicediscovery.HttpNamespace",
        "@aws-cdk/aws-servicediscovery.HttpNamespace#createService",
        "@aws-cdk/aws-servicediscovery.HttpNamespaceProps",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.NonIpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/aws-servicediscovery.Service#registerNonIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth",
        "constructs.Construct"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.HttpNamespace(stack, 'MyNamespace', {\n  name: 'covfefe',\n});\n\nconst service1 = namespace.createService('NonIpService', {\n  description: 'service registering non-ip instances',\n});\n\nservice1.registerNonIpInstance('NonIpInstance', {\n  customAttributes: { arn: 'arn:aws:s3:::mybucket' },\n});\n\nconst service2 = namespace.createService('IpService', {\n  description: 'service registering ip instances',\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTP,\n    resourcePath: '/check',\n  },\n});\n\nservice2.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "10": 14,
        "75": 37,
        "193": 7,
        "194": 10,
        "196": 5,
        "197": 3,
        "225": 5,
        "226": 3,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 9,
        "290": 1
      },
      "fqnsFingerprint": "2fdec27985c7d2150be70aad26b202434f2945d76988c6c8d3043d51e938e5a8"
    },
    "eb57557923fa583fc1715680bfaaca13c307904a757ac7a26ff2961cfd97674a": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\n# service: servicediscovery.Service\n\nnon_ip_instance_props = servicediscovery.NonIpInstanceProps(\n    service=service,\n\n    # the properties below are optional\n    custom_attributes={\n        \"custom_attributes_key\": \"customAttributes\"\n    },\n    instance_id=\"instanceId\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nService service;\n\nNonIpInstanceProps nonIpInstanceProps = new NonIpInstanceProps {\n    Service = service,\n\n    // the properties below are optional\n    CustomAttributes = new Dictionary<string, string> {\n        { \"customAttributesKey\", \"customAttributes\" }\n    },\n    InstanceId = \"instanceId\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nService service;\n\nNonIpInstanceProps nonIpInstanceProps = NonIpInstanceProps.builder()\n        .service(service)\n\n        // the properties below are optional\n        .customAttributes(Map.of(\n                \"customAttributesKey\", \"customAttributes\"))\n        .instanceId(\"instanceId\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\nvar service service\n\nnonIpInstanceProps := &nonIpInstanceProps{\n\tservice: service,\n\n\t// the properties below are optional\n\tcustomAttributes: map[string]*string{\n\t\t\"customAttributesKey\": jsii.String(\"customAttributes\"),\n\t},\n\tinstanceId: jsii.String(\"instanceId\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\nconst nonIpInstanceProps: servicediscovery.NonIpInstanceProps = {\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.NonIpInstanceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.IService",
        "@aws-cdk/aws-servicediscovery.NonIpInstanceProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const service: servicediscovery.Service;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst nonIpInstanceProps: servicediscovery.NonIpInstanceProps = {\n  service: service,\n\n  // the properties below are optional\n  customAttributes: {\n    customAttributesKey: 'customAttributes',\n  },\n  instanceId: 'instanceId',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 12,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "28928bb29c6209bf5417e0ad2fe4571eeaa0864d1cebef192143c844b251f285"
    },
    "32a632c581c601a06843e58dc78d0f474bfafd2970043341c94f1de458445c0e": {
      "translations": {
        "python": {
          "source": "# mesh: appmesh.Mesh\n# Cloud Map service discovery is currently required for host ejection by outlier detection\nvpc = ec2.Vpc(self, \"vpc\")\nnamespace = cloudmap.PrivateDnsNamespace(self, \"test-namespace\",\n    vpc=vpc,\n    name=\"domain.local\"\n)\nservice = namespace.create_service(\"Svc\")\nnode = mesh.add_virtual_node(\"virtual-node\",\n    service_discovery=appmesh.ServiceDiscovery.cloud_map(service),\n    listeners=[appmesh.VirtualNodeListener.http(\n        outlier_detection=appmesh.OutlierDetection(\n            base_ejection_duration=cdk.Duration.seconds(10),\n            interval=cdk.Duration.seconds(30),\n            max_ejection_percent=50,\n            max_server_errors=5\n        )\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Mesh mesh;\n// Cloud Map service discovery is currently required for host ejection by outlier detection\nVpc vpc = new Vpc(this, \"vpc\");\nPrivateDnsNamespace namespace = new PrivateDnsNamespace(this, \"test-namespace\", new PrivateDnsNamespaceProps {\n    Vpc = vpc,\n    Name = \"domain.local\"\n});\nService service = namespace.CreateService(\"Svc\");\nVirtualNode node = mesh.AddVirtualNode(\"virtual-node\", new VirtualNodeBaseProps {\n    ServiceDiscovery = ServiceDiscovery.CloudMap(service),\n    Listeners = new [] { VirtualNodeListener.Http(new HttpVirtualNodeListenerOptions {\n        OutlierDetection = new OutlierDetection {\n            BaseEjectionDuration = Duration.Seconds(10),\n            Interval = Duration.Seconds(30),\n            MaxEjectionPercent = 50,\n            MaxServerErrors = 5\n        }\n    }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Mesh mesh;\n// Cloud Map service discovery is currently required for host ejection by outlier detection\nVpc vpc = new Vpc(this, \"vpc\");\nPrivateDnsNamespace namespace = PrivateDnsNamespace.Builder.create(this, \"test-namespace\")\n        .vpc(vpc)\n        .name(\"domain.local\")\n        .build();\nService service = namespace.createService(\"Svc\");\nVirtualNode node = mesh.addVirtualNode(\"virtual-node\", VirtualNodeBaseProps.builder()\n        .serviceDiscovery(ServiceDiscovery.cloudMap(service))\n        .listeners(List.of(VirtualNodeListener.http(HttpVirtualNodeListenerOptions.builder()\n                .outlierDetection(OutlierDetection.builder()\n                        .baseEjectionDuration(Duration.seconds(10))\n                        .interval(Duration.seconds(30))\n                        .maxEjectionPercent(50)\n                        .maxServerErrors(5)\n                        .build())\n                .build())))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var mesh mesh\n// Cloud Map service discovery is currently required for host ejection by outlier detection\nvpc := ec2.NewVpc(this, jsii.String(\"vpc\"))\nnamespace := cloudmap.NewPrivateDnsNamespace(this, jsii.String(\"test-namespace\"), &privateDnsNamespaceProps{\n\tvpc: vpc,\n\tname: jsii.String(\"domain.local\"),\n})\nservice := namespace.createService(jsii.String(\"Svc\"))\nnode := mesh.addVirtualNode(jsii.String(\"virtual-node\"), &virtualNodeBaseProps{\n\tserviceDiscovery: appmesh.serviceDiscovery.cloudMap(service),\n\tlisteners: []virtualNodeListener{\n\t\tappmesh.*virtualNodeListener.http(&httpVirtualNodeListenerOptions{\n\t\t\toutlierDetection: &outlierDetection{\n\t\t\t\tbaseEjectionDuration: cdk.duration.seconds(jsii.Number(10)),\n\t\t\t\tinterval: cdk.*duration.seconds(jsii.Number(30)),\n\t\t\t\tmaxEjectionPercent: jsii.Number(50),\n\t\t\t\tmaxServerErrors: jsii.Number(5),\n\t\t\t},\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// Cloud Map service discovery is currently required for host ejection by outlier detection\nconst vpc = new ec2.Vpc(this, 'vpc');\nconst namespace = new cloudmap.PrivateDnsNamespace(this, 'test-namespace', {\n    vpc,\n    name: 'domain.local',\n});\nconst service = namespace.createService('Svc');\n\ndeclare const mesh: appmesh.Mesh;\nconst node = mesh.addVirtualNode('virtual-node', {\n  serviceDiscovery: appmesh.ServiceDiscovery.cloudMap(service),\n  listeners: [appmesh.VirtualNodeListener.http({\n    outlierDetection: {\n      baseEjectionDuration: cdk.Duration.seconds(10),\n      interval: cdk.Duration.seconds(30),\n      maxEjectionPercent: 50,\n      maxServerErrors: 5,\n    },\n  })],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.PrivateDnsNamespace"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appmesh.HttpVirtualNodeListenerOptions",
        "@aws-cdk/aws-appmesh.OutlierDetection",
        "@aws-cdk/aws-appmesh.ServiceDiscovery",
        "@aws-cdk/aws-appmesh.ServiceDiscovery#cloudMap",
        "@aws-cdk/aws-appmesh.VirtualNode",
        "@aws-cdk/aws-appmesh.VirtualNodeBaseProps",
        "@aws-cdk/aws-appmesh.VirtualNodeListener",
        "@aws-cdk/aws-appmesh.VirtualNodeListener#http",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-servicediscovery.IService",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const mesh: appmesh.Mesh;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport acmpca = require('@aws-cdk/aws-acmpca');\nimport appmesh = require('@aws-cdk/aws-appmesh');\nimport certificatemanager = require('@aws-cdk/aws-certificatemanager');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Cloud Map service discovery is currently required for host ejection by outlier detection\nconst vpc = new ec2.Vpc(this, 'vpc');\nconst namespace = new cloudmap.PrivateDnsNamespace(this, 'test-namespace', {\n    vpc,\n    name: 'domain.local',\n});\nconst service = namespace.createService('Svc');\nconst node = mesh.addVirtualNode('virtual-node', {\n  serviceDiscovery: appmesh.ServiceDiscovery.cloudMap(service),\n  listeners: [appmesh.VirtualNodeListener.http({\n    outlierDetection: {\n      baseEjectionDuration: cdk.Duration.seconds(10),\n      interval: cdk.Duration.seconds(30),\n      maxEjectionPercent: 50,\n      maxServerErrors: 5,\n    },\n  })],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 5,
        "75": 37,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 12,
        "196": 6,
        "197": 2,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 8,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "89c4808c7ed8f110ef269ce7476228a3590cfe0c0f851817dd504e806f793bfe"
    },
    "a467c7871bb38d9b758d39f37e168448e3db9e65335a62259b77b4c6d1574f5d": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\nprivate_dns_namespace_attributes = servicediscovery.PrivateDnsNamespaceAttributes(\n    namespace_arn=\"namespaceArn\",\n    namespace_id=\"namespaceId\",\n    namespace_name=\"namespaceName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nPrivateDnsNamespaceAttributes privateDnsNamespaceAttributes = new PrivateDnsNamespaceAttributes {\n    NamespaceArn = \"namespaceArn\",\n    NamespaceId = \"namespaceId\",\n    NamespaceName = \"namespaceName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nPrivateDnsNamespaceAttributes privateDnsNamespaceAttributes = PrivateDnsNamespaceAttributes.builder()\n        .namespaceArn(\"namespaceArn\")\n        .namespaceId(\"namespaceId\")\n        .namespaceName(\"namespaceName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\nprivateDnsNamespaceAttributes := &privateDnsNamespaceAttributes{\n\tnamespaceArn: jsii.String(\"namespaceArn\"),\n\tnamespaceId: jsii.String(\"namespaceId\"),\n\tnamespaceName: jsii.String(\"namespaceName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst privateDnsNamespaceAttributes: servicediscovery.PrivateDnsNamespaceAttributes = {\n  namespaceArn: 'namespaceArn',\n  namespaceId: 'namespaceId',\n  namespaceName: 'namespaceName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.PrivateDnsNamespaceAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespaceAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst privateDnsNamespaceAttributes: servicediscovery.PrivateDnsNamespaceAttributes = {\n  namespaceArn: 'namespaceArn',\n  namespaceId: 'namespaceId',\n  namespaceName: 'namespaceName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "8c0f2273b345d1a2c4c4cf0e138dc34af1d75dc5fedcede9ecd162beb87d9f15"
    },
    "6bae69cb22372392824a98321f41ed46ce689841e167efbc0b44fd4f05c4f784": {
      "translations": {
        "python": {
          "source": "# mesh: appmesh.Mesh\n# Cloud Map service discovery is currently required for host ejection by outlier detection\nvpc = ec2.Vpc(self, \"vpc\")\nnamespace = cloudmap.PrivateDnsNamespace(self, \"test-namespace\",\n    vpc=vpc,\n    name=\"domain.local\"\n)\nservice = namespace.create_service(\"Svc\")\nnode = mesh.add_virtual_node(\"virtual-node\",\n    service_discovery=appmesh.ServiceDiscovery.cloud_map(service),\n    listeners=[appmesh.VirtualNodeListener.http(\n        outlier_detection=appmesh.OutlierDetection(\n            base_ejection_duration=cdk.Duration.seconds(10),\n            interval=cdk.Duration.seconds(30),\n            max_ejection_percent=50,\n            max_server_errors=5\n        )\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Mesh mesh;\n// Cloud Map service discovery is currently required for host ejection by outlier detection\nVpc vpc = new Vpc(this, \"vpc\");\nPrivateDnsNamespace namespace = new PrivateDnsNamespace(this, \"test-namespace\", new PrivateDnsNamespaceProps {\n    Vpc = vpc,\n    Name = \"domain.local\"\n});\nService service = namespace.CreateService(\"Svc\");\nVirtualNode node = mesh.AddVirtualNode(\"virtual-node\", new VirtualNodeBaseProps {\n    ServiceDiscovery = ServiceDiscovery.CloudMap(service),\n    Listeners = new [] { VirtualNodeListener.Http(new HttpVirtualNodeListenerOptions {\n        OutlierDetection = new OutlierDetection {\n            BaseEjectionDuration = Duration.Seconds(10),\n            Interval = Duration.Seconds(30),\n            MaxEjectionPercent = 50,\n            MaxServerErrors = 5\n        }\n    }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "Mesh mesh;\n// Cloud Map service discovery is currently required for host ejection by outlier detection\nVpc vpc = new Vpc(this, \"vpc\");\nPrivateDnsNamespace namespace = PrivateDnsNamespace.Builder.create(this, \"test-namespace\")\n        .vpc(vpc)\n        .name(\"domain.local\")\n        .build();\nService service = namespace.createService(\"Svc\");\nVirtualNode node = mesh.addVirtualNode(\"virtual-node\", VirtualNodeBaseProps.builder()\n        .serviceDiscovery(ServiceDiscovery.cloudMap(service))\n        .listeners(List.of(VirtualNodeListener.http(HttpVirtualNodeListenerOptions.builder()\n                .outlierDetection(OutlierDetection.builder()\n                        .baseEjectionDuration(Duration.seconds(10))\n                        .interval(Duration.seconds(30))\n                        .maxEjectionPercent(50)\n                        .maxServerErrors(5)\n                        .build())\n                .build())))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var mesh mesh\n// Cloud Map service discovery is currently required for host ejection by outlier detection\nvpc := ec2.NewVpc(this, jsii.String(\"vpc\"))\nnamespace := cloudmap.NewPrivateDnsNamespace(this, jsii.String(\"test-namespace\"), &privateDnsNamespaceProps{\n\tvpc: vpc,\n\tname: jsii.String(\"domain.local\"),\n})\nservice := namespace.createService(jsii.String(\"Svc\"))\nnode := mesh.addVirtualNode(jsii.String(\"virtual-node\"), &virtualNodeBaseProps{\n\tserviceDiscovery: appmesh.serviceDiscovery.cloudMap(service),\n\tlisteners: []virtualNodeListener{\n\t\tappmesh.*virtualNodeListener.http(&httpVirtualNodeListenerOptions{\n\t\t\toutlierDetection: &outlierDetection{\n\t\t\t\tbaseEjectionDuration: cdk.duration.seconds(jsii.Number(10)),\n\t\t\t\tinterval: cdk.*duration.seconds(jsii.Number(30)),\n\t\t\t\tmaxEjectionPercent: jsii.Number(50),\n\t\t\t\tmaxServerErrors: jsii.Number(5),\n\t\t\t},\n\t\t}),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "// Cloud Map service discovery is currently required for host ejection by outlier detection\nconst vpc = new ec2.Vpc(this, 'vpc');\nconst namespace = new cloudmap.PrivateDnsNamespace(this, 'test-namespace', {\n    vpc,\n    name: 'domain.local',\n});\nconst service = namespace.createService('Svc');\n\ndeclare const mesh: appmesh.Mesh;\nconst node = mesh.addVirtualNode('virtual-node', {\n  serviceDiscovery: appmesh.ServiceDiscovery.cloudMap(service),\n  listeners: [appmesh.VirtualNodeListener.http({\n    outlierDetection: {\n      baseEjectionDuration: cdk.Duration.seconds(10),\n      interval: cdk.Duration.seconds(30),\n      maxEjectionPercent: 50,\n      maxServerErrors: 5,\n    },\n  })],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.PrivateDnsNamespaceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-appmesh.HttpVirtualNodeListenerOptions",
        "@aws-cdk/aws-appmesh.OutlierDetection",
        "@aws-cdk/aws-appmesh.ServiceDiscovery",
        "@aws-cdk/aws-appmesh.ServiceDiscovery#cloudMap",
        "@aws-cdk/aws-appmesh.VirtualNode",
        "@aws-cdk/aws-appmesh.VirtualNodeBaseProps",
        "@aws-cdk/aws-appmesh.VirtualNodeListener",
        "@aws-cdk/aws-appmesh.VirtualNodeListener#http",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-servicediscovery.IService",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n\n\ndeclare const mesh: appmesh.Mesh;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport cdk = require('@aws-cdk/core');\nimport acmpca = require('@aws-cdk/aws-acmpca');\nimport appmesh = require('@aws-cdk/aws-appmesh');\nimport certificatemanager = require('@aws-cdk/aws-certificatemanager');\nimport cloudmap = require('@aws-cdk/aws-servicediscovery');\nimport ec2 = require('@aws-cdk/aws-ec2');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Cloud Map service discovery is currently required for host ejection by outlier detection\nconst vpc = new ec2.Vpc(this, 'vpc');\nconst namespace = new cloudmap.PrivateDnsNamespace(this, 'test-namespace', {\n    vpc,\n    name: 'domain.local',\n});\nconst service = namespace.createService('Svc');\nconst node = mesh.addVirtualNode('virtual-node', {\n  serviceDiscovery: appmesh.ServiceDiscovery.cloudMap(service),\n  listeners: [appmesh.VirtualNodeListener.http({\n    outlierDetection: {\n      baseEjectionDuration: cdk.Duration.seconds(10),\n      interval: cdk.Duration.seconds(30),\n      maxEjectionPercent: 50,\n      maxServerErrors: 5,\n    },\n  })],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 5,
        "75": 37,
        "104": 2,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 4,
        "194": 12,
        "196": 6,
        "197": 2,
        "225": 5,
        "242": 5,
        "243": 5,
        "281": 8,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "89c4808c7ed8f110ef269ce7476228a3590cfe0c0f851817dd504e806f793bfe"
    },
    "1b3883f63571a9c07469d69ce52e0377871743d2b6abd451313a937e28224a4c": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.PublicDnsNamespace(stack, \"Namespace\",\n    name=\"foobar.com\"\n)\n\nservice = namespace.create_service(\"Service\",\n    name=\"foo\",\n    dns_record_type=servicediscovery.DnsRecordType.A,\n    dns_ttl=cdk.Duration.seconds(30),\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTPS,\n        resource_path=\"/healthcheck\",\n        failure_threshold=2\n    )\n)\n\nservice.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\",\n    port=443\n)\n\napp.synth()",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = new PublicDnsNamespace(stack, \"Namespace\", new PublicDnsNamespaceProps {\n    Name = \"foobar.com\"\n});\n\nService service = namespace.CreateService(\"Service\", new DnsServiceProps {\n    Name = \"foo\",\n    DnsRecordType = DnsRecordType.A,\n    DnsTtl = Duration.Seconds(30),\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTPS,\n        ResourcePath = \"/healthcheck\",\n        FailureThreshold = 2\n    }\n});\n\nservice.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\",\n    Port = 443\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = PublicDnsNamespace.Builder.create(stack, \"Namespace\")\n        .name(\"foobar.com\")\n        .build();\n\nService service = namespace.createService(\"Service\", DnsServiceProps.builder()\n        .name(\"foo\")\n        .dnsRecordType(DnsRecordType.A)\n        .dnsTtl(Duration.seconds(30))\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTPS)\n                .resourcePath(\"/healthcheck\")\n                .failureThreshold(2)\n                .build())\n        .build());\n\nservice.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .port(443)\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nimport servicediscovery \"github.com/aws-samples/dummy/lib\"\n\napp := cdk.NewApp()\nstack := cdk.NewStack(app, jsii.String(\"aws-servicediscovery-integ\"))\n\nnamespace := servicediscovery.NewPublicDnsNamespace(stack, jsii.String(\"Namespace\"), &publicDnsNamespaceProps{\n\tname: jsii.String(\"foobar.com\"),\n})\n\nservice := namespace.createService(jsii.String(\"Service\"), &dnsServiceProps{\n\tname: jsii.String(\"foo\"),\n\tdnsRecordType: servicediscovery.dnsRecordType_A,\n\tdnsTtl: cdk.duration.seconds(jsii.Number(30)),\n\thealthCheck: &healthCheckConfig{\n\t\ttype: servicediscovery.healthCheckType_HTTPS,\n\t\tresourcePath: jsii.String(\"/healthcheck\"),\n\t\tfailureThreshold: jsii.Number(2),\n\t},\n})\n\nservice.registerIpInstance(jsii.String(\"IpInstance\"), &ipInstanceBaseProps{\n\tipv4: jsii.String(\"54.239.25.192\"),\n\tport: jsii.Number(443),\n})\n\napp.synth()",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.PublicDnsNamespace"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A",
        "@aws-cdk/aws-servicediscovery.DnsServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTPS",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth",
        "constructs.Construct"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 10,
        "75": 39,
        "193": 4,
        "194": 12,
        "196": 4,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "a11de7b674b686c52abcf26f1d2594b432120358b1665a7d801817e0bfa4c590"
    },
    "5350fd1f3e355165deebc402f80ec56d4f0fda97aa859a8e30c4f58efbe93201": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\npublic_dns_namespace_attributes = servicediscovery.PublicDnsNamespaceAttributes(\n    namespace_arn=\"namespaceArn\",\n    namespace_id=\"namespaceId\",\n    namespace_name=\"namespaceName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nPublicDnsNamespaceAttributes publicDnsNamespaceAttributes = new PublicDnsNamespaceAttributes {\n    NamespaceArn = \"namespaceArn\",\n    NamespaceId = \"namespaceId\",\n    NamespaceName = \"namespaceName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nPublicDnsNamespaceAttributes publicDnsNamespaceAttributes = PublicDnsNamespaceAttributes.builder()\n        .namespaceArn(\"namespaceArn\")\n        .namespaceId(\"namespaceId\")\n        .namespaceName(\"namespaceName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\npublicDnsNamespaceAttributes := &publicDnsNamespaceAttributes{\n\tnamespaceArn: jsii.String(\"namespaceArn\"),\n\tnamespaceId: jsii.String(\"namespaceId\"),\n\tnamespaceName: jsii.String(\"namespaceName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nconst publicDnsNamespaceAttributes: servicediscovery.PublicDnsNamespaceAttributes = {\n  namespaceArn: 'namespaceArn',\n  namespaceId: 'namespaceId',\n  namespaceName: 'namespaceName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst publicDnsNamespaceAttributes: servicediscovery.PublicDnsNamespaceAttributes = {\n  namespaceArn: 'namespaceArn',\n  namespaceId: 'namespaceId',\n  namespaceName: 'namespaceName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 7,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "918315600404f62e529359606b560053723baea5da024dfc3dc4d1d4d132660b"
    },
    "b18effd040c4fe16efbf9ee8845c5b544a3101f2dcaff46f8955c12520dff9dd": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.PublicDnsNamespace(stack, \"Namespace\",\n    name=\"foobar.com\"\n)\n\nservice = namespace.create_service(\"Service\",\n    name=\"foo\",\n    dns_record_type=servicediscovery.DnsRecordType.A,\n    dns_ttl=cdk.Duration.seconds(30),\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTPS,\n        resource_path=\"/healthcheck\",\n        failure_threshold=2\n    )\n)\n\nservice.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\",\n    port=443\n)\n\napp.synth()",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = new PublicDnsNamespace(stack, \"Namespace\", new PublicDnsNamespaceProps {\n    Name = \"foobar.com\"\n});\n\nService service = namespace.CreateService(\"Service\", new DnsServiceProps {\n    Name = \"foo\",\n    DnsRecordType = DnsRecordType.A,\n    DnsTtl = Duration.Seconds(30),\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTPS,\n        ResourcePath = \"/healthcheck\",\n        FailureThreshold = 2\n    }\n});\n\nservice.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\",\n    Port = 443\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = PublicDnsNamespace.Builder.create(stack, \"Namespace\")\n        .name(\"foobar.com\")\n        .build();\n\nService service = namespace.createService(\"Service\", DnsServiceProps.builder()\n        .name(\"foo\")\n        .dnsRecordType(DnsRecordType.A)\n        .dnsTtl(Duration.seconds(30))\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTPS)\n                .resourcePath(\"/healthcheck\")\n                .failureThreshold(2)\n                .build())\n        .build());\n\nservice.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .port(443)\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nimport servicediscovery \"github.com/aws-samples/dummy/lib\"\n\napp := cdk.NewApp()\nstack := cdk.NewStack(app, jsii.String(\"aws-servicediscovery-integ\"))\n\nnamespace := servicediscovery.NewPublicDnsNamespace(stack, jsii.String(\"Namespace\"), &publicDnsNamespaceProps{\n\tname: jsii.String(\"foobar.com\"),\n})\n\nservice := namespace.createService(jsii.String(\"Service\"), &dnsServiceProps{\n\tname: jsii.String(\"foo\"),\n\tdnsRecordType: servicediscovery.dnsRecordType_A,\n\tdnsTtl: cdk.duration.seconds(jsii.Number(30)),\n\thealthCheck: &healthCheckConfig{\n\t\ttype: servicediscovery.healthCheckType_HTTPS,\n\t\tresourcePath: jsii.String(\"/healthcheck\"),\n\t\tfailureThreshold: jsii.Number(2),\n\t},\n})\n\nservice.registerIpInstance(jsii.String(\"IpInstance\"), &ipInstanceBaseProps{\n\tipv4: jsii.String(\"54.239.25.192\"),\n\tport: jsii.Number(443),\n})\n\napp.synth()",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A",
        "@aws-cdk/aws-servicediscovery.DnsServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTPS",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth",
        "constructs.Construct"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 10,
        "75": 39,
        "193": 4,
        "194": 12,
        "196": 4,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "a11de7b674b686c52abcf26f1d2594b432120358b1665a7d801817e0bfa4c590"
    },
    "691b1303a8f191a88fd2c8f0dceff86ac41b717b2c6231981b98bbf0c63c0b98": {
      "translations": {
        "python": {
          "source": "import aws_cdk.core as cdk\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\napp = cdk.App()\nstack = cdk.Stack(app, \"aws-servicediscovery-integ\")\n\nnamespace = servicediscovery.PublicDnsNamespace(stack, \"Namespace\",\n    name=\"foobar.com\"\n)\n\nservice = namespace.create_service(\"Service\",\n    name=\"foo\",\n    dns_record_type=servicediscovery.DnsRecordType.A,\n    dns_ttl=cdk.Duration.seconds(30),\n    health_check=servicediscovery.HealthCheckConfig(\n        type=servicediscovery.HealthCheckType.HTTPS,\n        resource_path=\"/healthcheck\",\n        failure_threshold=2\n    )\n)\n\nservice.register_ip_instance(\"IpInstance\",\n    ipv4=\"54.239.25.192\",\n    port=443\n)\n\napp.synth()",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = new PublicDnsNamespace(stack, \"Namespace\", new PublicDnsNamespaceProps {\n    Name = \"foobar.com\"\n});\n\nService service = namespace.CreateService(\"Service\", new DnsServiceProps {\n    Name = \"foo\",\n    DnsRecordType = DnsRecordType.A,\n    DnsTtl = Duration.Seconds(30),\n    HealthCheck = new HealthCheckConfig {\n        Type = HealthCheckType.HTTPS,\n        ResourcePath = \"/healthcheck\",\n        FailureThreshold = 2\n    }\n});\n\nservice.RegisterIpInstance(\"IpInstance\", new IpInstanceBaseProps {\n    Ipv4 = \"54.239.25.192\",\n    Port = 443\n});\n\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.*;\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nApp app = new App();\nStack stack = new Stack(app, \"aws-servicediscovery-integ\");\n\nPublicDnsNamespace namespace = PublicDnsNamespace.Builder.create(stack, \"Namespace\")\n        .name(\"foobar.com\")\n        .build();\n\nService service = namespace.createService(\"Service\", DnsServiceProps.builder()\n        .name(\"foo\")\n        .dnsRecordType(DnsRecordType.A)\n        .dnsTtl(Duration.seconds(30))\n        .healthCheck(HealthCheckConfig.builder()\n                .type(HealthCheckType.HTTPS)\n                .resourcePath(\"/healthcheck\")\n                .failureThreshold(2)\n                .build())\n        .build());\n\nservice.registerIpInstance(\"IpInstance\", IpInstanceBaseProps.builder()\n        .ipv4(\"54.239.25.192\")\n        .port(443)\n        .build());\n\napp.synth();",
          "version": "1"
        },
        "go": {
          "source": "import cdk \"github.com/aws-samples/dummy/awscdkcore\"\nimport servicediscovery \"github.com/aws-samples/dummy/lib\"\n\napp := cdk.NewApp()\nstack := cdk.NewStack(app, jsii.String(\"aws-servicediscovery-integ\"))\n\nnamespace := servicediscovery.NewPublicDnsNamespace(stack, jsii.String(\"Namespace\"), &publicDnsNamespaceProps{\n\tname: jsii.String(\"foobar.com\"),\n})\n\nservice := namespace.createService(jsii.String(\"Service\"), &dnsServiceProps{\n\tname: jsii.String(\"foo\"),\n\tdnsRecordType: servicediscovery.dnsRecordType_A,\n\tdnsTtl: cdk.duration.seconds(jsii.Number(30)),\n\thealthCheck: &healthCheckConfig{\n\t\ttype: servicediscovery.healthCheckType_HTTPS,\n\t\tresourcePath: jsii.String(\"/healthcheck\"),\n\t\tfailureThreshold: jsii.Number(2),\n\t},\n})\n\nservice.registerIpInstance(jsii.String(\"IpInstance\"), &ipInstanceBaseProps{\n\tipv4: jsii.String(\"54.239.25.192\"),\n\tport: jsii.Number(443),\n})\n\napp.synth()",
          "version": "1"
        },
        "$": {
          "source": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.Service"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A",
        "@aws-cdk/aws-servicediscovery.DnsServiceProps",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTPS",
        "@aws-cdk/aws-servicediscovery.IpInstanceBaseProps",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PublicDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "@aws-cdk/aws-servicediscovery.Service#registerIpInstance",
        "@aws-cdk/core.App",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#seconds",
        "@aws-cdk/core.Stack",
        "@aws-cdk/core.Stage#synth",
        "constructs.Construct"
      ],
      "fullSource": "import * as cdk from '@aws-cdk/core';\nimport * as servicediscovery from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-servicediscovery-integ');\n\nconst namespace = new servicediscovery.PublicDnsNamespace(stack, 'Namespace', {\n  name: 'foobar.com',\n});\n\nconst service = namespace.createService('Service', {\n  name: 'foo',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.seconds(30),\n  healthCheck: {\n    type: servicediscovery.HealthCheckType.HTTPS,\n    resourcePath: '/healthcheck',\n    failureThreshold: 2,\n  },\n});\n\nservice.registerIpInstance('IpInstance', {\n  ipv4: '54.239.25.192',\n  port: 443,\n});\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 10,
        "75": 39,
        "193": 4,
        "194": 12,
        "196": 4,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 10,
        "290": 1
      },
      "fqnsFingerprint": "a11de7b674b686c52abcf26f1d2594b432120358b1665a7d801817e0bfa4c590"
    },
    "e302a6c1efb7f81a021adf1d6ec666c4aaced3108a6eed1e58041f01f29405e8": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\n\n# namespace: servicediscovery.INamespace\n\nservice_attributes = servicediscovery.ServiceAttributes(\n    dns_record_type=servicediscovery.DnsRecordType.A,\n    namespace=namespace,\n    routing_policy=servicediscovery.RoutingPolicy.WEIGHTED,\n    service_arn=\"serviceArn\",\n    service_id=\"serviceId\",\n    service_name=\"serviceName\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\n\nINamespace namespace;\n\nServiceAttributes serviceAttributes = new ServiceAttributes {\n    DnsRecordType = DnsRecordType.A,\n    Namespace = namespace,\n    RoutingPolicy = RoutingPolicy.WEIGHTED,\n    ServiceArn = \"serviceArn\",\n    ServiceId = \"serviceId\",\n    ServiceName = \"serviceName\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\n\nINamespace namespace;\n\nServiceAttributes serviceAttributes = ServiceAttributes.builder()\n        .dnsRecordType(DnsRecordType.A)\n        .namespace(namespace)\n        .routingPolicy(RoutingPolicy.WEIGHTED)\n        .serviceArn(\"serviceArn\")\n        .serviceId(\"serviceId\")\n        .serviceName(\"serviceName\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\n\nvar namespace iNamespace\n\nserviceAttributes := &serviceAttributes{\n\tdnsRecordType: servicediscovery.dnsRecordType_A,\n\tnamespace: namespace,\n\troutingPolicy: servicediscovery.routingPolicy_WEIGHTED,\n\tserviceArn: jsii.String(\"serviceArn\"),\n\tserviceId: jsii.String(\"serviceId\"),\n\tserviceName: jsii.String(\"serviceName\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const namespace: servicediscovery.INamespace;\nconst serviceAttributes: servicediscovery.ServiceAttributes = {\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  namespace: namespace,\n  routingPolicy: servicediscovery.RoutingPolicy.WEIGHTED,\n  serviceArn: 'serviceArn',\n  serviceId: 'serviceId',\n  serviceName: 'serviceName',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.ServiceAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A",
        "@aws-cdk/aws-servicediscovery.INamespace",
        "@aws-cdk/aws-servicediscovery.RoutingPolicy",
        "@aws-cdk/aws-servicediscovery.RoutingPolicy#WEIGHTED",
        "@aws-cdk/aws-servicediscovery.ServiceAttributes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\n\ndeclare const namespace: servicediscovery.INamespace;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst serviceAttributes: servicediscovery.ServiceAttributes = {\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  namespace: namespace,\n  routingPolicy: servicediscovery.RoutingPolicy.WEIGHTED,\n  serviceArn: 'serviceArn',\n  serviceId: 'serviceId',\n  serviceName: 'serviceName',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 20,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 4,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "ceb4016472a6a55696bf561a621762ca9a53a5ec9c4e6c8dc074b7a38f6f212c"
    },
    "8c8dd1a4bea52851e681425a72071fedf9fa2b069e1308d9cb01cc36a1c223ce": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_servicediscovery as servicediscovery\nimport aws_cdk.core as cdk\n\n# namespace: servicediscovery.INamespace\n\nservice_props = servicediscovery.ServiceProps(\n    namespace=namespace,\n\n    # the properties below are optional\n    custom_health_check=servicediscovery.HealthCheckCustomConfig(\n        failure_threshold=123\n    ),\n    description=\"description\",\n    dns_record_type=servicediscovery.DnsRecordType.A,\n    dns_ttl=cdk.Duration.minutes(30),\n    health_check=servicediscovery.HealthCheckConfig(\n        failure_threshold=123,\n        resource_path=\"resourcePath\",\n        type=servicediscovery.HealthCheckType.HTTP\n    ),\n    load_balancer=False,\n    name=\"name\",\n    routing_policy=servicediscovery.RoutingPolicy.WEIGHTED\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.ServiceDiscovery;\nusing Amazon.CDK;\n\nINamespace namespace;\nServiceProps serviceProps = new ServiceProps {\n    Namespace = namespace,\n\n    // the properties below are optional\n    CustomHealthCheck = new HealthCheckCustomConfig {\n        FailureThreshold = 123\n    },\n    Description = \"description\",\n    DnsRecordType = DnsRecordType.A,\n    DnsTtl = Duration.Minutes(30),\n    HealthCheck = new HealthCheckConfig {\n        FailureThreshold = 123,\n        ResourcePath = \"resourcePath\",\n        Type = HealthCheckType.HTTP\n    },\n    LoadBalancer = false,\n    Name = \"name\",\n    RoutingPolicy = RoutingPolicy.WEIGHTED\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.servicediscovery.*;\nimport software.amazon.awscdk.core.*;\n\nINamespace namespace;\n\nServiceProps serviceProps = ServiceProps.builder()\n        .namespace(namespace)\n\n        // the properties below are optional\n        .customHealthCheck(HealthCheckCustomConfig.builder()\n                .failureThreshold(123)\n                .build())\n        .description(\"description\")\n        .dnsRecordType(DnsRecordType.A)\n        .dnsTtl(Duration.minutes(30))\n        .healthCheck(HealthCheckConfig.builder()\n                .failureThreshold(123)\n                .resourcePath(\"resourcePath\")\n                .type(HealthCheckType.HTTP)\n                .build())\n        .loadBalancer(false)\n        .name(\"name\")\n        .routingPolicy(RoutingPolicy.WEIGHTED)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\nimport cdk \"github.com/aws-samples/dummy/awscdkcore\"\n\nvar namespace iNamespace\n\nserviceProps := &serviceProps{\n\tnamespace: namespace,\n\n\t// the properties below are optional\n\tcustomHealthCheck: &healthCheckCustomConfig{\n\t\tfailureThreshold: jsii.Number(123),\n\t},\n\tdescription: jsii.String(\"description\"),\n\tdnsRecordType: servicediscovery.dnsRecordType_A,\n\tdnsTtl: cdk.duration.minutes(jsii.Number(30)),\n\thealthCheck: &healthCheckConfig{\n\t\tfailureThreshold: jsii.Number(123),\n\t\tresourcePath: jsii.String(\"resourcePath\"),\n\t\ttype: servicediscovery.healthCheckType_HTTP,\n\t},\n\tloadBalancer: jsii.Boolean(false),\n\tname: jsii.String(\"name\"),\n\troutingPolicy: servicediscovery.routingPolicy_WEIGHTED,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const namespace: servicediscovery.INamespace;\nconst serviceProps: servicediscovery.ServiceProps = {\n  namespace: namespace,\n\n  // the properties below are optional\n  customHealthCheck: {\n    failureThreshold: 123,\n  },\n  description: 'description',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.minutes(30),\n  healthCheck: {\n    failureThreshold: 123,\n    resourcePath: 'resourcePath',\n    type: servicediscovery.HealthCheckType.HTTP,\n  },\n  loadBalancer: false,\n  name: 'name',\n  routingPolicy: servicediscovery.RoutingPolicy.WEIGHTED,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-servicediscovery.ServiceProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-servicediscovery.DnsRecordType",
        "@aws-cdk/aws-servicediscovery.DnsRecordType#A",
        "@aws-cdk/aws-servicediscovery.HealthCheckConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckCustomConfig",
        "@aws-cdk/aws-servicediscovery.HealthCheckType",
        "@aws-cdk/aws-servicediscovery.HealthCheckType#HTTP",
        "@aws-cdk/aws-servicediscovery.INamespace",
        "@aws-cdk/aws-servicediscovery.RoutingPolicy",
        "@aws-cdk/aws-servicediscovery.RoutingPolicy#WEIGHTED",
        "@aws-cdk/aws-servicediscovery.ServiceProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport * as cdk from '@aws-cdk/core';\n\ndeclare const namespace: servicediscovery.INamespace;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst serviceProps: servicediscovery.ServiceProps = {\n  namespace: namespace,\n\n  // the properties below are optional\n  customHealthCheck: {\n    failureThreshold: 123,\n  },\n  description: 'description',\n  dnsRecordType: servicediscovery.DnsRecordType.A,\n  dnsTtl: cdk.Duration.minutes(30),\n  healthCheck: {\n    failureThreshold: 123,\n    resourcePath: 'resourcePath',\n    type: servicediscovery.HealthCheckType.HTTP,\n  },\n  loadBalancer: false,\n  name: 'name',\n  routingPolicy: servicediscovery.RoutingPolicy.WEIGHTED,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "8": 3,
        "10": 5,
        "75": 34,
        "91": 1,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 3,
        "194": 8,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 13,
        "290": 1
      },
      "fqnsFingerprint": "000e0b3ed5ddc1c7873bdbd7f828e51d7a7245812eeab1ca7f6e8abdf6c5b275"
    }
  }
}
