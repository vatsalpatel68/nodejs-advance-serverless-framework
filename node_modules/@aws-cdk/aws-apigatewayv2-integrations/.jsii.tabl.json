{
  "version": "2",
  "toolVersion": "1.58.0",
  "snippets": {
    "21901e31755563e9f6060448bd6c15bb0db3f9004a25f2822bdc516c05ce7cdb": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpLambdaIntegration\n\n# books_default_fn: lambda.Function\n\nbooks_integration = HttpLambdaIntegration(\"BooksIntegration\", books_default_fn)\n\nhttp_api = apigwv2.HttpApi(self, \"HttpApi\")\n\nhttp_api.add_routes(\n    path=\"/books\",\n    methods=[apigwv2.HttpMethod.GET],\n    integration=books_integration\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nFunction booksDefaultFn;\n\nHttpLambdaIntegration booksIntegration = new HttpLambdaIntegration(\"BooksIntegration\", booksDefaultFn);\n\nHttpApi httpApi = new HttpApi(this, \"HttpApi\");\n\nhttpApi.AddRoutes(new AddRoutesOptions {\n    Path = \"/books\",\n    Methods = new [] { HttpMethod.GET },\n    Integration = booksIntegration\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpLambdaIntegration;\n\nFunction booksDefaultFn;\n\nHttpLambdaIntegration booksIntegration = new HttpLambdaIntegration(\"BooksIntegration\", booksDefaultFn);\n\nHttpApi httpApi = new HttpApi(this, \"HttpApi\");\n\nhttpApi.addRoutes(AddRoutesOptions.builder()\n        .path(\"/books\")\n        .methods(List.of(HttpMethod.GET))\n        .integration(booksIntegration)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\nvar booksDefaultFn function\n\nbooksIntegration := awscdkawsapigatewayv2integrations.NewHttpLambdaIntegration(jsii.String(\"BooksIntegration\"), booksDefaultFn)\n\nhttpApi := apigwv2.NewHttpApi(this, jsii.String(\"HttpApi\"))\n\nhttpApi.addRoutes(&addRoutesOptions{\n\tpath: jsii.String(\"/books\"),\n\tmethods: []httpMethod{\n\t\tapigwv2.*httpMethod_GET,\n\t},\n\tintegration: booksIntegration,\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const booksDefaultFn: lambda.Function;\nconst booksIntegration = new HttpLambdaIntegration('BooksIntegration', booksDefaultFn);\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi');\n\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.GET ],\n  integration: booksIntegration,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-integrations"
        },
        "field": {
          "field": "markdown",
          "line": 43
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2.HttpMethod",
        "@aws-cdk/aws-apigatewayv2.HttpMethod#GET",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const booksDefaultFn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst booksIntegration = new HttpLambdaIntegration('BooksIntegration', booksDefaultFn);\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi');\n\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.GET ],\n  integration: booksIntegration,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "8332b15b0a20d4e32ad0a9419f9f002e9a8efd674332506d82b3a44adf050b4b"
    },
    "8e0c5131ad608a8c3c32466d22c78d81435d9b1bddb2383c8d64b2a3565f6a44": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpUrlIntegration\n\n\nbooks_integration = HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\")\n\nhttp_api = apigwv2.HttpApi(self, \"HttpApi\")\n\nhttp_api.add_routes(\n    path=\"/books\",\n    methods=[apigwv2.HttpMethod.GET],\n    integration=books_integration\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n\nHttpUrlIntegration booksIntegration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\");\n\nHttpApi httpApi = new HttpApi(this, \"HttpApi\");\n\nhttpApi.AddRoutes(new AddRoutesOptions {\n    Path = \"/books\",\n    Methods = new [] { HttpMethod.GET },\n    Integration = booksIntegration\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpUrlIntegration;\n\n\nHttpUrlIntegration booksIntegration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\");\n\nHttpApi httpApi = new HttpApi(this, \"HttpApi\");\n\nhttpApi.addRoutes(AddRoutesOptions.builder()\n        .path(\"/books\")\n        .methods(List.of(HttpMethod.GET))\n        .integration(booksIntegration)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\n\nbooksIntegration := awscdkawsapigatewayv2integrations.NewHttpUrlIntegration(jsii.String(\"BooksIntegration\"), jsii.String(\"https://get-books-proxy.myproxy.internal\"))\n\nhttpApi := apigwv2.NewHttpApi(this, jsii.String(\"HttpApi\"))\n\nhttpApi.addRoutes(&addRoutesOptions{\n\tpath: jsii.String(\"/books\"),\n\tmethods: []httpMethod{\n\t\tapigwv2.*httpMethod_GET,\n\t},\n\tintegration: booksIntegration,\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst booksIntegration = new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal');\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi');\n\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.GET ],\n  integration: booksIntegration,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-integrations"
        },
        "field": {
          "field": "markdown",
          "line": 68
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpUrlIntegration",
        "@aws-cdk/aws-apigatewayv2.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2.HttpMethod",
        "@aws-cdk/aws-apigatewayv2.HttpMethod#GET",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst booksIntegration = new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal');\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi');\n\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.GET ],\n  integration: booksIntegration,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 15,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "905f7961500990176f227598fc79de1dd971f125dcc8cd23701a572dc41b20e5"
    },
    "75c3b31ddaa97083f3fb60a4bab74db8fb2a4ddf5c39fba6e673202240d1d075": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpAlbIntegration\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nlb = elbv2.ApplicationLoadBalancer(self, \"lb\", vpc=vpc)\nlistener = lb.add_listener(\"listener\", port=80)\nlistener.add_targets(\"target\",\n    port=80\n)\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpAlbIntegration(\"DefaultIntegration\", listener)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"lb\", new ApplicationLoadBalancerProps { Vpc = vpc });\nApplicationListener listener = lb.AddListener(\"listener\", new BaseApplicationListenerProps { Port = 80 });\nlistener.AddTargets(\"target\", new AddApplicationTargetsProps {\n    Port = 80\n});\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpAlbIntegration(\"DefaultIntegration\", listener)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpAlbIntegration;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"lb\").vpc(vpc).build();\nApplicationListener listener = lb.addListener(\"listener\", BaseApplicationListenerProps.builder().port(80).build());\nlistener.addTargets(\"target\", AddApplicationTargetsProps.builder()\n        .port(80)\n        .build());\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(new HttpAlbIntegration(\"DefaultIntegration\", listener))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\n\nvpc := ec2.NewVpc(this, jsii.String(\"VPC\"))\nlb := elbv2.NewApplicationLoadBalancer(this, jsii.String(\"lb\"), &applicationLoadBalancerProps{\n\tvpc: vpc,\n})\nlistener := lb.addListener(jsii.String(\"listener\"), &baseApplicationListenerProps{\n\tport: jsii.Number(80),\n})\nlistener.addTargets(jsii.String(\"target\"), &addApplicationTargetsProps{\n\tport: jsii.Number(80),\n})\n\nhttpEndpoint := apigwv2.NewHttpApi(this, jsii.String(\"HttpProxyPrivateApi\"), &httpApiProps{\n\tdefaultIntegration: *awscdkawsapigatewayv2integrations.NewHttpAlbIntegration(jsii.String(\"DefaultIntegration\"), listener),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'lb', { vpc });\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-integrations"
        },
        "field": {
          "field": "markdown",
          "line": 94
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpAlbIntegration",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationListener",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst lb = new elbv2.ApplicationLoadBalancer(this, 'lb', { vpc });\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 21,
        "104": 3,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 4,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "274f1023388b0f798e507a8aba820d0d5df5c8ef90f58627461358ec877ef5cc"
    },
    "3b1024ee43e1af3b7e05c7ca257f1203fbe929ee364307cda158390ec3a60c46": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpNlbIntegration\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nlb = elbv2.NetworkLoadBalancer(self, \"lb\", vpc=vpc)\nlistener = lb.add_listener(\"listener\", port=80)\nlistener.add_targets(\"target\",\n    port=80\n)\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpNlbIntegration(\"DefaultIntegration\", listener)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer lb = new NetworkLoadBalancer(this, \"lb\", new NetworkLoadBalancerProps { Vpc = vpc });\nNetworkListener listener = lb.AddListener(\"listener\", new BaseNetworkListenerProps { Port = 80 });\nlistener.AddTargets(\"target\", new AddNetworkTargetsProps {\n    Port = 80\n});\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpNlbIntegration(\"DefaultIntegration\", listener)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpNlbIntegration;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer lb = NetworkLoadBalancer.Builder.create(this, \"lb\").vpc(vpc).build();\nNetworkListener listener = lb.addListener(\"listener\", BaseNetworkListenerProps.builder().port(80).build());\nlistener.addTargets(\"target\", AddNetworkTargetsProps.builder()\n        .port(80)\n        .build());\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(new HttpNlbIntegration(\"DefaultIntegration\", listener))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\n\nvpc := ec2.NewVpc(this, jsii.String(\"VPC\"))\nlb := elbv2.NewNetworkLoadBalancer(this, jsii.String(\"lb\"), &networkLoadBalancerProps{\n\tvpc: vpc,\n})\nlistener := lb.addListener(jsii.String(\"listener\"), &baseNetworkListenerProps{\n\tport: jsii.Number(80),\n})\nlistener.addTargets(jsii.String(\"target\"), &addNetworkTargetsProps{\n\tport: jsii.Number(80),\n})\n\nhttpEndpoint := apigwv2.NewHttpApi(this, jsii.String(\"HttpProxyPrivateApi\"), &httpApiProps{\n\tdefaultIntegration: *awscdkawsapigatewayv2integrations.NewHttpNlbIntegration(jsii.String(\"DefaultIntegration\"), listener),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpNlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst lb = new elbv2.NetworkLoadBalancer(this, 'lb', { vpc });\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpNlbIntegration('DefaultIntegration', listener),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-integrations"
        },
        "field": {
          "field": "markdown",
          "line": 115
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpNlbIntegration",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-elasticloadbalancingv2.AddNetworkTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseNetworkListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpNlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst lb = new elbv2.NetworkLoadBalancer(this, 'lb', { vpc });\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpNlbIntegration('DefaultIntegration', listener),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 21,
        "104": 3,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 4,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "8e77ac1133020d797f62839c67487bb3ddf7f10d66a6e6b4edfe43ff4afb5298"
    },
    "9097e03e04f137e93134a36d2f2b4492b33e2aea6f25673e49edfee4adc6a0d7": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_servicediscovery as servicediscovery\nfrom aws_cdk.aws_apigatewayv2_integrations import HttpServiceDiscoveryIntegration\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nvpc_link = apigwv2.VpcLink(self, \"VpcLink\", vpc=vpc)\nnamespace = servicediscovery.PrivateDnsNamespace(self, \"Namespace\",\n    name=\"boobar.com\",\n    vpc=vpc\n)\nservice = namespace.create_service(\"Service\")\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpServiceDiscoveryIntegration(\"DefaultIntegration\", service,\n        vpc_link=vpc_link\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ServiceDiscovery;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nVpcLink vpcLink = new VpcLink(this, \"VpcLink\", new VpcLinkProps { Vpc = vpc });\nPrivateDnsNamespace namespace = new PrivateDnsNamespace(this, \"Namespace\", new PrivateDnsNamespaceProps {\n    Name = \"boobar.com\",\n    Vpc = vpc\n});\nService service = namespace.CreateService(\"Service\");\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpServiceDiscoveryIntegration(\"DefaultIntegration\", service, new HttpServiceDiscoveryIntegrationProps {\n        VpcLink = vpcLink\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.servicediscovery.*;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.HttpServiceDiscoveryIntegration;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nVpcLink vpcLink = VpcLink.Builder.create(this, \"VpcLink\").vpc(vpc).build();\nPrivateDnsNamespace namespace = PrivateDnsNamespace.Builder.create(this, \"Namespace\")\n        .name(\"boobar.com\")\n        .vpc(vpc)\n        .build();\nService service = namespace.createService(\"Service\");\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(HttpServiceDiscoveryIntegration.Builder.create(\"DefaultIntegration\", service)\n                .vpcLink(vpcLink)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\nimport \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\n\nvpc := ec2.NewVpc(this, jsii.String(\"VPC\"))\nvpcLink := apigwv2.NewVpcLink(this, jsii.String(\"VpcLink\"), &vpcLinkProps{\n\tvpc: vpc,\n})\nnamespace := servicediscovery.NewPrivateDnsNamespace(this, jsii.String(\"Namespace\"), &privateDnsNamespaceProps{\n\tname: jsii.String(\"boobar.com\"),\n\tvpc: vpc,\n})\nservice := namespace.createService(jsii.String(\"Service\"))\n\nhttpEndpoint := apigwv2.NewHttpApi(this, jsii.String(\"HttpProxyPrivateApi\"), &httpApiProps{\n\tdefaultIntegration: *awscdkawsapigatewayv2integrations.NewHttpServiceDiscoveryIntegration(jsii.String(\"DefaultIntegration\"), service, &httpServiceDiscoveryIntegrationProps{\n\t\tvpcLink: vpcLink,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport { HttpServiceDiscoveryIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst vpcLink = new apigwv2.VpcLink(this, 'VpcLink', { vpc });\nconst namespace = new servicediscovery.PrivateDnsNamespace(this, 'Namespace', {\n  name: 'boobar.com',\n  vpc,\n});\nconst service = namespace.createService('Service');\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpServiceDiscoveryIntegration('DefaultIntegration', service, {\n    vpcLink,\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-integrations"
        },
        "field": {
          "field": "markdown",
          "line": 136
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpServiceDiscoveryIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpServiceDiscoveryIntegrationProps",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.IVpcLink",
        "@aws-cdk/aws-apigatewayv2.VpcLink",
        "@aws-cdk/aws-apigatewayv2.VpcLinkProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-servicediscovery.IService",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport { HttpServiceDiscoveryIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst vpcLink = new apigwv2.VpcLink(this, 'VpcLink', { vpc });\nconst namespace = new servicediscovery.PrivateDnsNamespace(this, 'Namespace', {\n  name: 'boobar.com',\n  vpc,\n});\nconst service = namespace.createService('Service');\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpServiceDiscoveryIntegration('DefaultIntegration', service, {\n    vpcLink,\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 24,
        "104": 4,
        "193": 4,
        "194": 5,
        "196": 1,
        "197": 5,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 1,
        "281": 2,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "12780abe985de14358cec2adcc80eaff4f705363c1eff15c5bf4b9e851c34cd7"
    },
    "1da4636c46db404a0ee86eba3d2fc1e2a219c3cf1bb1418480a3238f42a6b42e": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpAlbIntegration\n\n# lb: elbv2.ApplicationLoadBalancer\n\nlistener = lb.add_listener(\"listener\", port=80)\nlistener.add_targets(\"target\",\n    port=80\n)\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpAlbIntegration(\"DefaultIntegration\", listener,\n        parameter_mapping=apigwv2.ParameterMapping().append_header(\"header2\", apigwv2.MappingValue.request_header(\"header1\")).remove_header(\"header1\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.AddListener(\"listener\", new BaseApplicationListenerProps { Port = 80 });\nlistener.AddTargets(\"target\", new AddApplicationTargetsProps {\n    Port = 80\n});\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpAlbIntegration(\"DefaultIntegration\", listener, new HttpAlbIntegrationProps {\n        ParameterMapping = new ParameterMapping().AppendHeader(\"header2\", MappingValue.RequestHeader(\"header1\")).RemoveHeader(\"header1\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpAlbIntegration;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.addListener(\"listener\", BaseApplicationListenerProps.builder().port(80).build());\nlistener.addTargets(\"target\", AddApplicationTargetsProps.builder()\n        .port(80)\n        .build());\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(HttpAlbIntegration.Builder.create(\"DefaultIntegration\", listener)\n                .parameterMapping(new ParameterMapping().appendHeader(\"header2\", MappingValue.requestHeader(\"header1\")).removeHeader(\"header1\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\nvar lb applicationLoadBalancer\n\nlistener := lb.addListener(jsii.String(\"listener\"), &baseApplicationListenerProps{\n\tport: jsii.Number(80),\n})\nlistener.addTargets(jsii.String(\"target\"), &addApplicationTargetsProps{\n\tport: jsii.Number(80),\n})\n\nhttpEndpoint := apigwv2.NewHttpApi(this, jsii.String(\"HttpProxyPrivateApi\"), &httpApiProps{\n\tdefaultIntegration: *awscdkawsapigatewayv2integrations.NewHttpAlbIntegration(jsii.String(\"DefaultIntegration\"), listener, &httpAlbIntegrationProps{\n\t\tparameterMapping: apigwv2.NewParameterMapping().appendHeader(jsii.String(\"header2\"), apigwv2.mappingValue.requestHeader(jsii.String(\"header1\"))).removeHeader(jsii.String(\"header1\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping()\n      .appendHeader('header2', apigwv2.MappingValue.requestHeader('header1'))\n      .removeHeader('header1'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-integrations"
        },
        "field": {
          "field": "markdown",
          "line": 163
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpAlbIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpAlbIntegrationProps",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.MappingValue",
        "@aws-cdk/aws-apigatewayv2.MappingValue#requestHeader",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping#appendHeader",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping#removeHeader",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationListener",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping()\n      .appendHeader('header2', apigwv2.MappingValue.requestHeader('header1'))\n      .removeHeader('header1'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 8,
        "75": 25,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 8,
        "196": 5,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "37f93d1c2e5756636e1338ced536f94d801110367364bd29411c1f8b74db4860"
    },
    "0be3305b974196dd06c44ea8fbebce72ee17d52e41be741af97c2975c202d986": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpAlbIntegration\n\n# lb: elbv2.ApplicationLoadBalancer\n\nlistener = lb.add_listener(\"listener\", port=80)\nlistener.add_targets(\"target\",\n    port=80\n)\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpAlbIntegration(\"DefaultIntegration\", listener,\n        parameter_mapping=apigwv2.ParameterMapping().custom(\"myKey\", \"myValue\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.AddListener(\"listener\", new BaseApplicationListenerProps { Port = 80 });\nlistener.AddTargets(\"target\", new AddApplicationTargetsProps {\n    Port = 80\n});\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpAlbIntegration(\"DefaultIntegration\", listener, new HttpAlbIntegrationProps {\n        ParameterMapping = new ParameterMapping().Custom(\"myKey\", \"myValue\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpAlbIntegration;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.addListener(\"listener\", BaseApplicationListenerProps.builder().port(80).build());\nlistener.addTargets(\"target\", AddApplicationTargetsProps.builder()\n        .port(80)\n        .build());\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(HttpAlbIntegration.Builder.create(\"DefaultIntegration\", listener)\n                .parameterMapping(new ParameterMapping().custom(\"myKey\", \"myValue\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\nvar lb applicationLoadBalancer\n\nlistener := lb.addListener(jsii.String(\"listener\"), &baseApplicationListenerProps{\n\tport: jsii.Number(80),\n})\nlistener.addTargets(jsii.String(\"target\"), &addApplicationTargetsProps{\n\tport: jsii.Number(80),\n})\n\nhttpEndpoint := apigwv2.NewHttpApi(this, jsii.String(\"HttpProxyPrivateApi\"), &httpApiProps{\n\tdefaultIntegration: *awscdkawsapigatewayv2integrations.NewHttpAlbIntegration(jsii.String(\"DefaultIntegration\"), listener, &httpAlbIntegrationProps{\n\t\tparameterMapping: apigwv2.NewParameterMapping().custom(jsii.String(\"myKey\"), jsii.String(\"myValue\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping().custom('myKey', 'myValue'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-integrations"
        },
        "field": {
          "field": "markdown",
          "line": 183
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpAlbIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpAlbIntegrationProps",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping#custom",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationListener",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping().custom('myKey', 'myValue'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 5,
        "196": 3,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "67995c4f745710e1f3ac22b2c0ad8cbd51a69abf2835e9856d483c050a9abf36"
    },
    "27ae216f61996a07bfef141b478786cd20be9626386976ae66370f66732f6233": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import WebSocketLambdaIntegration\n\n# message_handler: lambda.Function\n\n\nweb_socket_api = apigwv2.WebSocketApi(self, \"mywsapi\")\napigwv2.WebSocketStage(self, \"mystage\",\n    web_socket_api=web_socket_api,\n    stage_name=\"dev\",\n    auto_deploy=True\n)\nweb_socket_api.add_route(\"sendmessage\",\n    integration=WebSocketLambdaIntegration(\"SendMessageIntegration\", message_handler)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nFunction messageHandler;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nnew WebSocketStage(this, \"mystage\", new WebSocketStageProps {\n    WebSocketApi = webSocketApi,\n    StageName = \"dev\",\n    AutoDeploy = true\n});\nwebSocketApi.AddRoute(\"sendmessage\", new WebSocketRouteOptions {\n    Integration = new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.WebSocketLambdaIntegration;\n\nFunction messageHandler;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nWebSocketStage.Builder.create(this, \"mystage\")\n        .webSocketApi(webSocketApi)\n        .stageName(\"dev\")\n        .autoDeploy(true)\n        .build();\nwebSocketApi.addRoute(\"sendmessage\", WebSocketRouteOptions.builder()\n        .integration(new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\nvar messageHandler function\n\n\nwebSocketApi := apigwv2.NewWebSocketApi(this, jsii.String(\"mywsapi\"))\napigwv2.NewWebSocketStage(this, jsii.String(\"mystage\"), &webSocketStageProps{\n\twebSocketApi: webSocketApi,\n\tstageName: jsii.String(\"dev\"),\n\tautoDeploy: jsii.Boolean(true),\n})\nwebSocketApi.addRoute(jsii.String(\"sendmessage\"), &webSocketRouteOptions{\n\tintegration: *awscdkawsapigatewayv2integrations.NewWebSocketLambdaIntegration(jsii.String(\"SendMessageIntegration\"), messageHandler),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});\n\ndeclare const messageHandler: lambda.Function;\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2-integrations"
        },
        "field": {
          "field": "markdown",
          "line": 213
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.WebSocketLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2.WebSocketApi#addRoute",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteOptions",
        "@aws-cdk/aws-apigatewayv2.WebSocketStage",
        "@aws-cdk/aws-apigatewayv2.WebSocketStageProps",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const messageHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 17,
        "104": 2,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "67cc9d4a9b2e105209e54ff025f2a08ded28129910410b15ef6f3c2d030e0c74"
    },
    "ada4c8f6c8d1ae744cd501571355ccfae1432ce848bf579c9fff95a3c5aba734": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpAlbIntegration\n\n# lb: elbv2.ApplicationLoadBalancer\n\nlistener = lb.add_listener(\"listener\", port=80)\nlistener.add_targets(\"target\",\n    port=80\n)\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpAlbIntegration(\"DefaultIntegration\", listener,\n        parameter_mapping=apigwv2.ParameterMapping().custom(\"myKey\", \"myValue\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.AddListener(\"listener\", new BaseApplicationListenerProps { Port = 80 });\nlistener.AddTargets(\"target\", new AddApplicationTargetsProps {\n    Port = 80\n});\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpAlbIntegration(\"DefaultIntegration\", listener, new HttpAlbIntegrationProps {\n        ParameterMapping = new ParameterMapping().Custom(\"myKey\", \"myValue\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpAlbIntegration;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.addListener(\"listener\", BaseApplicationListenerProps.builder().port(80).build());\nlistener.addTargets(\"target\", AddApplicationTargetsProps.builder()\n        .port(80)\n        .build());\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(HttpAlbIntegration.Builder.create(\"DefaultIntegration\", listener)\n                .parameterMapping(new ParameterMapping().custom(\"myKey\", \"myValue\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\nvar lb applicationLoadBalancer\n\nlistener := lb.addListener(jsii.String(\"listener\"), &baseApplicationListenerProps{\n\tport: jsii.Number(80),\n})\nlistener.addTargets(jsii.String(\"target\"), &addApplicationTargetsProps{\n\tport: jsii.Number(80),\n})\n\nhttpEndpoint := apigwv2.NewHttpApi(this, jsii.String(\"HttpProxyPrivateApi\"), &httpApiProps{\n\tdefaultIntegration: *awscdkawsapigatewayv2integrations.NewHttpAlbIntegration(jsii.String(\"DefaultIntegration\"), listener, &httpAlbIntegrationProps{\n\t\tparameterMapping: apigwv2.NewParameterMapping().custom(jsii.String(\"myKey\"), jsii.String(\"myValue\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping().custom('myKey', 'myValue'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-integrations.HttpAlbIntegration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpAlbIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpAlbIntegrationProps",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping#custom",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationListener",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping().custom('myKey', 'myValue'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 5,
        "196": 3,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "67995c4f745710e1f3ac22b2c0ad8cbd51a69abf2835e9856d483c050a9abf36"
    },
    "0ca382b4d1dada33e65b59097e086871ca045c958c4e3884b2fa81c2c8e67e23": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpAlbIntegration\n\n# lb: elbv2.ApplicationLoadBalancer\n\nlistener = lb.add_listener(\"listener\", port=80)\nlistener.add_targets(\"target\",\n    port=80\n)\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpAlbIntegration(\"DefaultIntegration\", listener,\n        parameter_mapping=apigwv2.ParameterMapping().append_header(\"header2\", apigwv2.MappingValue.request_header(\"header1\")).remove_header(\"header1\")\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.AddListener(\"listener\", new BaseApplicationListenerProps { Port = 80 });\nlistener.AddTargets(\"target\", new AddApplicationTargetsProps {\n    Port = 80\n});\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpAlbIntegration(\"DefaultIntegration\", listener, new HttpAlbIntegrationProps {\n        ParameterMapping = new ParameterMapping().AppendHeader(\"header2\", MappingValue.RequestHeader(\"header1\")).RemoveHeader(\"header1\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpAlbIntegration;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.addListener(\"listener\", BaseApplicationListenerProps.builder().port(80).build());\nlistener.addTargets(\"target\", AddApplicationTargetsProps.builder()\n        .port(80)\n        .build());\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(HttpAlbIntegration.Builder.create(\"DefaultIntegration\", listener)\n                .parameterMapping(new ParameterMapping().appendHeader(\"header2\", MappingValue.requestHeader(\"header1\")).removeHeader(\"header1\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\nvar lb applicationLoadBalancer\n\nlistener := lb.addListener(jsii.String(\"listener\"), &baseApplicationListenerProps{\n\tport: jsii.Number(80),\n})\nlistener.addTargets(jsii.String(\"target\"), &addApplicationTargetsProps{\n\tport: jsii.Number(80),\n})\n\nhttpEndpoint := apigwv2.NewHttpApi(this, jsii.String(\"HttpProxyPrivateApi\"), &httpApiProps{\n\tdefaultIntegration: *awscdkawsapigatewayv2integrations.NewHttpAlbIntegration(jsii.String(\"DefaultIntegration\"), listener, &httpAlbIntegrationProps{\n\t\tparameterMapping: apigwv2.NewParameterMapping().appendHeader(jsii.String(\"header2\"), apigwv2.mappingValue.requestHeader(jsii.String(\"header1\"))).removeHeader(jsii.String(\"header1\")),\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping()\n      .appendHeader('header2', apigwv2.MappingValue.requestHeader('header1'))\n      .removeHeader('header1'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-integrations.HttpAlbIntegrationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpAlbIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpAlbIntegrationProps",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.MappingValue",
        "@aws-cdk/aws-apigatewayv2.MappingValue#requestHeader",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping#appendHeader",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping#removeHeader",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationListener",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping()\n      .appendHeader('header2', apigwv2.MappingValue.requestHeader('header1'))\n      .removeHeader('header1'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 8,
        "75": 25,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 8,
        "196": 5,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "37f93d1c2e5756636e1338ced536f94d801110367364bd29411c1f8b74db4860"
    },
    "02338575f2653edf3b6a21f888bd8496dae13314cdbfa514f61f045455f9995e": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpLambdaIntegration\n\n# books_default_fn: lambda.Function\n\nbooks_integration = HttpLambdaIntegration(\"BooksIntegration\", books_default_fn)\n\nhttp_api = apigwv2.HttpApi(self, \"HttpApi\")\n\nhttp_api.add_routes(\n    path=\"/books\",\n    methods=[apigwv2.HttpMethod.GET],\n    integration=books_integration\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nFunction booksDefaultFn;\n\nHttpLambdaIntegration booksIntegration = new HttpLambdaIntegration(\"BooksIntegration\", booksDefaultFn);\n\nHttpApi httpApi = new HttpApi(this, \"HttpApi\");\n\nhttpApi.AddRoutes(new AddRoutesOptions {\n    Path = \"/books\",\n    Methods = new [] { HttpMethod.GET },\n    Integration = booksIntegration\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpLambdaIntegration;\n\nFunction booksDefaultFn;\n\nHttpLambdaIntegration booksIntegration = new HttpLambdaIntegration(\"BooksIntegration\", booksDefaultFn);\n\nHttpApi httpApi = new HttpApi(this, \"HttpApi\");\n\nhttpApi.addRoutes(AddRoutesOptions.builder()\n        .path(\"/books\")\n        .methods(List.of(HttpMethod.GET))\n        .integration(booksIntegration)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\nvar booksDefaultFn function\n\nbooksIntegration := awscdkawsapigatewayv2integrations.NewHttpLambdaIntegration(jsii.String(\"BooksIntegration\"), booksDefaultFn)\n\nhttpApi := apigwv2.NewHttpApi(this, jsii.String(\"HttpApi\"))\n\nhttpApi.addRoutes(&addRoutesOptions{\n\tpath: jsii.String(\"/books\"),\n\tmethods: []httpMethod{\n\t\tapigwv2.*httpMethod_GET,\n\t},\n\tintegration: booksIntegration,\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const booksDefaultFn: lambda.Function;\nconst booksIntegration = new HttpLambdaIntegration('BooksIntegration', booksDefaultFn);\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi');\n\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.GET ],\n  integration: booksIntegration,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-integrations.HttpLambdaIntegration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2.HttpMethod",
        "@aws-cdk/aws-apigatewayv2.HttpMethod#GET",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const booksDefaultFn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst booksIntegration = new HttpLambdaIntegration('BooksIntegration', booksDefaultFn);\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi');\n\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.GET ],\n  integration: booksIntegration,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "8332b15b0a20d4e32ad0a9419f9f002e9a8efd674332506d82b3a44adf050b4b"
    },
    "4d9ffb9448c1ce90b059aeb10d666a000a3fb5b7aa0f5dcad06fcffb737bb672": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2 as apigatewayv2\nimport aws_cdk.aws_apigatewayv2_integrations as apigatewayv2_integrations\n\n# parameter_mapping: apigatewayv2.ParameterMapping\n# payload_format_version: apigatewayv2.PayloadFormatVersion\n\nhttp_lambda_integration_props = apigatewayv2_integrations.HttpLambdaIntegrationProps(\n    parameter_mapping=parameter_mapping,\n    payload_format_version=payload_format_version\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGatewayv2;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nParameterMapping parameterMapping;\nPayloadFormatVersion payloadFormatVersion;\n\nHttpLambdaIntegrationProps httpLambdaIntegrationProps = new HttpLambdaIntegrationProps {\n    ParameterMapping = parameterMapping,\n    PayloadFormatVersion = payloadFormatVersion\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.*;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.*;\n\nParameterMapping parameterMapping;\nPayloadFormatVersion payloadFormatVersion;\n\nHttpLambdaIntegrationProps httpLambdaIntegrationProps = HttpLambdaIntegrationProps.builder()\n        .parameterMapping(parameterMapping)\n        .payloadFormatVersion(payloadFormatVersion)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigatewayv2 \"github.com/aws-samples/dummy/awscdkawsapigatewayv2\"\nimport apigatewayv2_integrations \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\nvar parameterMapping parameterMapping\nvar payloadFormatVersion payloadFormatVersion\n\nhttpLambdaIntegrationProps := &httpLambdaIntegrationProps{\n\tparameterMapping: parameterMapping,\n\tpayloadFormatVersion: payloadFormatVersion,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as apigatewayv2_integrations from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const parameterMapping: apigatewayv2.ParameterMapping;\ndeclare const payloadFormatVersion: apigatewayv2.PayloadFormatVersion;\nconst httpLambdaIntegrationProps: apigatewayv2_integrations.HttpLambdaIntegrationProps = {\n  parameterMapping: parameterMapping,\n  payloadFormatVersion: payloadFormatVersion,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-integrations.HttpLambdaIntegrationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpLambdaIntegrationProps",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping",
        "@aws-cdk/aws-apigatewayv2.PayloadFormatVersion"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as apigatewayv2_integrations from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const parameterMapping: apigatewayv2.ParameterMapping;\ndeclare const payloadFormatVersion: apigatewayv2.PayloadFormatVersion;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpLambdaIntegrationProps: apigatewayv2_integrations.HttpLambdaIntegrationProps = {\n  parameterMapping: parameterMapping,\n  payloadFormatVersion: payloadFormatVersion,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 15,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "685f9caaf00419d2c2eefb4d5fc7806e43b3be114f7271a781e08ecca6a0a97a"
    },
    "b0bf9f4f079aa876bfdcd4a114c87a81b745bcee11e337a72362dc7401e547a4": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpNlbIntegration\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nlb = elbv2.NetworkLoadBalancer(self, \"lb\", vpc=vpc)\nlistener = lb.add_listener(\"listener\", port=80)\nlistener.add_targets(\"target\",\n    port=80\n)\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpNlbIntegration(\"DefaultIntegration\", listener)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer lb = new NetworkLoadBalancer(this, \"lb\", new NetworkLoadBalancerProps { Vpc = vpc });\nNetworkListener listener = lb.AddListener(\"listener\", new BaseNetworkListenerProps { Port = 80 });\nlistener.AddTargets(\"target\", new AddNetworkTargetsProps {\n    Port = 80\n});\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpNlbIntegration(\"DefaultIntegration\", listener)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpNlbIntegration;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nNetworkLoadBalancer lb = NetworkLoadBalancer.Builder.create(this, \"lb\").vpc(vpc).build();\nNetworkListener listener = lb.addListener(\"listener\", BaseNetworkListenerProps.builder().port(80).build());\nlistener.addTargets(\"target\", AddNetworkTargetsProps.builder()\n        .port(80)\n        .build());\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(new HttpNlbIntegration(\"DefaultIntegration\", listener))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\n\nvpc := ec2.NewVpc(this, jsii.String(\"VPC\"))\nlb := elbv2.NewNetworkLoadBalancer(this, jsii.String(\"lb\"), &networkLoadBalancerProps{\n\tvpc: vpc,\n})\nlistener := lb.addListener(jsii.String(\"listener\"), &baseNetworkListenerProps{\n\tport: jsii.Number(80),\n})\nlistener.addTargets(jsii.String(\"target\"), &addNetworkTargetsProps{\n\tport: jsii.Number(80),\n})\n\nhttpEndpoint := apigwv2.NewHttpApi(this, jsii.String(\"HttpProxyPrivateApi\"), &httpApiProps{\n\tdefaultIntegration: *awscdkawsapigatewayv2integrations.NewHttpNlbIntegration(jsii.String(\"DefaultIntegration\"), listener),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpNlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst lb = new elbv2.NetworkLoadBalancer(this, 'lb', { vpc });\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpNlbIntegration('DefaultIntegration', listener),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-integrations.HttpNlbIntegration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpNlbIntegration",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-elasticloadbalancingv2.AddNetworkTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseNetworkListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.INetworkListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.NetworkLoadBalancerProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpNlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst lb = new elbv2.NetworkLoadBalancer(this, 'lb', { vpc });\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpNlbIntegration('DefaultIntegration', listener),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 21,
        "104": 3,
        "193": 4,
        "194": 5,
        "196": 2,
        "197": 4,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "8e77ac1133020d797f62839c67487bb3ddf7f10d66a6e6b4edfe43ff4afb5298"
    },
    "8afb738de1a8d76bd1814081bcadc5387247694bc368743fecd0941b68f62ca6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2 as apigatewayv2\nimport aws_cdk.aws_apigatewayv2_integrations as apigatewayv2_integrations\n\n# parameter_mapping: apigatewayv2.ParameterMapping\n# vpc_link: apigatewayv2.VpcLink\n\nhttp_nlb_integration_props = apigatewayv2_integrations.HttpNlbIntegrationProps(\n    method=apigatewayv2.HttpMethod.ANY,\n    parameter_mapping=parameter_mapping,\n    secure_server_name=\"secureServerName\",\n    vpc_link=vpc_link\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGatewayv2;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nParameterMapping parameterMapping;\nVpcLink vpcLink;\n\nHttpNlbIntegrationProps httpNlbIntegrationProps = new HttpNlbIntegrationProps {\n    Method = HttpMethod.ANY,\n    ParameterMapping = parameterMapping,\n    SecureServerName = \"secureServerName\",\n    VpcLink = vpcLink\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.*;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.*;\n\nParameterMapping parameterMapping;\nVpcLink vpcLink;\n\nHttpNlbIntegrationProps httpNlbIntegrationProps = HttpNlbIntegrationProps.builder()\n        .method(HttpMethod.ANY)\n        .parameterMapping(parameterMapping)\n        .secureServerName(\"secureServerName\")\n        .vpcLink(vpcLink)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigatewayv2 \"github.com/aws-samples/dummy/awscdkawsapigatewayv2\"\nimport apigatewayv2_integrations \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\nvar parameterMapping parameterMapping\nvar vpcLink vpcLink\n\nhttpNlbIntegrationProps := &httpNlbIntegrationProps{\n\tmethod: apigatewayv2.httpMethod_ANY,\n\tparameterMapping: parameterMapping,\n\tsecureServerName: jsii.String(\"secureServerName\"),\n\tvpcLink: vpcLink,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as apigatewayv2_integrations from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const parameterMapping: apigatewayv2.ParameterMapping;\ndeclare const vpcLink: apigatewayv2.VpcLink;\nconst httpNlbIntegrationProps: apigatewayv2_integrations.HttpNlbIntegrationProps = {\n  method: apigatewayv2.HttpMethod.ANY,\n  parameterMapping: parameterMapping,\n  secureServerName: 'secureServerName',\n  vpcLink: vpcLink,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-integrations.HttpNlbIntegrationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpNlbIntegrationProps",
        "@aws-cdk/aws-apigatewayv2.HttpMethod",
        "@aws-cdk/aws-apigatewayv2.HttpMethod#ANY",
        "@aws-cdk/aws-apigatewayv2.IVpcLink",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as apigatewayv2_integrations from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const parameterMapping: apigatewayv2.ParameterMapping;\ndeclare const vpcLink: apigatewayv2.VpcLink;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpNlbIntegrationProps: apigatewayv2_integrations.HttpNlbIntegrationProps = {\n  method: apigatewayv2.HttpMethod.ANY,\n  parameterMapping: parameterMapping,\n  secureServerName: 'secureServerName',\n  vpcLink: vpcLink,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 20,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "87208f614f13f89d1a9eba3a49e36c839ef7b205158cb7231b86038e96455534"
    },
    "dae254cc65976f1af5c410a548cabc735a5e59c7cead2c411e87c8cc5fba7723": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2 as apigatewayv2\nimport aws_cdk.aws_apigatewayv2_integrations as apigatewayv2_integrations\n\n# parameter_mapping: apigatewayv2.ParameterMapping\n# vpc_link: apigatewayv2.VpcLink\n\nhttp_private_integration_options = apigatewayv2_integrations.HttpPrivateIntegrationOptions(\n    method=apigatewayv2.HttpMethod.ANY,\n    parameter_mapping=parameter_mapping,\n    secure_server_name=\"secureServerName\",\n    vpc_link=vpc_link\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGatewayv2;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nParameterMapping parameterMapping;\nVpcLink vpcLink;\n\nHttpPrivateIntegrationOptions httpPrivateIntegrationOptions = new HttpPrivateIntegrationOptions {\n    Method = HttpMethod.ANY,\n    ParameterMapping = parameterMapping,\n    SecureServerName = \"secureServerName\",\n    VpcLink = vpcLink\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.*;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.*;\n\nParameterMapping parameterMapping;\nVpcLink vpcLink;\n\nHttpPrivateIntegrationOptions httpPrivateIntegrationOptions = HttpPrivateIntegrationOptions.builder()\n        .method(HttpMethod.ANY)\n        .parameterMapping(parameterMapping)\n        .secureServerName(\"secureServerName\")\n        .vpcLink(vpcLink)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigatewayv2 \"github.com/aws-samples/dummy/awscdkawsapigatewayv2\"\nimport apigatewayv2_integrations \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\nvar parameterMapping parameterMapping\nvar vpcLink vpcLink\n\nhttpPrivateIntegrationOptions := &httpPrivateIntegrationOptions{\n\tmethod: apigatewayv2.httpMethod_ANY,\n\tparameterMapping: parameterMapping,\n\tsecureServerName: jsii.String(\"secureServerName\"),\n\tvpcLink: vpcLink,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as apigatewayv2_integrations from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const parameterMapping: apigatewayv2.ParameterMapping;\ndeclare const vpcLink: apigatewayv2.VpcLink;\nconst httpPrivateIntegrationOptions: apigatewayv2_integrations.HttpPrivateIntegrationOptions = {\n  method: apigatewayv2.HttpMethod.ANY,\n  parameterMapping: parameterMapping,\n  secureServerName: 'secureServerName',\n  vpcLink: vpcLink,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-integrations.HttpPrivateIntegrationOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpPrivateIntegrationOptions",
        "@aws-cdk/aws-apigatewayv2.HttpMethod",
        "@aws-cdk/aws-apigatewayv2.HttpMethod#ANY",
        "@aws-cdk/aws-apigatewayv2.IVpcLink",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as apigatewayv2_integrations from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const parameterMapping: apigatewayv2.ParameterMapping;\ndeclare const vpcLink: apigatewayv2.VpcLink;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpPrivateIntegrationOptions: apigatewayv2_integrations.HttpPrivateIntegrationOptions = {\n  method: apigatewayv2.HttpMethod.ANY,\n  parameterMapping: parameterMapping,\n  secureServerName: 'secureServerName',\n  vpcLink: vpcLink,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 20,
        "130": 2,
        "153": 3,
        "169": 3,
        "193": 1,
        "194": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "d31570f9f5faf39894c9a74cf99399400fc04cc3b94978a68cd4073edc94c126"
    },
    "79751aba8eac82ed3ef3f9e4ebc9d351e5f7b66af308f50a73d3db77bd5778ef": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_servicediscovery as servicediscovery\nfrom aws_cdk.aws_apigatewayv2_integrations import HttpServiceDiscoveryIntegration\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nvpc_link = apigwv2.VpcLink(self, \"VpcLink\", vpc=vpc)\nnamespace = servicediscovery.PrivateDnsNamespace(self, \"Namespace\",\n    name=\"boobar.com\",\n    vpc=vpc\n)\nservice = namespace.create_service(\"Service\")\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpServiceDiscoveryIntegration(\"DefaultIntegration\", service,\n        vpc_link=vpc_link\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ServiceDiscovery;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nVpcLink vpcLink = new VpcLink(this, \"VpcLink\", new VpcLinkProps { Vpc = vpc });\nPrivateDnsNamespace namespace = new PrivateDnsNamespace(this, \"Namespace\", new PrivateDnsNamespaceProps {\n    Name = \"boobar.com\",\n    Vpc = vpc\n});\nService service = namespace.CreateService(\"Service\");\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpServiceDiscoveryIntegration(\"DefaultIntegration\", service, new HttpServiceDiscoveryIntegrationProps {\n        VpcLink = vpcLink\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.servicediscovery.*;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.HttpServiceDiscoveryIntegration;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nVpcLink vpcLink = VpcLink.Builder.create(this, \"VpcLink\").vpc(vpc).build();\nPrivateDnsNamespace namespace = PrivateDnsNamespace.Builder.create(this, \"Namespace\")\n        .name(\"boobar.com\")\n        .vpc(vpc)\n        .build();\nService service = namespace.createService(\"Service\");\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(HttpServiceDiscoveryIntegration.Builder.create(\"DefaultIntegration\", service)\n                .vpcLink(vpcLink)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\nimport \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\n\nvpc := ec2.NewVpc(this, jsii.String(\"VPC\"))\nvpcLink := apigwv2.NewVpcLink(this, jsii.String(\"VpcLink\"), &vpcLinkProps{\n\tvpc: vpc,\n})\nnamespace := servicediscovery.NewPrivateDnsNamespace(this, jsii.String(\"Namespace\"), &privateDnsNamespaceProps{\n\tname: jsii.String(\"boobar.com\"),\n\tvpc: vpc,\n})\nservice := namespace.createService(jsii.String(\"Service\"))\n\nhttpEndpoint := apigwv2.NewHttpApi(this, jsii.String(\"HttpProxyPrivateApi\"), &httpApiProps{\n\tdefaultIntegration: *awscdkawsapigatewayv2integrations.NewHttpServiceDiscoveryIntegration(jsii.String(\"DefaultIntegration\"), service, &httpServiceDiscoveryIntegrationProps{\n\t\tvpcLink: vpcLink,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport { HttpServiceDiscoveryIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst vpcLink = new apigwv2.VpcLink(this, 'VpcLink', { vpc });\nconst namespace = new servicediscovery.PrivateDnsNamespace(this, 'Namespace', {\n  name: 'boobar.com',\n  vpc,\n});\nconst service = namespace.createService('Service');\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpServiceDiscoveryIntegration('DefaultIntegration', service, {\n    vpcLink,\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-integrations.HttpServiceDiscoveryIntegration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpServiceDiscoveryIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpServiceDiscoveryIntegrationProps",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.IVpcLink",
        "@aws-cdk/aws-apigatewayv2.VpcLink",
        "@aws-cdk/aws-apigatewayv2.VpcLinkProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-servicediscovery.IService",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport { HttpServiceDiscoveryIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst vpcLink = new apigwv2.VpcLink(this, 'VpcLink', { vpc });\nconst namespace = new servicediscovery.PrivateDnsNamespace(this, 'Namespace', {\n  name: 'boobar.com',\n  vpc,\n});\nconst service = namespace.createService('Service');\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpServiceDiscoveryIntegration('DefaultIntegration', service, {\n    vpcLink,\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 24,
        "104": 4,
        "193": 4,
        "194": 5,
        "196": 1,
        "197": 5,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 1,
        "281": 2,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "12780abe985de14358cec2adcc80eaff4f705363c1eff15c5bf4b9e851c34cd7"
    },
    "653e1518bbed139774b6a6562bfc4bb8728bc216652ed79bc24f9ea59a7c64aa": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_servicediscovery as servicediscovery\nfrom aws_cdk.aws_apigatewayv2_integrations import HttpServiceDiscoveryIntegration\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nvpc_link = apigwv2.VpcLink(self, \"VpcLink\", vpc=vpc)\nnamespace = servicediscovery.PrivateDnsNamespace(self, \"Namespace\",\n    name=\"boobar.com\",\n    vpc=vpc\n)\nservice = namespace.create_service(\"Service\")\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpServiceDiscoveryIntegration(\"DefaultIntegration\", service,\n        vpc_link=vpc_link\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.ServiceDiscovery;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nVpcLink vpcLink = new VpcLink(this, \"VpcLink\", new VpcLinkProps { Vpc = vpc });\nPrivateDnsNamespace namespace = new PrivateDnsNamespace(this, \"Namespace\", new PrivateDnsNamespaceProps {\n    Name = \"boobar.com\",\n    Vpc = vpc\n});\nService service = namespace.CreateService(\"Service\");\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpServiceDiscoveryIntegration(\"DefaultIntegration\", service, new HttpServiceDiscoveryIntegrationProps {\n        VpcLink = vpcLink\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.servicediscovery.*;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.HttpServiceDiscoveryIntegration;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nVpcLink vpcLink = VpcLink.Builder.create(this, \"VpcLink\").vpc(vpc).build();\nPrivateDnsNamespace namespace = PrivateDnsNamespace.Builder.create(this, \"Namespace\")\n        .name(\"boobar.com\")\n        .vpc(vpc)\n        .build();\nService service = namespace.createService(\"Service\");\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(HttpServiceDiscoveryIntegration.Builder.create(\"DefaultIntegration\", service)\n                .vpcLink(vpcLink)\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import servicediscovery \"github.com/aws-samples/dummy/awscdkawsservicediscovery\"\nimport \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\n\nvpc := ec2.NewVpc(this, jsii.String(\"VPC\"))\nvpcLink := apigwv2.NewVpcLink(this, jsii.String(\"VpcLink\"), &vpcLinkProps{\n\tvpc: vpc,\n})\nnamespace := servicediscovery.NewPrivateDnsNamespace(this, jsii.String(\"Namespace\"), &privateDnsNamespaceProps{\n\tname: jsii.String(\"boobar.com\"),\n\tvpc: vpc,\n})\nservice := namespace.createService(jsii.String(\"Service\"))\n\nhttpEndpoint := apigwv2.NewHttpApi(this, jsii.String(\"HttpProxyPrivateApi\"), &httpApiProps{\n\tdefaultIntegration: *awscdkawsapigatewayv2integrations.NewHttpServiceDiscoveryIntegration(jsii.String(\"DefaultIntegration\"), service, &httpServiceDiscoveryIntegrationProps{\n\t\tvpcLink: vpcLink,\n\t}),\n})",
          "version": "1"
        },
        "$": {
          "source": "import * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport { HttpServiceDiscoveryIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst vpcLink = new apigwv2.VpcLink(this, 'VpcLink', { vpc });\nconst namespace = new servicediscovery.PrivateDnsNamespace(this, 'Namespace', {\n  name: 'boobar.com',\n  vpc,\n});\nconst service = namespace.createService('Service');\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpServiceDiscoveryIntegration('DefaultIntegration', service, {\n    vpcLink,\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-integrations.HttpServiceDiscoveryIntegrationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpServiceDiscoveryIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpServiceDiscoveryIntegrationProps",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.IVpcLink",
        "@aws-cdk/aws-apigatewayv2.VpcLink",
        "@aws-cdk/aws-apigatewayv2.VpcLinkProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc",
        "@aws-cdk/aws-servicediscovery.IService",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespace",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespace#createService",
        "@aws-cdk/aws-servicediscovery.PrivateDnsNamespaceProps",
        "@aws-cdk/aws-servicediscovery.Service",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as servicediscovery from '@aws-cdk/aws-servicediscovery';\nimport { HttpServiceDiscoveryIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst vpcLink = new apigwv2.VpcLink(this, 'VpcLink', { vpc });\nconst namespace = new servicediscovery.PrivateDnsNamespace(this, 'Namespace', {\n  name: 'boobar.com',\n  vpc,\n});\nconst service = namespace.createService('Service');\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpServiceDiscoveryIntegration('DefaultIntegration', service, {\n    vpcLink,\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 24,
        "104": 4,
        "193": 4,
        "194": 5,
        "196": 1,
        "197": 5,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 1,
        "281": 2,
        "282": 3,
        "290": 1
      },
      "fqnsFingerprint": "12780abe985de14358cec2adcc80eaff4f705363c1eff15c5bf4b9e851c34cd7"
    },
    "0c5ee0bea56a1e877dd939b5bd2e97660985e33f7058ba44a251c2550428c391": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers import HttpLambdaAuthorizer, HttpLambdaResponseType\nfrom aws_cdk.aws_apigatewayv2_integrations import HttpUrlIntegration\n\n# This function handles your auth logic\n# auth_handler: lambda.Function\n\n\nauthorizer = HttpLambdaAuthorizer(\"BooksAuthorizer\", auth_handler,\n    response_types=[HttpLambdaResponseType.SIMPLE]\n)\n\napi = apigwv2.HttpApi(self, \"HttpApi\")\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    authorizer=authorizer\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Authorizers;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n// This function handles your auth logic\nFunction authHandler;\n\n\nHttpLambdaAuthorizer authorizer = new HttpLambdaAuthorizer(\"BooksAuthorizer\", authHandler, new HttpLambdaAuthorizerProps {\n    ResponseTypes = new [] { HttpLambdaResponseType.SIMPLE }\n});\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.HttpLambdaAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.authorizers.HttpLambdaResponseType;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.HttpUrlIntegration;\n\n// This function handles your auth logic\nFunction authHandler;\n\n\nHttpLambdaAuthorizer authorizer = HttpLambdaAuthorizer.Builder.create(\"BooksAuthorizer\", authHandler)\n        .responseTypes(List.of(HttpLambdaResponseType.SIMPLE))\n        .build();\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2authorizers\"\nimport \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\n// This function handles your auth logic\nvar authHandler function\n\n\nauthorizer := awscdkawsapigatewayv2authorizers.NewHttpLambdaAuthorizer(jsii.String(\"BooksAuthorizer\"), authHandler, &httpLambdaAuthorizerProps{\n\tresponseTypes: []httpLambdaResponseType{\n\t\t*awscdkawsapigatewayv2authorizers.HttpLambdaResponseType_SIMPLE,\n\t},\n})\n\napi := apigwv2.NewHttpApi(this, jsii.String(\"HttpApi\"))\n\napi.addRoutes(&addRoutesOptions{\n\tintegration: *awscdkawsapigatewayv2integrations.NewHttpUrlIntegration(jsii.String(\"BooksIntegration\"), jsii.String(\"https://get-books-proxy.myproxy.internal\")),\n\tpath: jsii.String(\"/books\"),\n\tauthorizer: authorizer,\n})",
          "version": "1"
        },
        "$": {
          "source": "import { HttpLambdaAuthorizer, HttpLambdaResponseType } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\nconst authorizer = new HttpLambdaAuthorizer('BooksAuthorizer', authHandler, {\n  responseTypes: [HttpLambdaResponseType.SIMPLE], // Define if returns simple and/or iam response\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-integrations.HttpUrlIntegration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaResponseType#SIMPLE",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpUrlIntegration",
        "@aws-cdk/aws-apigatewayv2.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.IHttpRouteAuthorizer",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpLambdaAuthorizer, HttpLambdaResponseType } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst authorizer = new HttpLambdaAuthorizer('BooksAuthorizer', authHandler, {\n  responseTypes: [HttpLambdaResponseType.SIMPLE], // Define if returns simple and/or iam response\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 3,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "6595023bc2242eeb16a7f23e8404f5aff480a82423974238718a88d2b4aa216a"
    },
    "773dc33f8644b019cfb9add90ca2a1a3ba2902f29197427cb9d7ad7f73fa46a2": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2 as apigatewayv2\nimport aws_cdk.aws_apigatewayv2_integrations as apigatewayv2_integrations\n\n# parameter_mapping: apigatewayv2.ParameterMapping\n\nhttp_url_integration_props = apigatewayv2_integrations.HttpUrlIntegrationProps(\n    method=apigatewayv2.HttpMethod.ANY,\n    parameter_mapping=parameter_mapping\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGatewayv2;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nParameterMapping parameterMapping;\n\nHttpUrlIntegrationProps httpUrlIntegrationProps = new HttpUrlIntegrationProps {\n    Method = HttpMethod.ANY,\n    ParameterMapping = parameterMapping\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.*;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.*;\n\nParameterMapping parameterMapping;\n\nHttpUrlIntegrationProps httpUrlIntegrationProps = HttpUrlIntegrationProps.builder()\n        .method(HttpMethod.ANY)\n        .parameterMapping(parameterMapping)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigatewayv2 \"github.com/aws-samples/dummy/awscdkawsapigatewayv2\"\nimport apigatewayv2_integrations \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\nvar parameterMapping parameterMapping\n\nhttpUrlIntegrationProps := &httpUrlIntegrationProps{\n\tmethod: apigatewayv2.httpMethod_ANY,\n\tparameterMapping: parameterMapping,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as apigatewayv2_integrations from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const parameterMapping: apigatewayv2.ParameterMapping;\nconst httpUrlIntegrationProps: apigatewayv2_integrations.HttpUrlIntegrationProps = {\n  method: apigatewayv2.HttpMethod.ANY,\n  parameterMapping: parameterMapping,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-integrations.HttpUrlIntegrationProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpUrlIntegrationProps",
        "@aws-cdk/aws-apigatewayv2.HttpMethod",
        "@aws-cdk/aws-apigatewayv2.HttpMethod#ANY",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as apigatewayv2_integrations from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const parameterMapping: apigatewayv2.ParameterMapping;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst httpUrlIntegrationProps: apigatewayv2_integrations.HttpUrlIntegrationProps = {\n  method: apigatewayv2.HttpMethod.ANY,\n  parameterMapping: parameterMapping,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "a3846dff267d8a4f0adc782564ff5c7308c26ee69267c76e183ce9d4faee56fb"
    },
    "2c5a6a243e4aaafbeb5c5e07ee94935bad040e269f1d9aba9159e6b594545cf8": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import WebSocketLambdaIntegration\n\n# message_handler: lambda.Function\n\n\nweb_socket_api = apigwv2.WebSocketApi(self, \"mywsapi\")\napigwv2.WebSocketStage(self, \"mystage\",\n    web_socket_api=web_socket_api,\n    stage_name=\"dev\",\n    auto_deploy=True\n)\nweb_socket_api.add_route(\"sendmessage\",\n    integration=WebSocketLambdaIntegration(\"SendMessageIntegration\", message_handler)\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nFunction messageHandler;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nnew WebSocketStage(this, \"mystage\", new WebSocketStageProps {\n    WebSocketApi = webSocketApi,\n    StageName = \"dev\",\n    AutoDeploy = true\n});\nwebSocketApi.AddRoute(\"sendmessage\", new WebSocketRouteOptions {\n    Integration = new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.WebSocketLambdaIntegration;\n\nFunction messageHandler;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nWebSocketStage.Builder.create(this, \"mystage\")\n        .webSocketApi(webSocketApi)\n        .stageName(\"dev\")\n        .autoDeploy(true)\n        .build();\nwebSocketApi.addRoute(\"sendmessage\", WebSocketRouteOptions.builder()\n        .integration(new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\nvar messageHandler function\n\n\nwebSocketApi := apigwv2.NewWebSocketApi(this, jsii.String(\"mywsapi\"))\napigwv2.NewWebSocketStage(this, jsii.String(\"mystage\"), &webSocketStageProps{\n\twebSocketApi: webSocketApi,\n\tstageName: jsii.String(\"dev\"),\n\tautoDeploy: jsii.Boolean(true),\n})\nwebSocketApi.addRoute(jsii.String(\"sendmessage\"), &webSocketRouteOptions{\n\tintegration: *awscdkawsapigatewayv2integrations.NewWebSocketLambdaIntegration(jsii.String(\"SendMessageIntegration\"), messageHandler),\n})",
          "version": "1"
        },
        "$": {
          "source": "import { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});\n\ndeclare const messageHandler: lambda.Function;\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-integrations.WebSocketLambdaIntegration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.WebSocketLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2.WebSocketApi#addRoute",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteOptions",
        "@aws-cdk/aws-apigatewayv2.WebSocketStage",
        "@aws-cdk/aws-apigatewayv2.WebSocketStageProps",
        "@aws-cdk/aws-lambda.IFunction",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const messageHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 17,
        "104": 2,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "67cc9d4a9b2e105209e54ff025f2a08ded28129910410b15ef6f3c2d030e0c74"
    },
    "53926d017711a9cf273a6d7cbeaf39b8fec9b86331f172341a14f1b9957a4ad6": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_apigatewayv2_integrations as apigatewayv2_integrations\n\nweb_socket_mock_integration = apigatewayv2_integrations.WebSocketMockIntegration(\"id\")",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nWebSocketMockIntegration webSocketMockIntegration = new WebSocketMockIntegration(\"id\");",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.apigatewayv2.integrations.*;\n\nWebSocketMockIntegration webSocketMockIntegration = new WebSocketMockIntegration(\"id\");",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport apigatewayv2_integrations \"github.com/aws-samples/dummy/awscdkawsapigatewayv2integrations\"\n\nwebSocketMockIntegration := apigatewayv2_integrations.NewWebSocketMockIntegration(jsii.String(\"id\"))",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_integrations from '@aws-cdk/aws-apigatewayv2-integrations';\nconst webSocketMockIntegration = new apigatewayv2_integrations.WebSocketMockIntegration('id');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2-integrations.WebSocketMockIntegration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.WebSocketMockIntegration"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apigatewayv2_integrations from '@aws-cdk/aws-apigatewayv2-integrations';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst webSocketMockIntegration = new apigatewayv2_integrations.WebSocketMockIntegration('id');\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "d083accc76d7e5e13e748c0faede7d260eac5c0a6063152016640c61a93d9149"
    }
  }
}
